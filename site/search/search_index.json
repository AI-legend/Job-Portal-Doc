{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI-Powered Job Seeker Platform","text":""},{"location":"#project-overview","title":"Project Overview","text":"<p>A comprehensive job seeker platform that connects job seekers with opportunities through both manual search and AI-powered agent assistance. The platform supports two user types (recruiters and seekers) and offers automated job applications through intelligent agents.</p>"},{"location":"#core-features","title":"\ud83c\udfaf Core Features","text":""},{"location":"#user-management","title":"User Management","text":"<ul> <li>Dual User Types: Recruiters and Job Seekers</li> <li>Authentication &amp; Authorization: Secure registration and login</li> <li>Profile Management: Comprehensive user profiles</li> </ul>"},{"location":"#job-seeker-features","title":"Job Seeker Features","text":"<ul> <li>CV Builder: Interactive CV creation and management</li> <li>Manual Job Search: Traditional search with filters</li> <li>AI Agent Search: Intelligent job matching based on CV</li> <li>Auto-Apply: Automated job applications via AI agent</li> <li>External Platform Integration: Web scraping from major job boards</li> <li>Internal Job Portal: Native job posting system</li> </ul>"},{"location":"#recruiter-features","title":"Recruiter Features","text":"<ul> <li>Job Posting: Create and manage job listings</li> <li>Candidate Management: Review applications and profiles</li> <li>Analytics Dashboard: Recruitment insights and metrics</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Frontend (React/Next.js)                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                    API Gateway (Express.js)                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Backend Services  \u2502  Workflow Engine  \u2502  External APIs    \u2502\n\u2502  (Node.js/Python)  \u2502     (n8n)        \u2502 (Job Boards)      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502              Database Layer (Firebase/MongoDB)             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                 Infrastructure (Cloud/Docker)              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#project-milestones","title":"\ud83d\udccb Project Milestones","text":""},{"location":"#phase-1-foundation-weeks-1-2","title":"Phase 1: Foundation (Weeks 1-2)","text":"<ul> <li> Project setup and infrastructure</li> <li> Basic authentication system</li> <li> Database schema design</li> <li> Core UI components</li> </ul>"},{"location":"#phase-2-core-features-weeks-3-5","title":"Phase 2: Core Features (Weeks 3-5)","text":"<ul> <li> User registration and profiles</li> <li> CV builder functionality</li> <li> Manual job search</li> <li> Basic job posting (recruiters)</li> </ul>"},{"location":"#phase-3-ai-integration-weeks-6-8","title":"Phase 3: AI Integration (Weeks 6-8)","text":"<ul> <li> AI agent development</li> <li> CV analysis and job matching</li> <li> External job board integration</li> <li> Web scraping implementation</li> </ul>"},{"location":"#phase-4-automation-weeks-9-10","title":"Phase 4: Automation (Weeks 9-10)","text":"<ul> <li> Auto-apply functionality</li> <li> Workflow automation (n8n)</li> <li> Notification system</li> <li> Analytics dashboard</li> </ul>"},{"location":"#phase-5-deployment-testing-weeks-11-12","title":"Phase 5: Deployment &amp; Testing (Weeks 11-12)","text":"<ul> <li> Production deployment</li> <li> Performance optimization</li> <li> User testing and feedback</li> <li> Documentation completion</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd hr-agent\n\n# Install dependencies\nnpm install\n\n# Start development servers\nnpm run dev\n</code></pre>"},{"location":"#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>hr-agent/\n\u251c\u2500\u2500 docs/                 # Project documentation\n\u251c\u2500\u2500 frontend/            # React/Next.js application\n\u251c\u2500\u2500 backend/             # Backend services\n\u251c\u2500\u2500 workflows/           # n8n workflow definitions\n\u251c\u2500\u2500 database/            # Database schemas and migrations\n\u251c\u2500\u2500 infrastructure/      # Docker, deployment configs\n\u251c\u2500\u2500 scripts/            # Utility scripts\n\u2514\u2500\u2500 tests/              # Test suites\n</code></pre>"},{"location":"#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Architecture Documentation</li> <li>API Documentation</li> <li>Deployment Guide</li> <li>Development Setup</li> </ul>"},{"location":"#contact","title":"\ud83d\udcde Contact","text":"<p>For questions and support, please refer to the documentation or contact the development team.</p>"},{"location":"PROJECT_MILESTONES/","title":"Project Milestones &amp; Implementation Strategy","text":""},{"location":"PROJECT_MILESTONES/#overview","title":"Overview","text":"<p>This document outlines the complete project milestones, implementation timeline, and strategic approach for building the AI-Powered Job Seeker Platform. The project is broken down into manageable phases with clear deliverables and success criteria.</p>"},{"location":"PROJECT_MILESTONES/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Project Phases Overview</li> <li>Detailed Milestones</li> <li>Implementation Strategy</li> <li>Resource Allocation</li> <li>Risk Management</li> <li>Success Metrics</li> </ol>"},{"location":"PROJECT_MILESTONES/#project-phases-overview","title":"Project Phases Overview","text":"<pre><code>Phase 1: Foundation (Weeks 1-2)\n\u251c\u2500\u2500 Infrastructure Setup\n\u251c\u2500\u2500 Core Authentication\n\u251c\u2500\u2500 Database Design\n\u2514\u2500\u2500 Basic UI Framework\n\nPhase 2: Core Features (Weeks 3-5)\n\u251c\u2500\u2500 User Management\n\u251c\u2500\u2500 CV Builder\n\u251c\u2500\u2500 Job Management\n\u2514\u2500\u2500 Manual Search\n\nPhase 3: AI Integration (Weeks 6-8)\n\u251c\u2500\u2500 AI Agent Development\n\u251c\u2500\u2500 Job Matching Engine\n\u251c\u2500\u2500 Web Scraping Implementation\n\u2514\u2500\u2500 External API Integration\n\nPhase 4: Automation (Weeks 9-10)\n\u251c\u2500\u2500 Auto-Apply System\n\u251c\u2500\u2500 Workflow Automation\n\u251c\u2500\u2500 Notification System\n\u2514\u2500\u2500 Analytics Dashboard\n\nPhase 5: Deployment &amp; Optimization (Weeks 11-12)\n\u251c\u2500\u2500 Production Deployment\n\u251c\u2500\u2500 Performance Optimization\n\u251c\u2500\u2500 User Testing\n\u2514\u2500\u2500 Documentation\n</code></pre>"},{"location":"PROJECT_MILESTONES/#detailed-milestones","title":"Detailed Milestones","text":""},{"location":"PROJECT_MILESTONES/#phase-1-foundation-weeks-1-2","title":"Phase 1: Foundation (Weeks 1-2)","text":""},{"location":"PROJECT_MILESTONES/#week-1-infrastructure-setup","title":"Week 1: Infrastructure &amp; Setup","text":"<p>Milestone 1.1: Project Infrastructure - [ ] Repository Setup   - Initialize Git repository with proper structure   - Set up branch protection rules and CI/CD workflows   - Configure development environment with Docker   - Create project documentation structure</p> <ul> <li> Development Environment</li> <li>Set up Docker Compose for local development</li> <li>Configure MongoDB, PostgreSQL, and Redis databases</li> <li>Set up hot reloading for all services</li> <li> <p>Create development scripts and VS Code configuration</p> </li> <li> <p> CI/CD Pipeline</p> </li> <li>Configure GitHub Actions for automated testing</li> <li>Set up code quality checks (ESLint, Prettier, Black)</li> <li>Implement automated security scanning</li> <li>Create staging deployment pipeline</li> </ul> <p>Deliverables: - Fully configured development environment - Working CI/CD pipeline - Project documentation structure - Development team onboarding guide</p> <p>Success Criteria: - All developers can run the full stack locally - CI/CD pipeline passes for sample commits - Code quality gates are enforced</p>"},{"location":"PROJECT_MILESTONES/#week-2-core-architecture-authentication","title":"Week 2: Core Architecture &amp; Authentication","text":"<p>Milestone 1.2: Database Design &amp; Models - [ ] Database Schema Design   - Design MongoDB collections for users, jobs, CVs, applications   - Create PostgreSQL schema for analytics and n8n   - Set up Redis caching strategies   - Implement database migrations and seed data</p> <ul> <li> Core Data Models</li> <li>User model with role-based permissions</li> <li>Job model with search optimization</li> <li>CV model with version control</li> <li>Application tracking model</li> </ul> <p>Milestone 1.3: Authentication System - [ ] Firebase Authentication Integration   - Set up Firebase project and configuration   - Implement JWT token management   - Create user registration and login flows   - Add social authentication (Google, LinkedIn)</p> <ul> <li> Authorization Framework</li> <li>Implement role-based access control (RBAC)</li> <li>Create middleware for route protection</li> <li>Set up API key management for external services</li> <li>Add session management and refresh tokens</li> </ul> <p>Deliverables: - Complete database schema and models - Working authentication system - API documentation for auth endpoints - Security audit report</p> <p>Success Criteria: - Users can register and login successfully - Role-based permissions work correctly - Authentication tokens are secure and refreshable</p>"},{"location":"PROJECT_MILESTONES/#phase-2-core-features-weeks-3-5","title":"Phase 2: Core Features (Weeks 3-5)","text":""},{"location":"PROJECT_MILESTONES/#week-3-user-management-profile-system","title":"Week 3: User Management &amp; Profile System","text":"<p>Milestone 2.1: User Profile Management - [ ] User Registration &amp; Onboarding   - Create intuitive registration flow for seekers and recruiters   - Implement email verification system   - Build user profile creation wizard   - Add profile picture upload and management</p> <ul> <li> Profile Management Interface</li> <li>Build responsive profile editing interface</li> <li>Implement preferences management</li> <li>Create account settings and privacy controls</li> <li>Add profile completion indicators</li> </ul> <p>Milestone 2.2: Frontend Foundation - [ ] Next.js Application Setup   - Set up Next.js with TypeScript and Tailwind CSS   - Create responsive layout components   - Implement state management with Redux Toolkit   - Set up routing and navigation</p> <ul> <li> UI Component Library</li> <li>Build reusable component library</li> <li>Implement design system with consistent styling</li> <li>Create form components with validation</li> <li>Add loading states and error handling</li> </ul> <p>Deliverables: - User registration and profile management system - Responsive frontend application - Reusable UI component library - User onboarding flow</p> <p>Success Criteria: - Users can complete registration and profile setup - Frontend is responsive across devices - UI components are consistent and accessible</p>"},{"location":"PROJECT_MILESTONES/#week-4-cv-builder-system","title":"Week 4: CV Builder System","text":"<p>Milestone 2.3: CV Builder Core Functionality - [ ] CV Template System   - Design multiple professional CV templates   - Implement template selection interface   - Create template customization options   - Add PDF export functionality</p> <ul> <li> CV Editor Interface</li> <li>Build drag-and-drop CV builder</li> <li>Implement real-time preview</li> <li>Add section management (experience, education, skills)</li> <li>Create auto-save functionality</li> </ul> <p>Milestone 2.4: CV Data Management - [ ] CV Data Models &amp; API   - Implement CV storage and versioning   - Create CV sharing and privacy controls   - Add CV analytics and view tracking   - Implement CV import from existing documents</p> <ul> <li> Skills &amp; Experience Management</li> <li>Create skills database with autocomplete</li> <li>Implement experience calculation</li> <li>Add achievement tracking</li> <li>Create portfolio project management</li> </ul> <p>Deliverables: - Functional CV builder with multiple templates - PDF export system - CV versioning and management - Skills and experience database</p> <p>Success Criteria: - Users can create professional CVs easily - PDFs are generated with high quality - CV data is properly stored and versioned</p>"},{"location":"PROJECT_MILESTONES/#week-5-job-management-system","title":"Week 5: Job Management System","text":"<p>Milestone 2.5: Job Posting &amp; Management (Recruiters) - [ ] Job Creation Interface   - Build job posting form with rich text editor   - Implement job requirement specification   - Add company profile management   - Create job posting preview and editing</p> <ul> <li> Application Management</li> <li>Build application tracking dashboard</li> <li>Implement candidate screening interface</li> <li>Add application status management</li> <li>Create communication tools for recruiters</li> </ul> <p>Milestone 2.6: Job Search &amp; Discovery (Seekers) - [ ] Job Search Interface   - Build advanced search with filters   - Implement location-based search with maps   - Add saved searches and job alerts   - Create job comparison tools</p> <ul> <li> Job Application System</li> <li>Implement one-click job application</li> <li>Add cover letter templates and customization</li> <li>Create application tracking for seekers</li> <li>Add application status notifications</li> </ul> <p>Deliverables: - Complete job posting and management system - Advanced job search functionality - Application tracking for both parties - Job alert and notification system</p> <p>Success Criteria: - Recruiters can post and manage jobs effectively - Job seekers can find and apply to relevant positions - Application process is smooth and trackable</p>"},{"location":"PROJECT_MILESTONES/#phase-3-ai-integration-weeks-6-8","title":"Phase 3: AI Integration (Weeks 6-8)","text":""},{"location":"PROJECT_MILESTONES/#week-6-ai-agent-foundation","title":"Week 6: AI Agent Foundation","text":"<p>Milestone 3.1: AI Service Architecture - [ ] AI Service Setup   - Set up Python FastAPI service for AI operations   - Integrate OpenAI GPT and Claude APIs   - Implement AI model management and caching   - Create AI service monitoring and logging</p> <ul> <li> Natural Language Processing</li> <li>Implement CV text analysis and skill extraction</li> <li>Create job description parsing and categorization</li> <li>Add resume optimization suggestions</li> <li>Build keyword matching algorithms</li> </ul> <p>Milestone 3.2: Basic AI Agent Functionality - [ ] Conversational AI Interface   - Create chat interface for AI agent interaction   - Implement context-aware conversation handling   - Add intent recognition and response generation   - Create conversation history and persistence</p> <ul> <li> CV Analysis &amp; Optimization</li> <li>Build AI-powered CV analysis engine</li> <li>Implement skill gap identification</li> <li>Create personalized improvement suggestions</li> <li>Add ATS optimization recommendations</li> </ul> <p>Deliverables: - AI service infrastructure - Basic conversational AI agent - CV analysis and optimization system - NLP processing pipeline</p> <p>Success Criteria: - AI agent can understand and respond to user queries - CV analysis provides valuable insights - AI recommendations are accurate and helpful</p>"},{"location":"PROJECT_MILESTONES/#week-7-job-matching-engine","title":"Week 7: Job Matching Engine","text":"<p>Milestone 3.3: Intelligent Job Matching - [ ] Matching Algorithm Development   - Implement ML-based job-CV matching   - Create similarity scoring algorithms   - Add preference-based filtering   - Build ranking and recommendation engine</p> <ul> <li> Personalization Engine</li> <li>Implement user behavior tracking</li> <li>Create personalized job recommendations</li> <li>Add learning from user feedback</li> <li>Build preference adaptation system</li> </ul> <p>Milestone 3.4: External Job Board Integration - [ ] Web Scraping Infrastructure   - Set up ethical web scraping framework   - Implement rate limiting and proxy rotation   - Create data normalization pipeline   - Add duplicate detection and deduplication</p> <ul> <li> Job Board Integrations</li> <li>Integrate with LinkedIn Jobs API</li> <li>Add Indeed job scraping</li> <li>Implement Glassdoor integration</li> <li>Create unified job data format</li> </ul> <p>Deliverables: - AI-powered job matching system - External job board integrations - Web scraping infrastructure - Personalized recommendation engine</p> <p>Success Criteria: - Job matching accuracy &gt;85% - External job data is comprehensive and up-to-date - Recommendations improve with user interaction</p>"},{"location":"PROJECT_MILESTONES/#week-8-advanced-ai-features","title":"Week 8: Advanced AI Features","text":"<p>Milestone 3.5: Advanced AI Capabilities - [ ] Interview Preparation   - Build AI-powered mock interview system   - Create industry-specific question banks   - Implement feedback and improvement suggestions   - Add video interview practice tools</p> <ul> <li> Career Path Analysis</li> <li>Implement career progression recommendations</li> <li>Create skill development roadmaps</li> <li>Add salary prediction models</li> <li>Build market trend analysis</li> </ul> <p>Milestone 3.6: AI Agent Enhancement - [ ] Multi-modal AI Interaction   - Add voice interaction capabilities   - Implement document analysis (PDF, DOCX)   - Create image-based CV parsing   - Add multilingual support</p> <ul> <li> Advanced Reasoning</li> <li>Implement complex query understanding</li> <li>Add multi-step task execution</li> <li>Create contextual memory and learning</li> <li>Build explanation and reasoning capabilities</li> </ul> <p>Deliverables: - Advanced AI features (interview prep, career analysis) - Multi-modal AI interaction - Enhanced reasoning capabilities - Comprehensive AI agent ecosystem</p> <p>Success Criteria: - AI agent handles complex queries accurately - Advanced features provide significant value - User engagement with AI features is high</p>"},{"location":"PROJECT_MILESTONES/#phase-4-automation-weeks-9-10","title":"Phase 4: Automation (Weeks 9-10)","text":""},{"location":"PROJECT_MILESTONES/#week-9-auto-apply-system","title":"Week 9: Auto-Apply System","text":"<p>Milestone 4.1: Automated Job Application - [ ] Auto-Apply Engine   - Implement automated application submission   - Create application customization logic   - Add safety checks and user controls   - Build application tracking and reporting</p> <ul> <li> External Platform Integration</li> <li>Integrate with job board application systems</li> <li>Implement platform-specific application flows</li> <li>Add CAPTCHA solving and human verification</li> <li>Create fallback mechanisms for failed applications</li> </ul> <p>Milestone 4.2: Workflow Automation with n8n - [ ] n8n Workflow Setup   - Configure n8n workflow engine   - Create workflow templates for common tasks   - Implement webhook integrations   - Set up workflow monitoring and alerting</p> <ul> <li> Automated Workflows</li> <li>Build job scraping automation workflows</li> <li>Create application processing workflows</li> <li>Implement notification automation</li> <li>Add data synchronization workflows</li> </ul> <p>Deliverables: - Automated job application system - n8n workflow automation - External platform integrations - Application safety and control mechanisms</p> <p>Success Criteria: - Auto-apply successfully submits applications - Automation reduces manual work by &gt;80% - System maintains high accuracy and safety</p>"},{"location":"PROJECT_MILESTONES/#week-10-notifications-analytics","title":"Week 10: Notifications &amp; Analytics","text":"<p>Milestone 4.3: Comprehensive Notification System - [ ] Multi-Channel Notifications   - Implement email notification system   - Add SMS notifications via Twilio   - Create push notifications for web and mobile   - Build in-app notification center</p> <ul> <li> Smart Notification Logic</li> <li>Implement intelligent notification timing</li> <li>Create user preference-based filtering</li> <li>Add notification batching and digests</li> <li>Build notification analytics and optimization</li> </ul> <p>Milestone 4.4: Analytics &amp; Reporting Dashboard - [ ] User Analytics Dashboard   - Build comprehensive analytics dashboard   - Implement application success tracking   - Create job market insights   - Add performance metrics and KPIs</p> <ul> <li> Business Intelligence</li> <li>Implement recruiter analytics and insights</li> <li>Create market trend analysis</li> <li>Add competitive intelligence features</li> <li>Build predictive analytics capabilities</li> </ul> <p>Deliverables: - Multi-channel notification system - Comprehensive analytics dashboard - Business intelligence features - Performance monitoring and reporting</p> <p>Success Criteria: - Notifications are timely and relevant - Analytics provide actionable insights - Dashboard usage is high among users</p>"},{"location":"PROJECT_MILESTONES/#phase-5-deployment-optimization-weeks-11-12","title":"Phase 5: Deployment &amp; Optimization (Weeks 11-12)","text":""},{"location":"PROJECT_MILESTONES/#week-11-production-deployment","title":"Week 11: Production Deployment","text":"<p>Milestone 5.1: Production Infrastructure - [ ] Cloud Infrastructure Setup   - Deploy to AWS/GCP with Kubernetes   - Set up production databases with clustering   - Implement load balancing and auto-scaling   - Configure monitoring and alerting systems</p> <ul> <li> Security &amp; Compliance</li> <li>Implement security best practices</li> <li>Add compliance monitoring (GDPR, CCPA)</li> <li>Create backup and disaster recovery plans</li> <li>Conduct security penetration testing</li> </ul> <p>Milestone 5.2: Performance Optimization - [ ] Application Performance   - Optimize database queries and indexing   - Implement caching strategies   - Add CDN for static assets   - Optimize API response times</p> <ul> <li> Scalability Improvements</li> <li>Implement horizontal scaling strategies</li> <li>Add database read replicas</li> <li>Optimize AI model inference</li> <li>Create efficient data processing pipelines</li> </ul> <p>Deliverables: - Production-ready infrastructure - Security and compliance implementation - Performance optimization - Scalability enhancements</p> <p>Success Criteria: - System handles production load effectively - Security standards are met - Performance meets SLA requirements</p>"},{"location":"PROJECT_MILESTONES/#week-12-testing-launch-preparation","title":"Week 12: Testing &amp; Launch Preparation","text":"<p>Milestone 5.3: Comprehensive Testing - [ ] User Acceptance Testing   - Conduct beta testing with real users   - Gather feedback and implement improvements   - Test all user flows and edge cases   - Validate accessibility and usability</p> <ul> <li> Load Testing &amp; Performance Validation</li> <li>Conduct load testing with realistic traffic</li> <li>Test auto-scaling and failover mechanisms</li> <li>Validate database performance under load</li> <li>Test AI service response times</li> </ul> <p>Milestone 5.4: Launch Preparation - [ ] Documentation &amp; Training   - Complete user documentation and help guides   - Create admin and support documentation   - Prepare marketing materials and demos   - Train customer support team</p> <ul> <li> Launch Strategy</li> <li>Plan phased rollout strategy</li> <li>Set up monitoring and incident response</li> <li>Prepare launch communications</li> <li>Create post-launch optimization plan</li> </ul> <p>Deliverables: - Comprehensive testing results - Complete documentation - Launch strategy and materials - Support and monitoring systems</p> <p>Success Criteria: - All tests pass with acceptable results - Documentation is complete and accurate - Launch preparation is thorough</p>"},{"location":"PROJECT_MILESTONES/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"PROJECT_MILESTONES/#technical-architecture-approach","title":"Technical Architecture Approach","text":""},{"location":"PROJECT_MILESTONES/#1-microservices-first-design","title":"1. Microservices-First Design","text":"<ul> <li>Scalability: Each service can be scaled independently</li> <li>Technology Flexibility: Use best tools for each service</li> <li>Team Independence: Teams can work on different services</li> <li>Fault Isolation: Issues in one service don't affect others</li> </ul>"},{"location":"PROJECT_MILESTONES/#2-api-first-development","title":"2. API-First Development","text":"<ul> <li>Frontend-Backend Separation: Clear API contracts</li> <li>Third-party Integration: Easy integration with external services</li> <li>Mobile Readiness: APIs ready for future mobile apps</li> <li>Testing: Easier to test individual services</li> </ul>"},{"location":"PROJECT_MILESTONES/#3-progressive-enhancement","title":"3. Progressive Enhancement","text":"<ul> <li>Core Functionality First: Basic features work without advanced features</li> <li>AI as Enhancement: AI improves experience but isn't required</li> <li>Graceful Degradation: System works even if some services are down</li> <li>Performance Priority: Fast basic features, enhanced features load progressively</li> </ul>"},{"location":"PROJECT_MILESTONES/#development-methodology","title":"Development Methodology","text":""},{"location":"PROJECT_MILESTONES/#1-agile-development-with-weekly-sprints","title":"1. Agile Development with Weekly Sprints","text":"<ul> <li>Sprint Planning: Weekly planning sessions</li> <li>Daily Standups: Track progress and blockers</li> <li>Sprint Reviews: Demo completed features</li> <li>Retrospectives: Continuous improvement</li> </ul>"},{"location":"PROJECT_MILESTONES/#2-test-driven-development-tdd","title":"2. Test-Driven Development (TDD)","text":"<ul> <li>Unit Tests: 80%+ code coverage for all services</li> <li>Integration Tests: Test service interactions</li> <li>E2E Tests: Test complete user workflows</li> <li>Performance Tests: Validate performance requirements</li> </ul>"},{"location":"PROJECT_MILESTONES/#3-continuous-integrationdeployment","title":"3. Continuous Integration/Deployment","text":"<ul> <li>Automated Testing: All tests run on every commit</li> <li>Code Quality Gates: Enforce coding standards</li> <li>Automated Deployment: Deploy to staging automatically</li> <li>Feature Flags: Safe rollout of new features</li> </ul>"},{"location":"PROJECT_MILESTONES/#quality-assurance-strategy","title":"Quality Assurance Strategy","text":""},{"location":"PROJECT_MILESTONES/#1-multi-layer-testing","title":"1. Multi-Layer Testing","text":"<pre><code>Testing Pyramid\n\u251c\u2500\u2500 Unit Tests (70%)\n\u2502   \u251c\u2500\u2500 Component Tests\n\u2502   \u251c\u2500\u2500 Service Tests\n\u2502   \u2514\u2500\u2500 Utility Tests\n\u251c\u2500\u2500 Integration Tests (20%)\n\u2502   \u251c\u2500\u2500 API Tests\n\u2502   \u251c\u2500\u2500 Database Tests\n\u2502   \u2514\u2500\u2500 Service Integration\n\u2514\u2500\u2500 E2E Tests (10%)\n    \u251c\u2500\u2500 User Workflows\n    \u251c\u2500\u2500 Cross-Browser Tests\n    \u2514\u2500\u2500 Mobile Tests\n</code></pre>"},{"location":"PROJECT_MILESTONES/#2-code-quality-standards","title":"2. Code Quality Standards","text":"<ul> <li>Code Reviews: All code reviewed before merge</li> <li>Automated Linting: Consistent code style</li> <li>Security Scanning: Automated vulnerability detection</li> <li>Performance Monitoring: Track performance metrics</li> </ul>"},{"location":"PROJECT_MILESTONES/#3-user-experience-validation","title":"3. User Experience Validation","text":"<ul> <li>Usability Testing: Regular user testing sessions</li> <li>A/B Testing: Test different approaches</li> <li>Analytics: Track user behavior and success metrics</li> <li>Feedback Collection: Regular user feedback collection</li> </ul>"},{"location":"PROJECT_MILESTONES/#resource-allocation","title":"Resource Allocation","text":""},{"location":"PROJECT_MILESTONES/#team-structure","title":"Team Structure","text":""},{"location":"PROJECT_MILESTONES/#core-development-team-6-8-people","title":"Core Development Team (6-8 people)","text":"<pre><code>Technical Lead (1)\n\u251c\u2500\u2500 Frontend Developers (2)\n\u2502   \u251c\u2500\u2500 React/Next.js Expert\n\u2502   \u2514\u2500\u2500 UI/UX Developer\n\u251c\u2500\u2500 Backend Developers (2)\n\u2502   \u251c\u2500\u2500 Node.js/Express Expert\n\u2502   \u2514\u2500\u2500 Database Specialist\n\u251c\u2500\u2500 AI/ML Developer (1)\n\u2502   \u2514\u2500\u2500 Python/ML Specialist\n\u251c\u2500\u2500 DevOps Engineer (1)\n\u2502   \u2514\u2500\u2500 Cloud/Infrastructure Expert\n\u2514\u2500\u2500 QA Engineer (1)\n    \u2514\u2500\u2500 Testing/Automation Expert\n</code></pre>"},{"location":"PROJECT_MILESTONES/#supporting-roles","title":"Supporting Roles","text":"<ul> <li>Product Manager: Requirements and roadmap</li> <li>UI/UX Designer: Design and user experience</li> <li>Business Analyst: Market research and analysis</li> <li>Project Manager: Timeline and coordination</li> </ul>"},{"location":"PROJECT_MILESTONES/#technology-stack-investment","title":"Technology Stack Investment","text":""},{"location":"PROJECT_MILESTONES/#development-tools-licenses","title":"Development Tools &amp; Licenses","text":"<ul> <li>IDE Licenses: VS Code Pro, WebStorm</li> <li>Testing Tools: Jest, Cypress, Playwright</li> <li>Design Tools: Figma, Adobe Creative Suite</li> <li>Project Management: Jira, Confluence</li> </ul>"},{"location":"PROJECT_MILESTONES/#cloud-infrastructure-monthly-costs","title":"Cloud Infrastructure (Monthly Costs)","text":"<ul> <li>AWS/GCP Services: ~$2,000-5,000/month</li> <li>Database Hosting: ~$500-1,500/month</li> <li>CDN &amp; Storage: ~$200-500/month</li> <li>Monitoring Tools: ~$300-800/month</li> </ul>"},{"location":"PROJECT_MILESTONES/#external-services-apis","title":"External Services &amp; APIs","text":"<ul> <li>OpenAI API: ~$500-2,000/month</li> <li>Firebase: ~$100-500/month</li> <li>Email Service: ~$50-200/month</li> <li>SMS Service: ~$100-300/month</li> </ul>"},{"location":"PROJECT_MILESTONES/#risk-management","title":"Risk Management","text":""},{"location":"PROJECT_MILESTONES/#technical-risks","title":"Technical Risks","text":""},{"location":"PROJECT_MILESTONES/#1-ai-api-rate-limits-costs","title":"1. AI API Rate Limits &amp; Costs","text":"<p>Risk: OpenAI/Claude API costs exceed budget Mitigation:  - Implement intelligent caching - Use local models for basic tasks - Set up usage monitoring and alerts - Negotiate volume pricing</p>"},{"location":"PROJECT_MILESTONES/#2-web-scraping-legal-issues","title":"2. Web Scraping Legal Issues","text":"<p>Risk: Legal challenges from job boards Mitigation: - Follow robots.txt and terms of service - Implement respectful scraping practices - Focus on public APIs where available - Have legal review scraping approach</p>"},{"location":"PROJECT_MILESTONES/#3-database-performance-at-scale","title":"3. Database Performance at Scale","text":"<p>Risk: Database performance degrades with large datasets Mitigation: - Implement proper indexing strategy - Set up read replicas for scaling - Use caching for frequently accessed data - Plan for database sharding</p>"},{"location":"PROJECT_MILESTONES/#business-risks","title":"Business Risks","text":""},{"location":"PROJECT_MILESTONES/#1-market-competition","title":"1. Market Competition","text":"<p>Risk: Established players dominate market Mitigation: - Focus on unique AI-powered features - Target underserved market segments - Build strong user experience differentiation - Rapid iteration and feature development</p>"},{"location":"PROJECT_MILESTONES/#2-user-adoption","title":"2. User Adoption","text":"<p>Risk: Low user adoption and engagement Mitigation: - Extensive user testing and feedback - Strong onboarding and user education - Viral features and referral programs - Community building and support</p>"},{"location":"PROJECT_MILESTONES/#3-regulatory-compliance","title":"3. Regulatory Compliance","text":"<p>Risk: GDPR, CCPA, and employment law compliance Mitigation: - Legal review of all data practices - Implement privacy by design - Regular compliance audits - Clear terms of service and privacy policy</p>"},{"location":"PROJECT_MILESTONES/#operational-risks","title":"Operational Risks","text":""},{"location":"PROJECT_MILESTONES/#1-team-scalability","title":"1. Team Scalability","text":"<p>Risk: Team can't scale with product complexity Mitigation: - Comprehensive documentation - Code reviews and knowledge sharing - Automated testing and deployment - Modular architecture for team independence</p>"},{"location":"PROJECT_MILESTONES/#2-external-dependencies","title":"2. External Dependencies","text":"<p>Risk: Critical external services become unavailable Mitigation: - Implement circuit breakers and fallbacks - Use multiple service providers where possible - Regular backup and disaster recovery testing - Monitor external service status</p>"},{"location":"PROJECT_MILESTONES/#success-metrics","title":"Success Metrics","text":""},{"location":"PROJECT_MILESTONES/#technical-kpis","title":"Technical KPIs","text":""},{"location":"PROJECT_MILESTONES/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>API Response Time: &lt;200ms for 95% of requests</li> <li>Page Load Time: &lt;2 seconds for initial load</li> <li>Uptime: 99.9% availability</li> <li>AI Response Time: &lt;5 seconds for complex queries</li> </ul>"},{"location":"PROJECT_MILESTONES/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Code Coverage: &gt;80% for all services</li> <li>Bug Density: &lt;1 bug per 1000 lines of code</li> <li>Security Vulnerabilities: 0 high-severity issues</li> <li>Performance Regression: &lt;5% performance degradation</li> </ul>"},{"location":"PROJECT_MILESTONES/#business-kpis","title":"Business KPIs","text":""},{"location":"PROJECT_MILESTONES/#user-engagement","title":"User Engagement","text":"<ul> <li>Monthly Active Users (MAU): Target 10K by month 6</li> <li>Daily Active Users (DAU): Target 2K by month 6</li> <li>User Retention: 70% 30-day retention</li> <li>Feature Adoption: 60% of users use AI features</li> </ul>"},{"location":"PROJECT_MILESTONES/#platform-success","title":"Platform Success","text":"<ul> <li>Job Applications: 1000+ applications per month</li> <li>Application Success Rate: 15% interview rate</li> <li>User Satisfaction: 4.5+ star rating</li> <li>Auto-Apply Success: 95% successful submission rate</li> </ul>"},{"location":"PROJECT_MILESTONES/#revenue-metrics-future","title":"Revenue Metrics (Future)","text":"<ul> <li>Subscription Conversion: 10% freemium to premium</li> <li>Customer Lifetime Value: $200+ per premium user</li> <li>Churn Rate: &lt;5% monthly churn</li> <li>Revenue Growth: 20% month-over-month</li> </ul>"},{"location":"PROJECT_MILESTONES/#operational-kpis","title":"Operational KPIs","text":""},{"location":"PROJECT_MILESTONES/#development-velocity","title":"Development Velocity","text":"<ul> <li>Sprint Velocity: Consistent 80+ story points per sprint</li> <li>Code Deployment: Daily deployments to staging</li> <li>Bug Fix Time: &lt;24 hours for critical bugs</li> <li>Feature Delivery: 95% of features delivered on time</li> </ul>"},{"location":"PROJECT_MILESTONES/#support-maintenance","title":"Support &amp; Maintenance","text":"<ul> <li>Support Response Time: &lt;2 hours for critical issues</li> <li>Documentation Coverage: 100% API documentation</li> <li>User Onboarding: 90% successful onboarding completion</li> <li>System Monitoring: 100% service coverage</li> </ul> <p>This comprehensive milestone and strategy document provides a clear roadmap for building the AI-Powered Job Seeker Platform with measurable goals, risk mitigation, and success criteria for each phase of development.</p>"},{"location":"TECH_STACK/","title":"Technology Stack &amp; Technical Specifications","text":""},{"location":"TECH_STACK/#overview","title":"Overview","text":"<p>This document provides a comprehensive breakdown of the technology stack, technical specifications, and architectural decisions for the AI-Powered Job Seeker Platform. Each technology choice is justified with reasoning and alternatives considered.</p>"},{"location":"TECH_STACK/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Frontend Technology Stack</li> <li>Backend Technology Stack</li> <li>Database &amp; Storage</li> <li>AI &amp; Machine Learning</li> <li>Workflow Automation</li> <li>Cloud Infrastructure</li> <li>Development &amp; DevOps</li> <li>Security &amp; Compliance</li> <li>Monitoring &amp; Analytics</li> <li>Third-Party Integrations</li> </ol>"},{"location":"TECH_STACK/#frontend-technology-stack","title":"Frontend Technology Stack","text":""},{"location":"TECH_STACK/#core-framework-react-with-nextjs-14","title":"Core Framework: React with Next.js 14","text":""},{"location":"TECH_STACK/#react-182","title":"React 18.2+","text":"<p>Choice Reasoning: - Component-Based Architecture: Reusable UI components for consistency - Virtual DOM: Optimal performance for complex interfaces - Rich Ecosystem: Extensive library ecosystem and community support - Developer Experience: Excellent debugging tools and development workflow</p> <p>Configuration: <pre><code>// React Features Used\n- React Hooks for state management\n- Context API for global state\n- Suspense for lazy loading\n- Error Boundaries for error handling\n- React.memo for performance optimization\n</code></pre></p>"},{"location":"TECH_STACK/#nextjs-14-app-router","title":"Next.js 14 (App Router)","text":"<p>Choice Reasoning: - Full-Stack Framework: API routes and serverless functions - Performance: Automatic code splitting and optimization - SEO: Server-side rendering and static generation - Developer Experience: Hot reloading and TypeScript support</p> <p>Key Features: <pre><code>// Next.js Configuration\n- App Router for modern routing\n- Server Components for performance\n- API Routes for backend logic\n- Image Optimization\n- Automatic bundle optimization\n- Built-in CSS support\n</code></pre></p>"},{"location":"TECH_STACK/#state-management-redux-toolkit-zustand","title":"State Management: Redux Toolkit + Zustand","text":""},{"location":"TECH_STACK/#redux-toolkit","title":"Redux Toolkit","text":"<p>Use Cases: - Global application state - Complex state interactions - Time-travel debugging - Middleware for async operations</p> <pre><code>// Redux Store Structure\nstore/\n\u251c\u2500\u2500 slices/\n\u2502   \u251c\u2500\u2500 authSlice.js\n\u2502   \u251c\u2500\u2500 userSlice.js\n\u2502   \u251c\u2500\u2500 jobsSlice.js\n\u2502   \u251c\u2500\u2500 cvSlice.js\n\u2502   \u2514\u2500\u2500 aiSlice.js\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 authMiddleware.js\n\u2502   \u2514\u2500\u2500 loggingMiddleware.js\n\u2514\u2500\u2500 store.js\n</code></pre>"},{"location":"TECH_STACK/#zustand","title":"Zustand","text":"<p>Use Cases: - Component-level state - UI state management - Simple state without complexity - Performance-critical components</p>"},{"location":"TECH_STACK/#styling-ui-tailwind-css-headless-ui","title":"Styling &amp; UI: Tailwind CSS + Headless UI","text":""},{"location":"TECH_STACK/#tailwind-css-34","title":"Tailwind CSS 3.4+","text":"<p>Choice Reasoning: - Utility-First: Rapid UI development - Consistency: Design system enforcement - Performance: Purging unused CSS - Customization: Easy theme customization</p> <p>Configuration: <pre><code>// tailwind.config.js\nmodule.exports = {\n  content: ['./src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          500: '#3b82f6',\n          900: '#1e3a8a',\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}\n</code></pre></p>"},{"location":"TECH_STACK/#headless-ui","title":"Headless UI","text":"<p>Features: - Accessible components out of the box - Unstyled components for customization - Keyboard navigation support - Screen reader compatibility</p>"},{"location":"TECH_STACK/#additional-frontend-libraries","title":"Additional Frontend Libraries","text":""},{"location":"TECH_STACK/#form-management-react-hook-form-zod","title":"Form Management: React Hook Form + Zod","text":"<pre><code>// Form validation with Zod\nconst userSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  name: z.string().min(2),\n});\n\n// React Hook Form integration\nconst { register, handleSubmit, formState: { errors } } = useForm({\n  resolver: zodResolver(userSchema),\n});\n</code></pre>"},{"location":"TECH_STACK/#data-fetching-tanstack-query-react-query","title":"Data Fetching: TanStack Query (React Query)","text":"<pre><code>// API state management\nconst { data, isLoading, error } = useQuery({\n  queryKey: ['jobs', filters],\n  queryFn: () =&gt; fetchJobs(filters),\n  staleTime: 5 * 60 * 1000, // 5 minutes\n});\n</code></pre>"},{"location":"TECH_STACK/#animation-framer-motion","title":"Animation: Framer Motion","text":"<pre><code>// Smooth animations and transitions\nconst variants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: { opacity: 1, y: 0 },\n};\n</code></pre>"},{"location":"TECH_STACK/#charts-visualization-recharts-d3js","title":"Charts &amp; Visualization: Recharts + D3.js","text":"<ul> <li>Recharts: Simple charts and graphs</li> <li>D3.js: Complex data visualizations</li> <li>React Spring: Advanced animations</li> </ul>"},{"location":"TECH_STACK/#backend-technology-stack","title":"Backend Technology Stack","text":""},{"location":"TECH_STACK/#primary-backend-nodejs-with-expressjs","title":"Primary Backend: Node.js with Express.js","text":""},{"location":"TECH_STACK/#nodejs-20-lts","title":"Node.js 20 LTS","text":"<p>Choice Reasoning: - JavaScript Ecosystem: Shared language with frontend - Performance: V8 engine optimization - Scalability: Event-driven, non-blocking I/O - Package Ecosystem: Extensive NPM ecosystem</p>"},{"location":"TECH_STACK/#expressjs-418","title":"Express.js 4.18+","text":"<p>Features: - Middleware Architecture: Flexible request processing - Routing: Clean API route organization - Performance: Fast and minimalist framework - Community: Large ecosystem and community support</p> <pre><code>// Express.js API Structure\napi/\n\u251c\u2500\u2500 routes/\n\u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u251c\u2500\u2500 users.js\n\u2502   \u251c\u2500\u2500 jobs.js\n\u2502   \u251c\u2500\u2500 cv.js\n\u2502   \u2514\u2500\u2500 applications.js\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u251c\u2500\u2500 validation.js\n\u2502   \u251c\u2500\u2500 rateLimit.js\n\u2502   \u2514\u2500\u2500 errorHandler.js\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 authController.js\n\u2502   \u251c\u2500\u2500 userController.js\n\u2502   \u2514\u2500\u2500 jobController.js\n\u2514\u2500\u2500 services/\n    \u251c\u2500\u2500 authService.js\n    \u251c\u2500\u2500 emailService.js\n    \u2514\u2500\u2500 aiService.js\n</code></pre>"},{"location":"TECH_STACK/#aiml-backend-python-with-fastapi","title":"AI/ML Backend: Python with FastAPI","text":""},{"location":"TECH_STACK/#python-311","title":"Python 3.11+","text":"<p>Choice Reasoning: - AI/ML Libraries: TensorFlow, PyTorch, scikit-learn - Natural Language Processing: NLTK, spaCy, transformers - Data Processing: Pandas, NumPy for data manipulation - Integration: Easy integration with AI APIs</p>"},{"location":"TECH_STACK/#fastapi-0104","title":"FastAPI 0.104+","text":"<p>Features: - Performance: High performance, on par with Node.js - Type Hints: Automatic API documentation - Async Support: Native async/await support - Validation: Automatic request/response validation</p> <pre><code># FastAPI AI Service Structure\nai_service/\n\u251c\u2500\u2500 routers/\n\u2502   \u251c\u2500\u2500 cv_analysis.py\n\u2502   \u251c\u2500\u2500 job_matching.py\n\u2502   \u251c\u2500\u2500 chat.py\n\u2502   \u2514\u2500\u2500 recommendations.py\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 cv_model.py\n\u2502   \u251c\u2500\u2500 job_model.py\n\u2502   \u2514\u2500\u2500 chat_model.py\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 openai_service.py\n\u2502   \u251c\u2500\u2500 claude_service.py\n\u2502   \u2514\u2500\u2500 nlp_service.py\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 text_processing.py\n    \u251c\u2500\u2500 embeddings.py\n    \u2514\u2500\u2500 similarity.py\n</code></pre>"},{"location":"TECH_STACK/#api-gateway-microservices","title":"API Gateway &amp; Microservices","text":""},{"location":"TECH_STACK/#api-gateway-expressjs","title":"API Gateway (Express.js)","text":"<pre><code>// API Gateway Configuration\nconst gateway = {\n  routes: {\n    '/api/auth/*': 'http://auth-service:3001',\n    '/api/users/*': 'http://user-service:3002',\n    '/api/jobs/*': 'http://job-service:3003',\n    '/api/ai/*': 'http://ai-service:8000',\n    '/api/workflows/*': 'http://n8n-service:5678',\n  },\n  middleware: [\n    rateLimit,\n    cors,\n    authentication,\n    logging,\n  ],\n};\n</code></pre>"},{"location":"TECH_STACK/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>Microservices\n\u251c\u2500\u2500 api-gateway (Node.js/Express)\n\u251c\u2500\u2500 auth-service (Node.js/Express)\n\u251c\u2500\u2500 user-service (Node.js/Express)\n\u251c\u2500\u2500 job-service (Node.js/Express)\n\u251c\u2500\u2500 cv-service (Node.js/Express)\n\u251c\u2500\u2500 ai-service (Python/FastAPI)\n\u251c\u2500\u2500 notification-service (Node.js/Express)\n\u2514\u2500\u2500 analytics-service (Python/FastAPI)\n</code></pre>"},{"location":"TECH_STACK/#database-storage","title":"Database &amp; Storage","text":""},{"location":"TECH_STACK/#primary-database-mongodb-70","title":"Primary Database: MongoDB 7.0","text":""},{"location":"TECH_STACK/#mongodb-atlas","title":"MongoDB Atlas","text":"<p>Choice Reasoning: - Flexible Schema: Easy to evolve data models - JSON Documents: Natural fit for JavaScript/Node.js - Scalability: Horizontal scaling with sharding - Performance: Optimized for read-heavy workloads</p> <p>Collections Structure: <pre><code>// MongoDB Collections\n{\n  users: {\n    _id: ObjectId,\n    email: String,\n    profile: {\n      name: String,\n      role: \"seeker\" | \"recruiter\",\n      preferences: Object,\n    },\n    created_at: Date,\n    updated_at: Date,\n  },\n  jobs: {\n    _id: ObjectId,\n    title: String,\n    company: String,\n    description: String,\n    requirements: [String],\n    location: {\n      type: \"Point\",\n      coordinates: [Number, Number],\n    },\n    posted_by: ObjectId,\n    posted_at: Date,\n  },\n  cvs: {\n    _id: ObjectId,\n    user_id: ObjectId,\n    title: String,\n    sections: {\n      personal: Object,\n      experience: [Object],\n      education: [Object],\n      skills: [String],\n    },\n    template_id: String,\n    version: Number,\n    created_at: Date,\n  },\n}\n</code></pre></p>"},{"location":"TECH_STACK/#analytics-database-postgresql-15","title":"Analytics Database: PostgreSQL 15","text":""},{"location":"TECH_STACK/#postgresql-for-analytics","title":"PostgreSQL for Analytics","text":"<p>Choice Reasoning: - ACID Compliance: Data integrity for analytics - Complex Queries: Advanced SQL for reporting - JSON Support: Hybrid document-relational capabilities - Time-Series: Efficient for time-based analytics</p> <p>Schema Structure: <pre><code>-- Analytics Tables\nCREATE TABLE user_events (\n    id SERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    event_type VARCHAR(50) NOT NULL,\n    event_data JSONB,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE job_applications (\n    id SERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    job_id UUID NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    applied_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE ai_interactions (\n    id SERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    query TEXT NOT NULL,\n    response TEXT NOT NULL,\n    tokens_used INTEGER,\n    response_time_ms INTEGER,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n</code></pre></p>"},{"location":"TECH_STACK/#caching-redis-72","title":"Caching: Redis 7.2","text":""},{"location":"TECH_STACK/#redis-configuration","title":"Redis Configuration","text":"<p>Use Cases: - Session Storage: User sessions and JWT tokens - API Caching: Frequently accessed data - Job Queue: Background task processing - Real-time Data: Chat messages and notifications</p> <pre><code>// Redis Usage Patterns\nconst redisConfig = {\n  sessions: {\n    keyPattern: 'session:${userId}',\n    ttl: 24 * 60 * 60, // 24 hours\n  },\n  apiCache: {\n    keyPattern: 'api:${endpoint}:${params}',\n    ttl: 5 * 60, // 5 minutes\n  },\n  jobQueue: {\n    keyPattern: 'job:${type}:${id}',\n    ttl: null, // persistent\n  },\n};\n</code></pre>"},{"location":"TECH_STACK/#file-storage-aws-s3-cloudfront","title":"File Storage: AWS S3 + CloudFront","text":""},{"location":"TECH_STACK/#aws-s3-buckets","title":"AWS S3 Buckets","text":"<pre><code>// S3 Bucket Structure\nbuckets: {\n  'hr-platform-cvs': {\n    purpose: 'CV documents and PDFs',\n    versioning: true,\n    encryption: 'AES256',\n  },\n  'hr-platform-assets': {\n    purpose: 'Profile pictures and company logos',\n    cdn: 'CloudFront',\n    optimization: 'automatic',\n  },\n  'hr-platform-backups': {\n    purpose: 'Database backups',\n    retention: '90 days',\n    storage_class: 'GLACIER',\n  },\n}\n</code></pre>"},{"location":"TECH_STACK/#ai-machine-learning","title":"AI &amp; Machine Learning","text":""},{"location":"TECH_STACK/#large-language-models","title":"Large Language Models","text":""},{"location":"TECH_STACK/#openai-gpt-4-turbo","title":"OpenAI GPT-4 Turbo","text":"<p>Use Cases: - Conversational AI: Chat interface and user assistance - CV Optimization: Content improvement and suggestions - Job Description Analysis: Requirement extraction and parsing - Interview Preparation: Question generation and feedback</p> <pre><code># OpenAI Integration\nimport openai\n\nclass OpenAIService:\n    def __init__(self):\n        self.client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))\n\n    async def analyze_cv(self, cv_text: str) -&gt; dict:\n        response = await self.client.chat.completions.create(\n            model=\"gpt-4-turbo-preview\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a CV analysis expert...\"},\n                {\"role\": \"user\", \"content\": cv_text}\n            ],\n            temperature=0.3,\n            max_tokens=1500\n        )\n        return self.parse_cv_analysis(response.choices[0].message.content)\n</code></pre>"},{"location":"TECH_STACK/#anthropic-claude-3","title":"Anthropic Claude 3","text":"<p>Use Cases: - Document Analysis: Long document processing and analysis - Code Review: Technical skill assessment and code analysis - Complex Reasoning: Multi-step problem solving and recommendations - Safety-Critical Tasks: Content moderation and sensitive data handling</p> <pre><code># Claude Integration\nimport anthropic\n\nclass ClaudeService:\n    def __init__(self):\n        self.client = anthropic.Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))\n\n    async def match_jobs(self, cv_data: dict, job_data: dict) -&gt; dict:\n        prompt = f\"Analyze job match between CV and job posting...\"\n        response = await self.client.messages.create(\n            model=\"claude-3-opus-20240229\",\n            max_tokens=2000,\n            messages=[{\"role\": \"user\", \"content\": prompt}]\n        )\n        return self.parse_match_analysis(response.content)\n</code></pre>"},{"location":"TECH_STACK/#machine-learning-stack","title":"Machine Learning Stack","text":""},{"location":"TECH_STACK/#embeddings-vector-search","title":"Embeddings &amp; Vector Search","text":"<pre><code># Vector Database for Semantic Search\nfrom sentence_transformers import SentenceTransformer\nimport chromadb\n\nclass EmbeddingService:\n    def __init__(self):\n        self.model = SentenceTransformer('all-MiniLM-L6-v2')\n        self.client = chromadb.Client()\n        self.collection = self.client.create_collection(\"job_embeddings\")\n\n    def create_job_embedding(self, job_description: str) -&gt; list:\n        return self.model.encode(job_description).tolist()\n\n    def find_similar_jobs(self, cv_embedding: list, top_k: int = 10) -&gt; list:\n        results = self.collection.query(\n            query_embeddings=[cv_embedding],\n            n_results=top_k\n        )\n        return results\n</code></pre>"},{"location":"TECH_STACK/#skill-extraction-nlp","title":"Skill Extraction &amp; NLP","text":"<pre><code># Natural Language Processing Pipeline\nimport spacy\nfrom transformers import pipeline\n\nclass NLPService:\n    def __init__(self):\n        self.nlp = spacy.load(\"en_core_web_sm\")\n        self.skill_extractor = pipeline(\n            \"ner\",\n            model=\"dbmdz/bert-large-cased-finetuned-conll03-english\"\n        )\n\n    def extract_skills(self, text: str) -&gt; list:\n        doc = self.nlp(text)\n        entities = self.skill_extractor(text)\n\n        skills = []\n        for ent in entities:\n            if ent['entity'].startswith('B-') or ent['entity'].startswith('I-'):\n                skills.append(ent['word'])\n\n        return list(set(skills))\n</code></pre>"},{"location":"TECH_STACK/#ai-model-management","title":"AI Model Management","text":""},{"location":"TECH_STACK/#model-versioning-deployment","title":"Model Versioning &amp; Deployment","text":"<pre><code># MLOps Pipeline\nfrom mlflow import log_model, register_model\nimport joblib\n\nclass ModelManager:\n    def __init__(self):\n        self.models = {}\n        self.model_versions = {}\n\n    def deploy_model(self, model_name: str, model_path: str):\n        model = joblib.load(model_path)\n        self.models[model_name] = model\n\n        # Log to MLflow\n        log_model(model, model_name)\n        register_model(f\"runs:/{run_id}/{model_name}\", model_name)\n\n    def predict(self, model_name: str, features: dict) -&gt; dict:\n        model = self.models.get(model_name)\n        if not model:\n            raise ValueError(f\"Model {model_name} not found\")\n\n        prediction = model.predict([features])\n        confidence = model.predict_proba([features]).max()\n\n        return {\n            'prediction': prediction[0],\n            'confidence': confidence,\n            'model_version': self.model_versions[model_name]\n        }\n</code></pre>"},{"location":"TECH_STACK/#workflow-automation","title":"Workflow Automation","text":""},{"location":"TECH_STACK/#n8n-workflow-engine","title":"n8n Workflow Engine","text":""},{"location":"TECH_STACK/#n8n-setup-configuration","title":"n8n Setup &amp; Configuration","text":"<pre><code>// n8n Docker Configuration\nversion: '3.8'\nservices:\n  n8n:\n    image: n8nio/n8n:latest\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}\n      - WEBHOOK_URL=https://hooks.yourdomain.com/\n      - GENERIC_TIMEZONE=UTC\n    volumes:\n      - n8n_data:/home/node/.n8n\n      - ./n8n/workflows:/home/node/.n8n/workflows\n    ports:\n      - \"5678:5678\"\n</code></pre>"},{"location":"TECH_STACK/#custom-n8n-nodes","title":"Custom n8n Nodes","text":"<pre><code>// Custom Job Scraping Node\nclass JobScrapingNode implements INodeType {\n    description: INodeTypeDescription = {\n        displayName: 'Job Scraper',\n        name: 'jobScraper',\n        group: ['transform'],\n        version: 1,\n        description: 'Scrape job listings from various job boards',\n        defaults: {\n            name: 'Job Scraper',\n        },\n        inputs: ['main'],\n        outputs: ['main'],\n        properties: [\n            {\n                displayName: 'Job Board',\n                name: 'jobBoard',\n                type: 'options',\n                options: [\n                    { name: 'LinkedIn', value: 'linkedin' },\n                    { name: 'Indeed', value: 'indeed' },\n                    { name: 'Glassdoor', value: 'glassdoor' },\n                ],\n                default: 'linkedin',\n            },\n        ],\n    };\n\n    async execute(this: IExecuteFunctions): Promise&lt;INodeExecutionData[][]&gt; {\n        const items = this.getInputData();\n        const jobBoard = this.getNodeParameter('jobBoard', 0) as string;\n\n        const results = await this.scrapeJobs(jobBoard, items[0].json);\n\n        return [this.helpers.returnJsonArray(results)];\n    }\n}\n</code></pre>"},{"location":"TECH_STACK/#workflow-templates","title":"Workflow Templates","text":"<pre><code># Job Scraping Workflow\nworkflows:\n  job_scraping:\n    trigger: schedule(0 */6 * * *) # Every 6 hours\n    steps:\n      - name: linkedin_scraper\n        node: jobScraper\n        config:\n          jobBoard: linkedin\n          searchTerms: ${env.SEARCH_TERMS}\n\n      - name: process_jobs\n        node: dataProcessor\n        config:\n          deduplicate: true\n          normalize: true\n\n      - name: save_to_database\n        node: mongodb\n        config:\n          operation: insert\n          collection: jobs\n\n  auto_apply:\n    trigger: webhook\n    steps:\n      - name: validate_application\n        node: validator\n        config:\n          rules: ${env.APPLICATION_RULES}\n\n      - name: submit_application\n        node: jobBoardAPI\n        config:\n          platform: ${input.platform}\n          credentials: ${env.CREDENTIALS}\n\n      - name: track_application\n        node: mongodb\n        config:\n          operation: update\n          collection: applications\n</code></pre>"},{"location":"TECH_STACK/#cloud-infrastructure","title":"Cloud Infrastructure","text":""},{"location":"TECH_STACK/#multi-cloud-strategy","title":"Multi-Cloud Strategy","text":""},{"location":"TECH_STACK/#aws-primary-cloud","title":"AWS Primary Cloud","text":"<pre><code># AWS Infrastructure\nRegion: us-east-1 (primary), us-west-2 (secondary)\n\nCompute:\n  EKS Cluster:\n    - Node Groups: t3.medium (3-10 nodes)\n    - Auto Scaling: CPU/Memory based\n    - Network: VPC with private/public subnets\n\n  Lambda Functions:\n    - Image processing\n    - Webhook handlers\n    - Scheduled tasks\n\nStorage:\n  S3 Buckets:\n    - Application assets\n    - CV documents\n    - Database backups\n\n  EFS:\n    - Shared storage for containers\n    - Workflow templates\n\nDatabase:\n  RDS PostgreSQL:\n    - Multi-AZ deployment\n    - Read replicas for analytics\n    - Automated backups\n\n  ElastiCache Redis:\n    - Cluster mode for scaling\n    - Automatic failover\n\nNetworking:\n  CloudFront CDN:\n    - Global content delivery\n    - API caching\n\n  Application Load Balancer:\n    - SSL termination\n    - Health checks\n    - Traffic distribution\n</code></pre>"},{"location":"TECH_STACK/#gcp-secondary-cloud","title":"GCP Secondary Cloud","text":"<pre><code># GCP Infrastructure (Disaster Recovery)\nRegion: us-central1\n\nCompute:\n  GKE Cluster:\n    - Node Pools: e2-standard-2\n    - Workload Identity enabled\n\n  Cloud Functions:\n    - Event-driven processing\n    - Backup operations\n\nStorage:\n  Cloud Storage:\n    - Multi-regional buckets\n    - Lifecycle policies\n\n  Cloud SQL:\n    - PostgreSQL with HA\n    - Automated backups\n\nAI/ML:\n  Vertex AI:\n    - Model deployment\n    - Batch predictions\n\n  Cloud Natural Language:\n    - Text analysis\n    - Entity extraction\n</code></pre>"},{"location":"TECH_STACK/#kubernetes-configuration","title":"Kubernetes Configuration","text":""},{"location":"TECH_STACK/#kubernetes-manifests","title":"Kubernetes Manifests","text":"<pre><code># API Gateway Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-gateway\n  namespace: hr-platform\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: api-gateway\n  template:\n    metadata:\n      labels:\n        app: api-gateway\n    spec:\n      containers:\n      - name: api-gateway\n        image: hr-platform/api-gateway:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: MONGODB_URI\n          valueFrom:\n            secretKeyRef:\n              name: database-secrets\n              key: mongodb-uri\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 10\n          periodSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-gateway-service\n  namespace: hr-platform\nspec:\n  selector:\n    app: api-gateway\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: ClusterIP\n</code></pre>"},{"location":"TECH_STACK/#helm-charts","title":"Helm Charts","text":"<pre><code># values.yaml for Helm deployment\nglobal:\n  imageRegistry: your-registry.com\n  imagePullSecrets:\n    - hr-platform-registry\n\nservices:\n  apiGateway:\n    enabled: true\n    replicas: 3\n    image:\n      repository: hr-platform/api-gateway\n      tag: \"latest\"\n    resources:\n      requests:\n        memory: 256Mi\n        cpu: 250m\n      limits:\n        memory: 512Mi\n        cpu: 500m\n\n  userService:\n    enabled: true\n    replicas: 2\n    image:\n      repository: hr-platform/user-service\n      tag: \"latest\"\n\n  aiService:\n    enabled: true\n    replicas: 2\n    image:\n      repository: hr-platform/ai-service\n      tag: \"latest\"\n    resources:\n      requests:\n        memory: 1Gi\n        cpu: 500m\n      limits:\n        memory: 2Gi\n        cpu: 1000m\n\ndatabases:\n  mongodb:\n    enabled: true\n    auth:\n      enabled: true\n      existingSecret: mongodb-auth\n    persistence:\n      enabled: true\n      size: 100Gi\n\n  postgresql:\n    enabled: true\n    auth:\n      existingSecret: postgresql-auth\n    primary:\n      persistence:\n        enabled: true\n        size: 50Gi\n\n  redis:\n    enabled: true\n    auth:\n      enabled: true\n      existingSecret: redis-auth\n    master:\n      persistence:\n        enabled: true\n        size: 10Gi\n</code></pre>"},{"location":"TECH_STACK/#development-devops","title":"Development &amp; DevOps","text":""},{"location":"TECH_STACK/#development-environment","title":"Development Environment","text":""},{"location":"TECH_STACK/#docker-development-setup","title":"Docker Development Setup","text":"<pre><code># Frontend Dockerfile\nFROM node:20-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\nRUN npm run build\n\nFROM node:20-alpine AS runner\nWORKDIR /app\nCOPY --from=builder /app/next.config.js ./\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/.next/standalone ./\nCOPY --from=builder /app/.next/static ./.next/static\n\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n</code></pre> <pre><code># Backend API Dockerfile\nFROM node:20-alpine\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\n\nUSER node\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n</code></pre> <pre><code># AI Service Dockerfile\nFROM python:3.11-slim\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"TECH_STACK/#docker-compose-for-development","title":"Docker Compose for Development","text":"<pre><code>version: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./frontend:/app\n      - /app/node_modules\n    environment:\n      - NEXT_PUBLIC_API_URL=http://api-gateway:3001\n    depends_on:\n      - api-gateway\n\n  api-gateway:\n    build:\n      context: ./backend/api-gateway\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"3001:3001\"\n    volumes:\n      - ./backend/api-gateway:/app\n      - /app/node_modules\n    environment:\n      - NODE_ENV=development\n      - MONGODB_URI=mongodb://mongodb:27017/hr_platform\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - mongodb\n      - redis\n\n  user-service:\n    build:\n      context: ./backend/user-service\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"3002:3002\"\n    volumes:\n      - ./backend/user-service:/app\n      - /app/node_modules\n    environment:\n      - NODE_ENV=development\n      - MONGODB_URI=mongodb://mongodb:27017/hr_platform\n\n  ai-service:\n    build:\n      context: ./backend/ai-service\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./backend/ai-service:/app\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n\n  mongodb:\n    image: mongo:7\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=password123\n\n  postgresql:\n    image: postgres:15\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgresql_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=hr_analytics\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password123\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n\n  n8n:\n    image: n8nio/n8n:latest\n    ports:\n      - \"5678:5678\"\n    volumes:\n      - n8n_data:/home/node/.n8n\n      - ./workflows:/home/node/.n8n/workflows\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=password123\n      - WEBHOOK_URL=http://localhost:5678/\n\nvolumes:\n  mongodb_data:\n  postgresql_data:\n  redis_data:\n  n8n_data:\n</code></pre>"},{"location":"TECH_STACK/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"TECH_STACK/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/ci-cd.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        service: [frontend, api-gateway, user-service, ai-service]\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup Node.js\n      if: matrix.service != 'ai-service'\n      uses: actions/setup-node@v4\n      with:\n        node-version: '20'\n        cache: 'npm'\n        cache-dependency-path: ${{ matrix.service }}/package-lock.json\n\n    - name: Setup Python\n      if: matrix.service == 'ai-service'\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n        cache: 'pip'\n\n    - name: Install dependencies (Node.js)\n      if: matrix.service != 'ai-service'\n      run: |\n        cd ${{ matrix.service }}\n        npm ci\n\n    - name: Install dependencies (Python)\n      if: matrix.service == 'ai-service'\n      run: |\n        cd ${{ matrix.service }}\n        pip install -r requirements.txt\n\n    - name: Run tests (Node.js)\n      if: matrix.service != 'ai-service'\n      run: |\n        cd ${{ matrix.service }}\n        npm test\n\n    - name: Run tests (Python)\n      if: matrix.service == 'ai-service'\n      run: |\n        cd ${{ matrix.service }}\n        pytest\n\n    - name: Run linting\n      run: |\n        cd ${{ matrix.service }}\n        if [ \"${{ matrix.service }}\" = \"ai-service\" ]; then\n          black --check .\n          flake8 .\n        else\n          npm run lint\n        fi\n\n    - name: Security scan\n      uses: securecodewarrior/github-action-add-sarif@v1\n      with:\n        sarif-file: security-scan.sarif\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Build and push Docker images\n      run: |\n        services=(\"frontend\" \"api-gateway\" \"user-service\" \"ai-service\")\n        for service in \"${services[@]}\"; do\n          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.sha }} ./${service}\n          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.sha }}\n          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:latest\n          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:latest\n        done\n\n  deploy-staging:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: staging\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG }}\n\n    - name: Deploy to staging\n      run: |\n        helm upgrade --install hr-platform-staging ./helm/hr-platform \\\n          --namespace staging \\\n          --create-namespace \\\n          --set global.imageTag=${{ github.sha }} \\\n          --set global.environment=staging \\\n          --values ./helm/hr-platform/values-staging.yaml\n\n  deploy-production:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: production\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}\n\n    - name: Deploy to production\n      run: |\n        helm upgrade --install hr-platform ./helm/hr-platform \\\n          --namespace production \\\n          --create-namespace \\\n          --set global.imageTag=${{ github.sha }} \\\n          --set global.environment=production \\\n          --values ./helm/hr-platform/values-production.yaml \\\n          --wait \\\n          --timeout=10m\n</code></pre>"},{"location":"TECH_STACK/#code-quality-testing","title":"Code Quality &amp; Testing","text":""},{"location":"TECH_STACK/#eslint-configuration","title":"ESLint Configuration","text":"<pre><code>// .eslintrc.js\nmodule.exports = {\n  extends: [\n    'next/core-web-vitals',\n    '@typescript-eslint/recommended',\n    'prettier',\n  ],\n  plugins: ['@typescript-eslint'],\n  rules: {\n    '@typescript-eslint/no-unused-vars': 'error',\n    '@typescript-eslint/explicit-function-return-type': 'warn',\n    'no-console': 'warn',\n    'prefer-const': 'error',\n  },\n  overrides: [\n    {\n      files: ['**/*.test.ts', '**/*.test.tsx'],\n      env: {\n        jest: true,\n      },\n    },\n  ],\n};\n</code></pre>"},{"location":"TECH_STACK/#jest-testing-configuration","title":"Jest Testing Configuration","text":"<pre><code>// jest.config.js\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/jest.setup.js'],\n  moduleNameMapping: {\n    '^@/(.*)$': '&lt;rootDir&gt;/src/$1',\n  },\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/pages/_app.tsx',\n    '!src/pages/_document.tsx',\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n};\n</code></pre>"},{"location":"TECH_STACK/#security-compliance","title":"Security &amp; Compliance","text":""},{"location":"TECH_STACK/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"TECH_STACK/#jwt-token-management","title":"JWT Token Management","text":"<pre><code>// JWT Service\nimport jwt from 'jsonwebtoken';\nimport { promisify } from 'util';\n\nclass JWTService {\n  constructor() {\n    this.secret = process.env.JWT_SECRET;\n    this.refreshSecret = process.env.JWT_REFRESH_SECRET;\n    this.accessTokenExpiry = '15m';\n    this.refreshTokenExpiry = '7d';\n  }\n\n  generateTokens(payload) {\n    const accessToken = jwt.sign(payload, this.secret, {\n      expiresIn: this.accessTokenExpiry,\n    });\n\n    const refreshToken = jwt.sign(payload, this.refreshSecret, {\n      expiresIn: this.refreshTokenExpiry,\n    });\n\n    return { accessToken, refreshToken };\n  }\n\n  async verifyAccessToken(token) {\n    try {\n      const verify = promisify(jwt.verify);\n      return await verify(token, this.secret);\n    } catch (error) {\n      throw new Error('Invalid access token');\n    }\n  }\n\n  async verifyRefreshToken(token) {\n    try {\n      const verify = promisify(jwt.verify);\n      return await verify(token, this.refreshSecret);\n    } catch (error) {\n      throw new Error('Invalid refresh token');\n    }\n  }\n}\n</code></pre>"},{"location":"TECH_STACK/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<pre><code>// RBAC Middleware\nconst permissions = {\n  seeker: [\n    'profile:read',\n    'profile:write',\n    'cv:read',\n    'cv:write',\n    'jobs:read',\n    'applications:read',\n    'applications:write',\n  ],\n  recruiter: [\n    'profile:read',\n    'profile:write',\n    'jobs:read',\n    'jobs:write',\n    'applications:read',\n    'candidates:read',\n  ],\n  admin: [\n    '*', // All permissions\n  ],\n};\n\nfunction hasPermission(userRole, requiredPermission) {\n  const userPermissions = permissions[userRole] || [];\n  return userPermissions.includes('*') || userPermissions.includes(requiredPermission);\n}\n\nfunction requirePermission(permission) {\n  return (req, res, next) =&gt; {\n    const { role } = req.user;\n\n    if (!hasPermission(role, permission)) {\n      return res.status(403).json({\n        error: 'Insufficient permissions',\n        required: permission,\n      });\n    }\n\n    next();\n  };\n}\n</code></pre>"},{"location":"TECH_STACK/#data-protection-privacy","title":"Data Protection &amp; Privacy","text":""},{"location":"TECH_STACK/#gdpr-compliance","title":"GDPR Compliance","text":"<pre><code>// Data Protection Service\nclass DataProtectionService {\n  async anonymizeUser(userId) {\n    // Anonymize personal data while keeping analytics\n    const anonymizedData = {\n      email: `anonymized_${userId}@example.com`,\n      name: 'Anonymized User',\n      phone: null,\n      address: null,\n    };\n\n    await User.findByIdAndUpdate(userId, anonymizedData);\n    await this.updateRelatedData(userId, anonymizedData);\n  }\n\n  async deleteUserData(userId) {\n    // Complete data deletion\n    await Promise.all([\n      User.findByIdAndDelete(userId),\n      CV.deleteMany({ userId }),\n      Application.deleteMany({ userId }),\n      UserEvent.deleteMany({ userId }),\n      this.deleteStoredFiles(userId),\n    ]);\n  }\n\n  async exportUserData(userId) {\n    // Export all user data for GDPR compliance\n    const userData = await User.findById(userId);\n    const cvs = await CV.find({ userId });\n    const applications = await Application.find({ userId });\n    const events = await UserEvent.find({ userId });\n\n    return {\n      profile: userData,\n      cvs,\n      applications,\n      events,\n      exportDate: new Date().toISOString(),\n    };\n  }\n}\n</code></pre>"},{"location":"TECH_STACK/#encryption-data-security","title":"Encryption &amp; Data Security","text":"<pre><code>// Encryption Service\nimport crypto from 'crypto';\n\nclass EncryptionService {\n  constructor() {\n    this.algorithm = 'aes-256-gcm';\n    this.secretKey = process.env.ENCRYPTION_KEY;\n  }\n\n  encrypt(text) {\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipher(this.algorithm, this.secretKey);\n    cipher.setAAD(Buffer.from('hr-platform', 'utf8'));\n\n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n\n    const authTag = cipher.getAuthTag();\n\n    return {\n      encrypted,\n      iv: iv.toString('hex'),\n      authTag: authTag.toString('hex'),\n    };\n  }\n\n  decrypt(encryptedData) {\n    const { encrypted, iv, authTag } = encryptedData;\n\n    const decipher = crypto.createDecipher(this.algorithm, this.secretKey);\n    decipher.setAAD(Buffer.from('hr-platform', 'utf8'));\n    decipher.setAuthTag(Buffer.from(authTag, 'hex'));\n\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  }\n}\n</code></pre>"},{"location":"TECH_STACK/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":""},{"location":"TECH_STACK/#application-monitoring","title":"Application Monitoring","text":""},{"location":"TECH_STACK/#prometheus-grafana-setup","title":"Prometheus &amp; Grafana Setup","text":"<pre><code># prometheus.yml\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'api-gateway'\n    static_configs:\n      - targets: ['api-gateway:3000']\n    metrics_path: '/metrics'\n    scrape_interval: 5s\n\n  - job_name: 'user-service'\n    static_configs:\n      - targets: ['user-service:3002']\n\n  - job_name: 'ai-service'\n    static_configs:\n      - targets: ['ai-service:8000']\n\n  - job_name: 'mongodb-exporter'\n    static_configs:\n      - targets: ['mongodb-exporter:9216']\n\n  - job_name: 'postgres-exporter'\n    static_configs:\n      - targets: ['postgres-exporter:9187']\n</code></pre>"},{"location":"TECH_STACK/#custom-metrics","title":"Custom Metrics","text":"<pre><code>// Metrics Service\nimport client from 'prom-client';\n\n// Custom metrics\nconst httpRequestDuration = new client.Histogram({\n  name: 'http_request_duration_seconds',\n  help: 'Duration of HTTP requests in seconds',\n  labelNames: ['method', 'route', 'status_code'],\n  buckets: [0.1, 0.5, 1, 2, 5],\n});\n\nconst activeUsers = new client.Gauge({\n  name: 'active_users_total',\n  help: 'Number of active users',\n  labelNames: ['user_type'],\n});\n\nconst jobApplications = new client.Counter({\n  name: 'job_applications_total',\n  help: 'Total number of job applications',\n  labelNames: ['application_type', 'status'],\n});\n\nconst aiRequestsTotal = new client.Counter({\n  name: 'ai_requests_total',\n  help: 'Total number of AI service requests',\n  labelNames: ['model', 'operation'],\n});\n\nconst aiRequestDuration = new client.Histogram({\n  name: 'ai_request_duration_seconds',\n  help: 'Duration of AI requests in seconds',\n  labelNames: ['model', 'operation'],\n  buckets: [0.5, 1, 2, 5, 10, 30],\n});\n\nclass MetricsService {\n  static recordHttpRequest(method, route, statusCode, duration) {\n    httpRequestDuration\n      .labels(method, route, statusCode)\n      .observe(duration);\n  }\n\n  static updateActiveUsers(userType, count) {\n    activeUsers.labels(userType).set(count);\n  }\n\n  static incrementJobApplications(type, status) {\n    jobApplications.labels(type, status).inc();\n  }\n\n  static recordAIRequest(model, operation, duration) {\n    aiRequestsTotal.labels(model, operation).inc();\n    aiRequestDuration.labels(model, operation).observe(duration);\n  }\n}\n</code></pre>"},{"location":"TECH_STACK/#logging-strategy","title":"Logging Strategy","text":"<pre><code>// Winston Logger Configuration\nimport winston from 'winston';\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: {\n    service: process.env.SERVICE_NAME || 'hr-platform',\n    environment: process.env.NODE_ENV || 'development',\n  },\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' }),\n  ],\n});\n\n// Console transport for development\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// ELK Stack transport for production\nif (process.env.NODE_ENV === 'production') {\n  logger.add(new winston.transports.Http({\n    host: process.env.LOGSTASH_HOST,\n    port: process.env.LOGSTASH_PORT,\n  }));\n}\n\nexport default logger;\n</code></pre>"},{"location":"TECH_STACK/#error-tracking-alerting","title":"Error Tracking &amp; Alerting","text":""},{"location":"TECH_STACK/#sentry-integration","title":"Sentry Integration","text":"<pre><code>// Sentry Configuration\nimport * as Sentry from '@sentry/node';\nimport * as Tracing from '@sentry/tracing';\n\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  environment: process.env.NODE_ENV,\n  integrations: [\n    new Sentry.Integrations.Http({ tracing: true }),\n    new Tracing.Integrations.Express({ app }),\n    new Tracing.Integrations.Mongo(),\n  ],\n  tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.1 : 1.0,\n  beforeSend(event) {\n    // Filter out sensitive data\n    if (event.request) {\n      delete event.request.headers?.authorization;\n      delete event.request.headers?.cookie;\n    }\n    return event;\n  },\n});\n\n// Error handling middleware\nfunction errorHandler(err, req, res, next) {\n  Sentry.captureException(err);\n\n  logger.error('Unhandled error', {\n    error: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    userId: req.user?.id,\n  });\n\n  res.status(500).json({\n    error: 'Internal server error',\n    requestId: req.id,\n  });\n}\n</code></pre>"},{"location":"TECH_STACK/#third-party-integrations","title":"Third-Party Integrations","text":""},{"location":"TECH_STACK/#job-board-apis","title":"Job Board APIs","text":""},{"location":"TECH_STACK/#linkedin-jobs-api","title":"LinkedIn Jobs API","text":"<pre><code>// LinkedIn API Service\nclass LinkedInService {\n  constructor() {\n    this.clientId = process.env.LINKEDIN_CLIENT_ID;\n    this.clientSecret = process.env.LINKEDIN_CLIENT_SECRET;\n    this.baseURL = 'https://api.linkedin.com/v2';\n  }\n\n  async searchJobs(criteria) {\n    const params = new URLSearchParams({\n      keywords: criteria.keywords,\n      locationId: criteria.locationId,\n      f_TPR: criteria.timePosted || 'r86400', // Last 24 hours\n      f_JT: criteria.jobType || 'F', // Full-time\n      start: criteria.start || 0,\n      count: criteria.count || 25,\n    });\n\n    const response = await fetch(\n      `${this.baseURL}/jobSearch?${params}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${await this.getAccessToken()}`,\n          'X-Restli-Protocol-Version': '2.0.0',\n        },\n      }\n    );\n\n    return this.normalizeJobData(await response.json());\n  }\n\n  async getJobDetails(jobId) {\n    const response = await fetch(\n      `${this.baseURL}/jobs/${jobId}`,\n      {\n        headers: {\n          'Authorization': `Bearer ${await this.getAccessToken()}`,\n          'X-Restli-Protocol-Version': '2.0.0',\n        },\n      }\n    );\n\n    return this.normalizeJobData(await response.json());\n  }\n\n  normalizeJobData(rawData) {\n    return {\n      id: rawData.id,\n      title: rawData.title,\n      company: rawData.companyDetails?.name,\n      location: rawData.formattedLocation,\n      description: rawData.description?.text,\n      postedAt: new Date(rawData.listedAt),\n      url: rawData.applyUrl,\n      requirements: this.extractRequirements(rawData.description?.text),\n      salaryRange: rawData.salaryInsights,\n      source: 'linkedin',\n    };\n  }\n}\n</code></pre>"},{"location":"TECH_STACK/#indeed-web-scraping","title":"Indeed Web Scraping","text":"<pre><code># Indeed Scraper\nimport asyncio\nimport aiohttp\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urlencode\n\nclass IndeedScraper:\n    def __init__(self):\n        self.base_url = \"https://www.indeed.com/jobs\"\n        self.headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n\n    async def search_jobs(self, criteria):\n        params = {\n            'q': criteria.get('keywords', ''),\n            'l': criteria.get('location', ''),\n            'fromage': criteria.get('days_ago', 1),\n            'start': criteria.get('start', 0),\n            'limit': criteria.get('limit', 50)\n        }\n\n        url = f\"{self.base_url}?{urlencode(params)}\"\n\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url, headers=self.headers) as response:\n                html = await response.text()\n                return self.parse_job_listings(html)\n\n    def parse_job_listings(self, html):\n        soup = BeautifulSoup(html, 'html.parser')\n        job_cards = soup.find_all('div', {'data-jk': True})\n\n        jobs = []\n        for card in job_cards:\n            job = self.extract_job_data(card)\n            if job:\n                jobs.append(job)\n\n        return jobs\n\n    def extract_job_data(self, card):\n        try:\n            title_elem = card.find('h2', class_='jobTitle')\n            title = title_elem.find('a').get_text(strip=True) if title_elem else None\n\n            company_elem = card.find('span', class_='companyName')\n            company = company_elem.get_text(strip=True) if company_elem else None\n\n            location_elem = card.find('div', class_='companyLocation')\n            location = location_elem.get_text(strip=True) if location_elem else None\n\n            summary_elem = card.find('div', class_='job-snippet')\n            summary = summary_elem.get_text(strip=True) if summary_elem else None\n\n            return {\n                'id': card.get('data-jk'),\n                'title': title,\n                'company': company,\n                'location': location,\n                'summary': summary,\n                'source': 'indeed',\n                'scraped_at': datetime.utcnow().isoformat()\n            }\n        except Exception as e:\n            logger.error(f\"Error extracting job data: {e}\")\n            return None\n</code></pre>"},{"location":"TECH_STACK/#communication-services","title":"Communication Services","text":""},{"location":"TECH_STACK/#email-service-sendgrid","title":"Email Service (SendGrid)","text":"<pre><code>// Email Service\nimport sgMail from '@sendgrid/mail';\n\nclass EmailService {\n  constructor() {\n    sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n    this.fromEmail = process.env.FROM_EMAIL;\n  }\n\n  async sendWelcomeEmail(user) {\n    const msg = {\n      to: user.email,\n      from: this.fromEmail,\n      templateId: 'd-welcome-template-id',\n      dynamicTemplateData: {\n        name: user.name,\n        loginUrl: `${process.env.FRONTEND_URL}/login`,\n      },\n    };\n\n    try {\n      await sgMail.send(msg);\n      logger.info('Welcome email sent', { userId: user.id, email: user.email });\n    } catch (error) {\n      logger.error('Failed to send welcome email', { error, userId: user.id });\n      throw error;\n    }\n  }\n\n  async sendJobAlert(user, jobs) {\n    const msg = {\n      to: user.email,\n      from: this.fromEmail,\n      templateId: 'd-job-alert-template-id',\n      dynamicTemplateData: {\n        name: user.name,\n        jobs: jobs.slice(0, 5), // Top 5 jobs\n        totalJobs: jobs.length,\n        unsubscribeUrl: `${process.env.FRONTEND_URL}/unsubscribe?token=${user.unsubscribeToken}`,\n      },\n    };\n\n    await sgMail.send(msg);\n  }\n\n  async sendApplicationUpdate(user, application) {\n    const msg = {\n      to: user.email,\n      from: this.fromEmail,\n      templateId: 'd-application-update-template-id',\n      dynamicTemplateData: {\n        name: user.name,\n        jobTitle: application.jobTitle,\n        company: application.company,\n        status: application.status,\n        dashboardUrl: `${process.env.FRONTEND_URL}/dashboard`,\n      },\n    };\n\n    await sgMail.send(msg);\n  }\n}\n</code></pre>"},{"location":"TECH_STACK/#sms-service-twilio","title":"SMS Service (Twilio)","text":"<pre><code>// SMS Service\nimport twilio from 'twilio';\n\nclass SMSService {\n  constructor() {\n    this.client = twilio(\n      process.env.TWILIO_ACCOUNT_SID,\n      process.env.TWILIO_AUTH_TOKEN\n    );\n    this.fromNumber = process.env.TWILIO_PHONE_NUMBER;\n  }\n\n  async sendJobAlert(phoneNumber, jobCount) {\n    const message = `\ud83c\udfaf ${jobCount} new job matches found! Check your HR Platform dashboard to view and apply.`;\n\n    try {\n      const result = await this.client.messages.create({\n        body: message,\n        from: this.fromNumber,\n        to: phoneNumber,\n      });\n\n      logger.info('SMS job alert sent', { \n        to: phoneNumber, \n        messageSid: result.sid \n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Failed to send SMS', { error, to: phoneNumber });\n      throw error;\n    }\n  }\n\n  async sendApplicationUpdate(phoneNumber, jobTitle, status) {\n    const message = `\ud83d\udccb Application update: Your application for \"${jobTitle}\" is now ${status}.`;\n\n    const result = await this.client.messages.create({\n      body: message,\n      from: this.fromNumber,\n      to: phoneNumber,\n    });\n\n    return result;\n  }\n}\n</code></pre> <p>This comprehensive technology stack documentation provides detailed specifications for all components of the AI-Powered Job Seeker Platform, including code examples, configurations, and integration patterns that enable the full functionality described in the project requirements.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The HR Agent Platform API is a RESTful service that provides comprehensive endpoints for user management, job operations, CV management, and AI-powered features. The API follows REST principles and returns JSON responses.</p>"},{"location":"api/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Authentication</li> <li>Base URLs</li> <li>Common Headers</li> <li>Error Handling</li> <li>Rate Limiting</li> <li>API Endpoints</li> <li>Webhooks</li> <li>SDK Examples</li> </ol>"},{"location":"api/#authentication","title":"Authentication","text":""},{"location":"api/#jwt-bearer-token","title":"JWT Bearer Token","text":"<p>All authenticated endpoints require a JWT token in the Authorization header:</p> <pre><code>Authorization: Bearer &lt;your-jwt-token&gt;\n</code></pre>"},{"location":"api/#authentication-flow","title":"Authentication Flow","text":"<pre><code>// Login to get token\nPOST /api/v1/auth/login\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n\n// Response\n{\n  \"success\": true,\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refreshToken\": \"refresh_token_here\",\n    \"user\": {\n      \"id\": \"user_id\",\n      \"email\": \"user@example.com\",\n      \"userType\": \"seeker\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/#token-refresh","title":"Token Refresh","text":"<pre><code>POST /api/v1/auth/refresh\n{\n  \"refreshToken\": \"refresh_token_here\"\n}\n</code></pre>"},{"location":"api/#base-urls","title":"Base URLs","text":"<ul> <li>Production: <code>https://api.hr-agent.com</code></li> <li>Staging: <code>https://staging-api.hr-agent.com</code></li> <li>Development: <code>http://localhost:8000</code></li> </ul>"},{"location":"api/#common-headers","title":"Common Headers","text":"<pre><code>Content-Type: application/json\nAccept: application/json\nAuthorization: Bearer &lt;token&gt;\nX-API-Version: v1\nUser-Agent: YourApp/1.0\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input data\",\n    \"details\": {\n      \"field\": \"email\",\n      \"issue\": \"Invalid email format\"\n    },\n    \"timestamp\": \"2025-08-03T10:00:00Z\",\n    \"requestId\": \"req_123456789\"\n  }\n}\n</code></pre>"},{"location":"api/#error-codes","title":"Error Codes","text":"Code Status Description <code>UNAUTHORIZED</code> 401 Invalid or missing authentication <code>FORBIDDEN</code> 403 Insufficient permissions <code>NOT_FOUND</code> 404 Resource not found <code>VALIDATION_ERROR</code> 400 Invalid input data <code>RATE_LIMIT_EXCEEDED</code> 429 Too many requests <code>INTERNAL_ERROR</code> 500 Server error"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>API endpoints are rate-limited to ensure fair usage:</p> <ul> <li>General endpoints: 1000 requests/hour per user</li> <li>Auth endpoints: 10 requests/minute per IP</li> <li>Job search: 100 requests/hour per user</li> <li>AI endpoints: 50 requests/hour per user</li> </ul> <p>Rate limit headers: <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1625097600\n</code></pre></p>"},{"location":"api/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"api/#post-apiv1authregister","title":"POST /api/v1/auth/register","text":"<p>Register a new user account.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"userType\": \"seeker\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phone\": \"+1234567890\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"user\": {\n      \"id\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n      \"email\": \"user@example.com\",\n      \"userType\": \"seeker\",\n      \"profile\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"phone\": \"+1234567890\"\n      },\n      \"createdAt\": \"2025-08-03T10:00:00Z\",\n      \"emailVerified\": false\n    },\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refreshToken\": \"refresh_token_here\"\n  }\n}\n</code></pre></p>"},{"location":"api/#post-apiv1authlogin","title":"POST /api/v1/auth/login","text":"<p>Authenticate user and get access token.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n</code></pre></p>"},{"location":"api/#post-apiv1authlogout","title":"POST /api/v1/auth/logout","text":"<p>Logout user and invalidate token.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p>"},{"location":"api/#post-apiv1authforgot-password","title":"POST /api/v1/auth/forgot-password","text":"<p>Request password reset email.</p> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\"\n}\n</code></pre></p>"},{"location":"api/#post-apiv1authreset-password","title":"POST /api/v1/auth/reset-password","text":"<p>Reset password with token from email.</p> <p>Request Body: <pre><code>{\n  \"token\": \"reset_token_from_email\",\n  \"newPassword\": \"newpassword123\"\n}\n</code></pre></p>"},{"location":"api/#user-management-endpoints","title":"User Management Endpoints","text":""},{"location":"api/#get-apiv1usersprofile","title":"GET /api/v1/users/profile","text":"<p>Get current user's profile.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n    \"email\": \"user@example.com\",\n    \"userType\": \"seeker\",\n    \"profile\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"phone\": \"+1234567890\",\n      \"location\": {\n        \"city\": \"San Francisco\",\n        \"country\": \"USA\"\n      },\n      \"bio\": \"Software developer with 5 years of experience\",\n      \"avatar\": \"https://cdn.hr-agent.com/avatars/user123.jpg\",\n      \"linkedinProfile\": \"https://linkedin.com/in/johndoe\"\n    },\n    \"preferences\": {\n      \"jobAlerts\": true,\n      \"autoApply\": false,\n      \"emailNotifications\": true,\n      \"jobTypes\": [\"full-time\", \"remote\"],\n      \"salaryRange\": {\n        \"min\": 80000,\n        \"max\": 120000,\n        \"currency\": \"USD\"\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#put-apiv1usersprofile","title":"PUT /api/v1/users/profile","text":"<p>Update user profile.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"profile\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"phone\": \"+1234567890\",\n    \"location\": {\n      \"city\": \"New York\",\n      \"country\": \"USA\"\n    },\n    \"bio\": \"Senior software developer\",\n    \"linkedinProfile\": \"https://linkedin.com/in/johnsmith\"\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apiv1userspreferences","title":"GET /api/v1/users/preferences","text":"<p>Get user preferences.</p>"},{"location":"api/#put-apiv1userspreferences","title":"PUT /api/v1/users/preferences","text":"<p>Update user preferences.</p> <p>Request Body: <pre><code>{\n  \"jobAlerts\": true,\n  \"autoApply\": true,\n  \"emailNotifications\": true,\n  \"jobTypes\": [\"full-time\", \"contract\"],\n  \"salaryRange\": {\n    \"min\": 90000,\n    \"max\": 150000,\n    \"currency\": \"USD\"\n  },\n  \"locations\": [\"San Francisco\", \"Remote\"],\n  \"remoteWork\": true\n}\n</code></pre></p>"},{"location":"api/#post-apiv1usersupload-avatar","title":"POST /api/v1/users/upload-avatar","text":"<p>Upload user avatar image.</p> <p>Content-Type: <code>multipart/form-data</code> Body: File upload (max 5MB, jpg/png)</p>"},{"location":"api/#job-management-endpoints","title":"Job Management Endpoints","text":""},{"location":"api/#get-apiv1jobs","title":"GET /api/v1/jobs","text":"<p>Get job listings with filtering and pagination.</p> <p>Query Parameters: - <code>page</code> (integer): Page number (default: 1) - <code>limit</code> (integer): Items per page (default: 20, max: 100) - <code>q</code> (string): Search query - <code>location</code> (string): Job location - <code>jobType</code> (string): full-time, part-time, contract, internship - <code>workType</code> (string): remote, on-site, hybrid - <code>salaryMin</code> (number): Minimum salary - <code>salaryMax</code> (number): Maximum salary - <code>experienceLevel</code> (string): entry, mid, senior, lead - <code>skills</code> (string[]): Required skills - <code>sort</code> (string): createdAt, salary, relevance (default: createdAt) - <code>order</code> (string): asc, desc (default: desc)</p> <p>Example Request: <pre><code>GET /api/v1/jobs?q=software+engineer&amp;location=San+Francisco&amp;jobType=full-time&amp;salaryMin=100000&amp;page=1&amp;limit=20\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"jobs\": [\n      {\n        \"id\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n        \"title\": \"Senior Software Engineer\",\n        \"company\": {\n          \"name\": \"TechCorp\",\n          \"logo\": \"https://cdn.hr-agent.com/logos/techcorp.png\",\n          \"website\": \"https://techcorp.com\",\n          \"size\": \"large\",\n          \"industry\": \"Technology\"\n        },\n        \"description\": \"We are looking for a senior software engineer...\",\n        \"requirements\": [\n          \"5+ years of experience\",\n          \"React and Node.js expertise\",\n          \"AWS experience\"\n        ],\n        \"responsibilities\": [\n          \"Design and develop scalable applications\",\n          \"Mentor junior developers\",\n          \"Collaborate with product teams\"\n        ],\n        \"benefits\": [\n          \"Health insurance\",\n          \"401k matching\",\n          \"Flexible hours\"\n        ],\n        \"jobType\": \"full-time\",\n        \"workType\": \"hybrid\",\n        \"location\": {\n          \"city\": \"San Francisco\",\n          \"country\": \"USA\",\n          \"coordinates\": [-122.4194, 37.7749]\n        },\n        \"salary\": {\n          \"min\": 120000,\n          \"max\": 160000,\n          \"currency\": \"USD\",\n          \"period\": \"annually\"\n        },\n        \"skills\": [\"JavaScript\", \"React\", \"Node.js\", \"AWS\"],\n        \"experienceLevel\": \"senior\",\n        \"applicationDeadline\": \"2025-09-01T23:59:59Z\",\n        \"isActive\": true,\n        \"externalUrl\": null,\n        \"source\": \"internal\",\n        \"createdAt\": \"2025-08-03T10:00:00Z\",\n        \"applicationsCount\": 25\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 20,\n      \"total\": 150,\n      \"pages\": 8,\n      \"hasNext\": true,\n      \"hasPrev\": false\n    },\n    \"filters\": {\n      \"appliedFilters\": {\n        \"q\": \"software engineer\",\n        \"location\": \"San Francisco\",\n        \"jobType\": \"full-time\",\n        \"salaryMin\": 100000\n      },\n      \"availableFilters\": {\n        \"jobTypes\": [\"full-time\", \"part-time\", \"contract\"],\n        \"workTypes\": [\"remote\", \"on-site\", \"hybrid\"],\n        \"experienceLevels\": [\"entry\", \"mid\", \"senior\", \"lead\"],\n        \"topSkills\": [\"JavaScript\", \"Python\", \"React\", \"AWS\"],\n        \"locations\": [\"San Francisco\", \"New York\", \"Remote\"]\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apiv1jobsid","title":"GET /api/v1/jobs/:id","text":"<p>Get detailed job information.</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"job\": {\n      \"id\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n      \"title\": \"Senior Software Engineer\",\n      \"company\": { /* company details */ },\n      \"description\": \"Full job description...\",\n      \"requirements\": [\"5+ years experience\", \"...\"],\n      \"responsibilities\": [\"Design applications\", \"...\"],\n      \"benefits\": [\"Health insurance\", \"...\"],\n      /* ... other job fields ... */\n      \"applications\": [\n        {\n          \"id\": \"64f8a1b2c3d4e5f6a7b8c9d2\",\n          \"applicantId\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n          \"appliedAt\": \"2025-08-03T11:00:00Z\",\n          \"status\": \"pending\",\n          \"autoApplied\": false\n        }\n      ],\n      \"similarJobs\": [\n        {\n          \"id\": \"64f8a1b2c3d4e5f6a7b8c9d3\",\n          \"title\": \"Software Engineer\",\n          \"company\": \"AnotherCorp\",\n          \"matchScore\": 0.85\n        }\n      ]\n    },\n    \"userContext\": {\n      \"hasApplied\": false,\n      \"matchScore\": 0.92,\n      \"matchReasons\": [\n        \"Skills match: JavaScript, React, Node.js\",\n        \"Experience level match\",\n        \"Location preference match\"\n      ],\n      \"canAutoApply\": true\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#post-apiv1jobs","title":"POST /api/v1/jobs","text":"<p>Create a new job posting (recruiters only).</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"title\": \"Frontend Developer\",\n  \"company\": {\n    \"name\": \"StartupCorp\",\n    \"website\": \"https://startupcorp.com\",\n    \"size\": \"startup\",\n    \"industry\": \"Technology\"\n  },\n  \"description\": \"We are seeking a talented frontend developer...\",\n  \"requirements\": [\n    \"3+ years React experience\",\n    \"TypeScript knowledge\",\n    \"CSS expertise\"\n  ],\n  \"responsibilities\": [\n    \"Develop user interfaces\",\n    \"Collaborate with designers\",\n    \"Optimize performance\"\n  ],\n  \"benefits\": [\n    \"Equity package\",\n    \"Health insurance\",\n    \"Remote work\"\n  ],\n  \"jobType\": \"full-time\",\n  \"workType\": \"remote\",\n  \"location\": {\n    \"city\": \"Remote\",\n    \"country\": \"USA\"\n  },\n  \"salary\": {\n    \"min\": 80000,\n    \"max\": 110000,\n    \"currency\": \"USD\",\n    \"period\": \"annually\"\n  },\n  \"skills\": [\"React\", \"TypeScript\", \"CSS\", \"JavaScript\"],\n  \"experienceLevel\": \"mid\",\n  \"applicationDeadline\": \"2025-09-15T23:59:59Z\"\n}\n</code></pre></p>"},{"location":"api/#put-apiv1jobsid","title":"PUT /api/v1/jobs/:id","text":"<p>Update job posting (recruiters only).</p>"},{"location":"api/#delete-apiv1jobsid","title":"DELETE /api/v1/jobs/:id","text":"<p>Delete job posting (recruiters only).</p>"},{"location":"api/#post-apiv1jobsidapply","title":"POST /api/v1/jobs/:id/apply","text":"<p>Apply to a job.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"cvId\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n  \"coverLetter\": \"I am excited to apply for this position because...\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"application\": {\n      \"id\": \"64f8a1b2c3d4e5f6a7b8c9d5\",\n      \"jobId\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n      \"applicantId\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n      \"cvId\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n      \"coverLetter\": \"I am excited to apply...\",\n      \"status\": \"pending\",\n      \"appliedAt\": \"2025-08-03T12:00:00Z\",\n      \"autoApplied\": false\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apiv1jobssearch","title":"GET /api/v1/jobs/search","text":"<p>Advanced job search with AI-powered matching.</p> <p>Query Parameters: - All parameters from GET /api/v1/jobs - <code>useAI</code> (boolean): Enable AI-powered search - <code>cvId</code> (string): CV ID for personalized matching</p>"},{"location":"api/#get-apiv1jobsrecommendations","title":"GET /api/v1/jobs/recommendations","text":"<p>Get personalized job recommendations.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Query Parameters: - <code>cvId</code> (string): CV ID for recommendations - <code>limit</code> (integer): Number of recommendations (default: 10)</p>"},{"location":"api/#cv-management-endpoints","title":"CV Management Endpoints","text":""},{"location":"api/#get-apiv1cv","title":"GET /api/v1/cv","text":"<p>Get user's CV list.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"cvs\": [\n      {\n        \"id\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n        \"name\": \"Software Engineer CV\",\n        \"templateId\": \"64f8a1b2c3d4e5f6a7b8c9d6\",\n        \"isDefault\": true,\n        \"pdfUrl\": \"https://cdn.hr-agent.com/cvs/user123_cv1.pdf\",\n        \"version\": 1,\n        \"createdAt\": \"2025-08-01T10:00:00Z\",\n        \"updatedAt\": \"2025-08-03T10:00:00Z\",\n        \"preview\": {\n          \"personalInfo\": {\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"email\": \"john@example.com\"\n          },\n          \"skills\": [\"JavaScript\", \"React\", \"Node.js\"],\n          \"experienceYears\": 5\n        }\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/#post-apiv1cv","title":"POST /api/v1/cv","text":"<p>Create a new CV.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"name\": \"Senior Developer CV\",\n  \"templateId\": \"64f8a1b2c3d4e5f6a7b8c9d6\",\n  \"personalInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"+1234567890\",\n    \"location\": \"San Francisco, CA\",\n    \"linkedinProfile\": \"https://linkedin.com/in/johndoe\",\n    \"websiteUrl\": \"https://johndoe.dev\",\n    \"summary\": \"Experienced software engineer with expertise in full-stack development...\"\n  },\n  \"experience\": [\n    {\n      \"company\": \"TechCorp\",\n      \"position\": \"Senior Software Engineer\",\n      \"startDate\": \"2022-01-01\",\n      \"endDate\": null,\n      \"current\": true,\n      \"description\": \"Lead development of scalable web applications using React and Node.js\",\n      \"achievements\": [\n        \"Improved application performance by 40%\",\n        \"Led team of 5 developers\",\n        \"Implemented CI/CD pipeline\"\n      ]\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"Stanford University\",\n      \"degree\": \"Bachelor of Science\",\n      \"field\": \"Computer Science\",\n      \"startDate\": \"2015-09-01\",\n      \"endDate\": \"2019-06-01\",\n      \"gpa\": 3.8,\n      \"description\": \"Relevant coursework: Data Structures, Algorithms, Software Engineering\"\n    }\n  ],\n  \"skills\": [\n    {\n      \"name\": \"JavaScript\",\n      \"level\": \"expert\",\n      \"category\": \"technical\"\n    },\n    {\n      \"name\": \"React\",\n      \"level\": \"expert\",\n      \"category\": \"technical\"\n    },\n    {\n      \"name\": \"Leadership\",\n      \"level\": \"advanced\",\n      \"category\": \"soft\"\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"E-commerce Platform\",\n      \"description\": \"Built a full-stack e-commerce platform with React and Node.js\",\n      \"technologies\": [\"React\", \"Node.js\", \"MongoDB\", \"Stripe\"],\n      \"url\": \"https://github.com/johndoe/ecommerce\",\n      \"startDate\": \"2023-01-01\",\n      \"endDate\": \"2023-06-01\"\n    }\n  ],\n  \"certifications\": [\n    {\n      \"name\": \"AWS Solutions Architect\",\n      \"issuer\": \"Amazon Web Services\",\n      \"issueDate\": \"2023-03-15\",\n      \"expiryDate\": \"2026-03-15\",\n      \"credentialId\": \"AWS-SAA-123456\",\n      \"url\": \"https://aws.amazon.com/verification\"\n    }\n  ],\n  \"languages\": [\n    {\n      \"name\": \"English\",\n      \"proficiency\": \"native\"\n    },\n    {\n      \"name\": \"Spanish\",\n      \"proficiency\": \"conversational\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/#get-apiv1cvid","title":"GET /api/v1/cv/:id","text":"<p>Get CV details.</p>"},{"location":"api/#put-apiv1cvid","title":"PUT /api/v1/cv/:id","text":"<p>Update CV.</p>"},{"location":"api/#delete-apiv1cvid","title":"DELETE /api/v1/cv/:id","text":"<p>Delete CV.</p>"},{"location":"api/#post-apiv1cvidexport","title":"POST /api/v1/cv/:id/export","text":"<p>Export CV to PDF.</p> <p>Query Parameters: - <code>format</code> (string): pdf, docx (default: pdf) - <code>template</code> (string): Template style override</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"downloadUrl\": \"https://cdn.hr-agent.com/exports/cv_64f8a1b2c3d4e5f6a7b8c9d4.pdf\",\n    \"expiresAt\": \"2025-08-03T22:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apiv1cvtemplates","title":"GET /api/v1/cv/templates","text":"<p>Get available CV templates.</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"templates\": [\n      {\n        \"id\": \"64f8a1b2c3d4e5f6a7b8c9d6\",\n        \"name\": \"Modern Professional\",\n        \"category\": \"professional\",\n        \"preview\": \"https://cdn.hr-agent.com/templates/modern-professional.png\",\n        \"isPremium\": false,\n        \"description\": \"Clean and modern design suitable for tech professionals\"\n      },\n      {\n        \"id\": \"64f8a1b2c3d4e5f6a7b8c9d7\",\n        \"name\": \"Creative Designer\",\n        \"category\": \"creative\",\n        \"preview\": \"https://cdn.hr-agent.com/templates/creative-designer.png\",\n        \"isPremium\": true,\n        \"description\": \"Eye-catching design perfect for creative professionals\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/#ai-agent-endpoints","title":"AI Agent Endpoints","text":""},{"location":"api/#post-apiv1agentchat","title":"POST /api/v1/agent/chat","text":"<p>Chat with AI agent for job search assistance.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"message\": \"Find me software engineering jobs in San Francisco\",\n  \"context\": {\n    \"cvId\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n    \"conversationId\": \"64f8a1b2c3d4e5f6a7b8c9d8\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"response\": {\n      \"message\": \"I found 15 software engineering jobs in San Francisco that match your profile. Here are the top 5 recommendations based on your skills and experience:\",\n      \"type\": \"job_recommendations\",\n      \"data\": {\n        \"jobs\": [\n          {\n            \"id\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n            \"title\": \"Senior Software Engineer\",\n            \"company\": \"TechCorp\",\n            \"matchScore\": 0.95,\n            \"reason\": \"Perfect match for your React and Node.js expertise\"\n          }\n        ],\n        \"totalFound\": 15\n      }\n    },\n    \"conversationId\": \"64f8a1b2c3d4e5f6a7b8c9d8\",\n    \"suggestedActions\": [\n      {\n        \"type\": \"apply_job\",\n        \"label\": \"Apply to TechCorp\",\n        \"jobId\": \"64f8a1b2c3d4e5f6a7b8c9d1\"\n      },\n      {\n        \"type\": \"auto_apply\",\n        \"label\": \"Auto-apply to similar jobs\",\n        \"criteria\": { /* search criteria */ }\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/#post-apiv1agentanalyze-cv","title":"POST /api/v1/agent/analyze-cv","text":"<p>Get AI analysis and suggestions for CV improvement.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"cvId\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n  \"targetRole\": \"Senior Software Engineer\",\n  \"targetIndustry\": \"Technology\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"analysis\": {\n      \"overallScore\": 8.5,\n      \"strengths\": [\n        \"Strong technical skills alignment\",\n        \"Relevant work experience\",\n        \"Good project portfolio\"\n      ],\n      \"improvements\": [\n        {\n          \"category\": \"skills\",\n          \"priority\": \"high\",\n          \"suggestion\": \"Add cloud computing skills (AWS, Docker) as they appear in 80% of target roles\",\n          \"impact\": \"Could increase match rate by 25%\"\n        },\n        {\n          \"category\": \"experience\",\n          \"priority\": \"medium\",\n          \"suggestion\": \"Quantify achievements with specific metrics\",\n          \"impact\": \"Makes accomplishments more compelling\"\n        }\n      ],\n      \"missingSkills\": [\n        {\n          \"skill\": \"Docker\",\n          \"frequency\": 0.75,\n          \"importance\": \"high\"\n        },\n        {\n          \"skill\": \"Kubernetes\",\n          \"frequency\": 0.60,\n          \"importance\": \"medium\"\n        }\n      ],\n      \"atsOptimization\": {\n        \"score\": 7.8,\n        \"issues\": [\n          \"Use more industry keywords\",\n          \"Standardize section headers\"\n        ]\n      }\n    },\n    \"recommendations\": [\n      {\n        \"type\": \"skill_course\",\n        \"title\": \"AWS Certified Solutions Architect\",\n        \"provider\": \"AWS\",\n        \"url\": \"https://aws.amazon.com/certification/\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/#post-apiv1agentjob-match","title":"POST /api/v1/agent/job-match","text":"<p>Get AI-powered job matching for a specific CV.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"cvId\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n  \"criteria\": {\n    \"location\": \"San Francisco\",\n    \"jobType\": \"full-time\",\n    \"salaryMin\": 100000,\n    \"remoteWork\": true\n  },\n  \"limit\": 20\n}\n</code></pre></p>"},{"location":"api/#post-apiv1agentauto-apply","title":"POST /api/v1/agent/auto-apply","text":"<p>Automatically apply to matching jobs.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"cvId\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n  \"criteria\": {\n    \"location\": [\"San Francisco\", \"Remote\"],\n    \"jobType\": [\"full-time\"],\n    \"salaryMin\": 120000,\n    \"experienceLevel\": [\"senior\"],\n    \"skills\": [\"React\", \"Node.js\"]\n  },\n  \"preferences\": {\n    \"maxApplications\": 10,\n    \"minMatchScore\": 0.8,\n    \"generateCoverLetter\": true,\n    \"excludeCompanies\": [\"Company1\", \"Company2\"]\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"autoApplySession\": {\n      \"id\": \"64f8a1b2c3d4e5f6a7b8c9d9\",\n      \"status\": \"processing\",\n      \"criteria\": { /* applied criteria */ },\n      \"progress\": {\n        \"jobsFound\": 25,\n        \"jobsFiltered\": 15,\n        \"jobsApplied\": 0,\n        \"jobsFailed\": 0\n      },\n      \"estimatedDuration\": \"5-10 minutes\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apiv1agentauto-applysessionid","title":"GET /api/v1/agent/auto-apply/:sessionId","text":"<p>Check auto-apply session status.</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"session\": {\n      \"id\": \"64f8a1b2c3d4e5f6a7b8c9d9\",\n      \"status\": \"completed\",\n      \"startedAt\": \"2025-08-03T14:00:00Z\",\n      \"completedAt\": \"2025-08-03T14:08:30Z\",\n      \"results\": {\n        \"jobsFound\": 25,\n        \"jobsFiltered\": 15,\n        \"jobsApplied\": 8,\n        \"jobsFailed\": 2,\n        \"applicationsCreated\": [\n          {\n            \"jobId\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n            \"applicationId\": \"64f8a1b2c3d4e5f6a7b8c9da\",\n            \"status\": \"success\",\n            \"appliedAt\": \"2025-08-03T14:02:15Z\"\n          }\n        ],\n        \"failedApplications\": [\n          {\n            \"jobId\": \"64f8a1b2c3d4e5f6a7b8c9db\",\n            \"reason\": \"External platform temporarily unavailable\",\n            \"canRetry\": true\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#application-management-endpoints","title":"Application Management Endpoints","text":""},{"location":"api/#get-apiv1applications","title":"GET /api/v1/applications","text":"<p>Get user's job applications.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Query Parameters: - <code>status</code> (string): pending, reviewed, interviewed, rejected, hired - <code>autoApplied</code> (boolean): Filter by auto-applied status - <code>page</code> (integer): Page number - <code>limit</code> (integer): Items per page - <code>sort</code> (string): appliedAt, status, company - <code>order</code> (string): asc, desc</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"applications\": [\n      {\n        \"id\": \"64f8a1b2c3d4e5f6a7b8c9d5\",\n        \"job\": {\n          \"id\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n          \"title\": \"Senior Software Engineer\",\n          \"company\": \"TechCorp\",\n          \"location\": \"San Francisco, CA\"\n        },\n        \"cv\": {\n          \"id\": \"64f8a1b2c3d4e5f6a7b8c9d4\",\n          \"name\": \"Software Engineer CV\"\n        },\n        \"status\": \"reviewed\",\n        \"appliedAt\": \"2025-08-03T12:00:00Z\",\n        \"autoApplied\": false,\n        \"coverLetter\": \"I am excited to apply...\",\n        \"timeline\": [\n          {\n            \"status\": \"pending\",\n            \"timestamp\": \"2025-08-03T12:00:00Z\",\n            \"note\": \"Application submitted\"\n          },\n          {\n            \"status\": \"reviewed\",\n            \"timestamp\": \"2025-08-03T15:30:00Z\",\n            \"note\": \"Application reviewed by HR\"\n          }\n        ]\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 20,\n      \"total\": 45,\n      \"pages\": 3\n    },\n    \"stats\": {\n      \"total\": 45,\n      \"pending\": 20,\n      \"reviewed\": 15,\n      \"interviewed\": 5,\n      \"rejected\": 3,\n      \"hired\": 2\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/#get-apiv1applicationsid","title":"GET /api/v1/applications/:id","text":"<p>Get application details.</p>"},{"location":"api/#put-apiv1applicationsidstatus","title":"PUT /api/v1/applications/:id/status","text":"<p>Update application status (recruiters only).</p> <p>Request Body: <pre><code>{\n  \"status\": \"interviewed\",\n  \"note\": \"Scheduled for technical interview on Aug 10\"\n}\n</code></pre></p>"},{"location":"api/#delete-apiv1applicationsid","title":"DELETE /api/v1/applications/:id","text":"<p>Withdraw application.</p>"},{"location":"api/#analytics-endpoints","title":"Analytics Endpoints","text":""},{"location":"api/#get-apiv1analyticsdashboard","title":"GET /api/v1/analytics/dashboard","text":"<p>Get user dashboard analytics.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Query Parameters: - <code>period</code> (string): 7d, 30d, 90d, 1y (default: 30d)</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"period\": \"30d\",\n    \"metrics\": {\n      \"applications\": {\n        \"total\": 45,\n        \"thisMonth\": 12,\n        \"changeFromLastMonth\": 20\n      },\n      \"profileViews\": {\n        \"total\": 128,\n        \"thisMonth\": 35,\n        \"changeFromLastMonth\": 15\n      },\n      \"jobMatches\": {\n        \"total\": 234,\n        \"thisMonth\": 78,\n        \"averageMatchScore\": 0.72\n      },\n      \"interviewsScheduled\": {\n        \"total\": 8,\n        \"thisMonth\": 3,\n        \"conversionRate\": 0.18\n      }\n    },\n    \"trends\": {\n      \"applicationsByDay\": [\n        { \"date\": \"2025-07-04\", \"count\": 2 },\n        { \"date\": \"2025-07-05\", \"count\": 1 },\n        { \"date\": \"2025-07-06\", \"count\": 0 }\n      ],\n      \"topSkillsInDemand\": [\n        { \"skill\": \"React\", \"frequency\": 0.85 },\n        { \"skill\": \"AWS\", \"frequency\": 0.73 },\n        { \"skill\": \"Python\", \"frequency\": 0.68 }\n      ]\n    },\n    \"recommendations\": [\n      {\n        \"type\": \"skill_improvement\",\n        \"message\": \"Consider adding Docker skills - it appears in 75% of relevant job postings\"\n      },\n      {\n        \"type\": \"application_strategy\",\n        \"message\": \"Your application success rate is higher for remote positions\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/#webhooks","title":"Webhooks","text":"<p>The platform supports webhooks for real-time notifications about important events.</p>"},{"location":"api/#webhook-configuration","title":"Webhook Configuration","text":""},{"location":"api/#post-apiv1webhooks","title":"POST /api/v1/webhooks","text":"<p>Register a webhook endpoint.</p> <p>Headers: <code>Authorization: Bearer &lt;token&gt;</code></p> <p>Request Body: <pre><code>{\n  \"url\": \"https://your-app.com/webhooks/hr-agent\",\n  \"events\": [\n    \"application.status_changed\",\n    \"job.new_match\",\n    \"cv.analysis_completed\",\n    \"auto_apply.completed\"\n  ],\n  \"secret\": \"your_webhook_secret_for_verification\"\n}\n</code></pre></p>"},{"location":"api/#webhook-events","title":"Webhook Events","text":""},{"location":"api/#applicationstatus_changed","title":"application.status_changed","text":"<p>Triggered when an application status changes.</p> <pre><code>{\n  \"event\": \"application.status_changed\",\n  \"data\": {\n    \"applicationId\": \"64f8a1b2c3d4e5f6a7b8c9d5\",\n    \"jobId\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n    \"userId\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n    \"oldStatus\": \"pending\",\n    \"newStatus\": \"reviewed\",\n    \"changedAt\": \"2025-08-03T15:30:00Z\",\n    \"note\": \"Application reviewed by HR\"\n  },\n  \"timestamp\": \"2025-08-03T15:30:00Z\",\n  \"id\": \"webhook_64f8a1b2c3d4e5f6a7b8c9dc\"\n}\n</code></pre>"},{"location":"api/#jobnew_match","title":"job.new_match","text":"<p>Triggered when a new job matches user criteria.</p> <pre><code>{\n  \"event\": \"job.new_match\",\n  \"data\": {\n    \"jobId\": \"64f8a1b2c3d4e5f6a7b8c9d1\",\n    \"userId\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n    \"matchScore\": 0.92,\n    \"job\": {\n      \"title\": \"Senior Software Engineer\",\n      \"company\": \"TechCorp\",\n      \"location\": \"San Francisco, CA\"\n    }\n  },\n  \"timestamp\": \"2025-08-03T16:00:00Z\",\n  \"id\": \"webhook_64f8a1b2c3d4e5f6a7b8c9dd\"\n}\n</code></pre>"},{"location":"api/#sdk-examples","title":"SDK Examples","text":""},{"location":"api/#javascriptnodejs-sdk","title":"JavaScript/Node.js SDK","text":"<pre><code>// hr-agent-sdk.js\nclass HRAgentSDK {\n  constructor(apiKey, baseUrl = 'https://api.hr-agent.com') {\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error.message);\n    }\n\n    return response.json();\n  }\n\n  // Authentication\n  async login(email, password) {\n    return this.request('/api/v1/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password })\n    });\n  }\n\n  // Jobs\n  async getJobs(filters = {}) {\n    const params = new URLSearchParams(filters);\n    return this.request(`/api/v1/jobs?${params}`);\n  }\n\n  async getJob(jobId) {\n    return this.request(`/api/v1/jobs/${jobId}`);\n  }\n\n  async applyToJob(jobId, cvId, coverLetter) {\n    return this.request(`/api/v1/jobs/${jobId}/apply`, {\n      method: 'POST',\n      body: JSON.stringify({ cvId, coverLetter })\n    });\n  }\n\n  // CV Management\n  async getCVs() {\n    return this.request('/api/v1/cv');\n  }\n\n  async createCV(cvData) {\n    return this.request('/api/v1/cv', {\n      method: 'POST',\n      body: JSON.stringify(cvData)\n    });\n  }\n\n  async exportCV(cvId, format = 'pdf') {\n    return this.request(`/api/v1/cv/${cvId}/export?format=${format}`, {\n      method: 'POST'\n    });\n  }\n\n  // AI Agent\n  async chatWithAgent(message, context = {}) {\n    return this.request('/api/v1/agent/chat', {\n      method: 'POST',\n      body: JSON.stringify({ message, context })\n    });\n  }\n\n  async analyzeCV(cvId, targetRole, targetIndustry) {\n    return this.request('/api/v1/agent/analyze-cv', {\n      method: 'POST',\n      body: JSON.stringify({ cvId, targetRole, targetIndustry })\n    });\n  }\n\n  async autoApplyJobs(cvId, criteria, preferences = {}) {\n    return this.request('/api/v1/agent/auto-apply', {\n      method: 'POST',\n      body: JSON.stringify({ cvId, criteria, preferences })\n    });\n  }\n\n  // Applications\n  async getApplications(filters = {}) {\n    const params = new URLSearchParams(filters);\n    return this.request(`/api/v1/applications?${params}`);\n  }\n}\n\n// Usage example\nconst sdk = new HRAgentSDK('your-api-key');\n\n// Login and search for jobs\nconst auth = await sdk.login('user@example.com', 'password');\nconst jobs = await sdk.getJobs({ \n  q: 'software engineer', \n  location: 'San Francisco',\n  jobType: 'full-time'\n});\n\n// Create and analyze CV\nconst cv = await sdk.createCV({\n  name: 'My CV',\n  personalInfo: { /* ... */ },\n  experience: [ /* ... */ ]\n});\n\nconst analysis = await sdk.analyzeCV(cv.data.id, 'Senior Software Engineer', 'Technology');\n\n// Auto-apply to jobs\nconst autoApply = await sdk.autoApplyJobs(cv.data.id, {\n  location: ['San Francisco', 'Remote'],\n  salaryMin: 100000\n});\n</code></pre>"},{"location":"api/#python-sdk","title":"Python SDK","text":"<pre><code># hr_agent_sdk.py\nimport requests\nfrom typing import Dict, List, Optional\n\nclass HRAgentSDK:\n    def __init__(self, api_key: str, base_url: str = \"https://api.hr-agent.com\"):\n        self.api_key = api_key\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.session.headers.update({\n            \"Authorization\": f\"Bearer {api_key}\",\n            \"Content-Type\": \"application/json\"\n        })\n\n    def _request(self, endpoint: str, method: str = \"GET\", data: Dict = None) -&gt; Dict:\n        url = f\"{self.base_url}{endpoint}\"\n        response = self.session.request(method, url, json=data)\n\n        if not response.ok:\n            error_data = response.json()\n            raise Exception(error_data[\"error\"][\"message\"])\n\n        return response.json()\n\n    # Authentication\n    def login(self, email: str, password: str) -&gt; Dict:\n        return self._request(\"/api/v1/auth/login\", \"POST\", {\n            \"email\": email,\n            \"password\": password\n        })\n\n    # Jobs\n    def get_jobs(self, filters: Dict = None) -&gt; Dict:\n        params = \"?\" + \"&amp;\".join(f\"{k}={v}\" for k, v in (filters or {}).items())\n        return self._request(f\"/api/v1/jobs{params}\")\n\n    def get_job(self, job_id: str) -&gt; Dict:\n        return self._request(f\"/api/v1/jobs/{job_id}\")\n\n    def apply_to_job(self, job_id: str, cv_id: str, cover_letter: str) -&gt; Dict:\n        return self._request(f\"/api/v1/jobs/{job_id}/apply\", \"POST\", {\n            \"cvId\": cv_id,\n            \"coverLetter\": cover_letter\n        })\n\n    # CV Management\n    def get_cvs(self) -&gt; Dict:\n        return self._request(\"/api/v1/cv\")\n\n    def create_cv(self, cv_data: Dict) -&gt; Dict:\n        return self._request(\"/api/v1/cv\", \"POST\", cv_data)\n\n    def export_cv(self, cv_id: str, format: str = \"pdf\") -&gt; Dict:\n        return self._request(f\"/api/v1/cv/{cv_id}/export?format={format}\", \"POST\")\n\n    # AI Agent\n    def chat_with_agent(self, message: str, context: Dict = None) -&gt; Dict:\n        return self._request(\"/api/v1/agent/chat\", \"POST\", {\n            \"message\": message,\n            \"context\": context or {}\n        })\n\n    def analyze_cv(self, cv_id: str, target_role: str, target_industry: str) -&gt; Dict:\n        return self._request(\"/api/v1/agent/analyze-cv\", \"POST\", {\n            \"cvId\": cv_id,\n            \"targetRole\": target_role,\n            \"targetIndustry\": target_industry\n        })\n\n    def auto_apply_jobs(self, cv_id: str, criteria: Dict, preferences: Dict = None) -&gt; Dict:\n        return self._request(\"/api/v1/agent/auto-apply\", \"POST\", {\n            \"cvId\": cv_id,\n            \"criteria\": criteria,\n            \"preferences\": preferences or {}\n        })\n\n# Usage example\nsdk = HRAgentSDK(\"your-api-key\")\n\n# Login and search for jobs\nauth = sdk.login(\"user@example.com\", \"password\")\njobs = sdk.get_jobs({\n    \"q\": \"software engineer\",\n    \"location\": \"San Francisco\",\n    \"jobType\": \"full-time\"\n})\n\n# Create and analyze CV\ncv = sdk.create_cv({\n    \"name\": \"My CV\",\n    \"personalInfo\": {\"firstName\": \"John\", \"lastName\": \"Doe\"},\n    \"experience\": [{\"company\": \"TechCorp\", \"position\": \"Developer\"}]\n})\n\nanalysis = sdk.analyze_cv(\n    cv[\"data\"][\"id\"], \n    \"Senior Software Engineer\", \n    \"Technology\"\n)\n\n# Auto-apply to jobs\nauto_apply = sdk.auto_apply_jobs(cv[\"data\"][\"id\"], {\n    \"location\": [\"San Francisco\", \"Remote\"],\n    \"salaryMin\": 100000\n})\n</code></pre> <p>This API documentation provides comprehensive coverage of all endpoints, authentication methods, error handling, and practical examples for integrating with the HR Agent platform.</p>"},{"location":"architecture/","title":"System Architecture Documentation","text":""},{"location":"architecture/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>Architecture Patterns</li> <li>Component Architecture</li> <li>Data Flow</li> <li>Security Architecture</li> <li>Scalability Considerations</li> </ol>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The AI-Powered Job Seeker Platform follows a microservices architecture pattern with clear separation of concerns, enabling scalability, maintainability, and independent deployment of components.</p>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                               Frontend Layer                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Web App       \u2502  \u2502   Mobile App    \u2502  \u2502   Admin Dashboard       \u2502  \u2502\n\u2502  \u2502  (React/Next)   \u2502  \u2502  (React Native) \u2502  \u2502    (React/Next)         \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u2502 HTTPS/WSS\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              API Gateway                                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502                      Load Balancer                             \u2502    \u2502\n\u2502  \u2502                   (NGINX/Cloudflare)                           \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u2502\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Backend Services Layer                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502    User     \u2502 \u2502     Job     \u2502 \u2502     CV      \u2502 \u2502      AI Agent       \u2502 \u2502\n\u2502  \u2502   Service   \u2502 \u2502   Service   \u2502 \u2502   Service   \u2502 \u2502      Service        \u2502 \u2502\n\u2502  \u2502  (Node.js)  \u2502 \u2502  (Node.js)  \u2502 \u2502  (Node.js)  \u2502 \u2502     (Python)        \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Notification\u2502 \u2502   Analytics \u2502 \u2502   Scraper   \u2502 \u2502     Workflow        \u2502 \u2502\n\u2502  \u2502   Service   \u2502 \u2502   Service   \u2502 \u2502   Service   \u2502 \u2502     Engine          \u2502 \u2502\n\u2502  \u2502  (Node.js)  \u2502 \u2502  (Node.js)  \u2502 \u2502  (Python)   \u2502 \u2502      (n8n)          \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u2502\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                            Data Layer                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Firebase   \u2502 \u2502   MongoDB   \u2502 \u2502    Redis    \u2502 \u2502    File Storage     \u2502 \u2502\n\u2502  \u2502  (Auth/RT)  \u2502 \u2502 (Primary DB)\u2502 \u2502   (Cache)   \u2502 \u2502    (AWS S3/GCS)     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u2502\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          External Services                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502   LinkedIn  \u2502 \u2502   Indeed    \u2502 \u2502 Glassdoor   \u2502 \u2502     AI Services     \u2502 \u2502\n\u2502  \u2502     API     \u2502 \u2502     API     \u2502 \u2502     API     \u2502 \u2502   (OpenAI/Claude)   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"architecture/#1-microservices-architecture","title":"1. Microservices Architecture","text":"<ul> <li>Independent Services: Each service handles specific business logic</li> <li>API-First Design: RESTful APIs with GraphQL for complex queries</li> <li>Event-Driven Communication: Asynchronous messaging between services</li> <li>Database per Service: Each microservice owns its data</li> </ul>"},{"location":"architecture/#2-cqrs-command-query-responsibility-segregation","title":"2. CQRS (Command Query Responsibility Segregation)","text":"<ul> <li>Command Side: Handles write operations (user actions)</li> <li>Query Side: Optimized for read operations (data retrieval)</li> <li>Event Sourcing: Track all changes as events</li> </ul>"},{"location":"architecture/#3-domain-driven-design-ddd","title":"3. Domain-Driven Design (DDD)","text":"<ul> <li>Bounded Contexts: Clear service boundaries</li> <li>Aggregates: Consistent data models</li> <li>Domain Events: Business event propagation</li> </ul>"},{"location":"architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/#frontend-architecture","title":"Frontend Architecture","text":"<pre><code>Frontend (React/Next.js)\n\u251c\u2500\u2500 pages/                 # Next.js pages/routes\n\u2502   \u251c\u2500\u2500 auth/             # Authentication pages\n\u2502   \u251c\u2500\u2500 dashboard/        # User dashboards\n\u2502   \u251c\u2500\u2500 jobs/             # Job-related pages\n\u2502   \u2514\u2500\u2500 cv/               # CV builder pages\n\u251c\u2500\u2500 components/           # Reusable UI components\n\u2502   \u251c\u2500\u2500 common/           # Shared components\n\u2502   \u251c\u2500\u2500 forms/            # Form components\n\u2502   \u2514\u2500\u2500 layout/           # Layout components\n\u251c\u2500\u2500 hooks/                # Custom React hooks\n\u251c\u2500\u2500 services/             # API service layer\n\u251c\u2500\u2500 store/                # State management (Redux/Zustand)\n\u251c\u2500\u2500 utils/                # Utility functions\n\u2514\u2500\u2500 styles/               # CSS/Styled components\n</code></pre>"},{"location":"architecture/#backend-services","title":"Backend Services","text":""},{"location":"architecture/#1-user-service","title":"1. User Service","text":"<ul> <li>Authentication: JWT-based auth with Firebase</li> <li>User Management: Profile CRUD operations</li> <li>Role Management: Recruiter vs Seeker permissions</li> <li>Social Login: OAuth integration</li> </ul>"},{"location":"architecture/#2-job-service","title":"2. Job Service","text":"<ul> <li>Job Management: CRUD for job postings</li> <li>Search Engine: Elasticsearch integration</li> <li>Job Matching: AI-powered recommendations</li> <li>Application Tracking: Status management</li> </ul>"},{"location":"architecture/#3-cv-service","title":"3. CV Service","text":"<ul> <li>CV Builder: Template-based CV creation</li> <li>PDF Generation: High-quality PDF exports</li> <li>Skills Extraction: NLP-based skill identification</li> <li>Version Control: CV history tracking</li> </ul>"},{"location":"architecture/#4-ai-agent-service","title":"4. AI Agent Service","text":"<ul> <li>Job Matching: ML-based job recommendations</li> <li>Auto-Apply: Automated application submission</li> <li>Profile Analysis: CV optimization suggestions</li> <li>Interview Preparation: AI-powered mock interviews</li> </ul>"},{"location":"architecture/#5-scraper-service","title":"5. Scraper Service","text":"<ul> <li>Multi-Platform Scraping: LinkedIn, Indeed, Glassdoor</li> <li>Rate Limiting: Respectful scraping practices</li> <li>Data Normalization: Consistent job data format</li> <li>Real-time Updates: Continuous job monitoring</li> </ul>"},{"location":"architecture/#6-notification-service","title":"6. Notification Service","text":"<ul> <li>Multi-Channel: Email, SMS, Push notifications</li> <li>Templates: Customizable message templates</li> <li>Scheduling: Delayed and recurring notifications</li> <li>Analytics: Delivery and engagement tracking</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#1-user-registration-flow","title":"1. User Registration Flow","text":"<pre><code>User Input \u2192 Frontend Validation \u2192 User Service \u2192 Firebase Auth\n    \u2193\nDatabase Update \u2192 Event Emission \u2192 Notification Service \u2192 Welcome Email\n</code></pre>"},{"location":"architecture/#2-job-search-flow","title":"2. Job Search Flow","text":"<pre><code>Search Query \u2192 Job Service \u2192 Elasticsearch \u2192 Results Ranking\n    \u2193\nAI Agent Analysis \u2192 Personalized Results \u2192 Frontend Display\n</code></pre>"},{"location":"architecture/#3-auto-apply-flow","title":"3. Auto-Apply Flow","text":"<pre><code>CV Analysis \u2192 Job Matching \u2192 Application Generation \u2192 External Platform API\n    \u2193\nApplication Submission \u2192 Status Tracking \u2192 Notification \u2192 User Dashboard\n</code></pre>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#1-authentication-authorization","title":"1. Authentication &amp; Authorization","text":"<ul> <li>JWT Tokens: Stateless authentication</li> <li>Role-Based Access Control (RBAC): Permission management</li> <li>Multi-Factor Authentication: Enhanced security</li> <li>Session Management: Secure session handling</li> </ul>"},{"location":"architecture/#2-data-protection","title":"2. Data Protection","text":"<ul> <li>Encryption at Rest: Database encryption</li> <li>Encryption in Transit: HTTPS/TLS</li> <li>Personal Data Protection: GDPR compliance</li> <li>Data Anonymization: Privacy protection</li> </ul>"},{"location":"architecture/#3-api-security","title":"3. API Security","text":"<ul> <li>Rate Limiting: DDoS protection</li> <li>Input Validation: SQL injection prevention</li> <li>CORS Configuration: Cross-origin security</li> <li>API Versioning: Backward compatibility</li> </ul>"},{"location":"architecture/#4-infrastructure-security","title":"4. Infrastructure Security","text":"<ul> <li>Network Segmentation: VPC configuration</li> <li>Firewall Rules: Access control</li> <li>Security Monitoring: Real-time threat detection</li> <li>Backup Encryption: Secure data backups</li> </ul>"},{"location":"architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/#1-horizontal-scaling","title":"1. Horizontal Scaling","text":"<ul> <li>Load Balancers: Traffic distribution</li> <li>Container Orchestration: Kubernetes deployment</li> <li>Auto-scaling: Dynamic resource allocation</li> <li>CDN Integration: Global content delivery</li> </ul>"},{"location":"architecture/#2-database-scaling","title":"2. Database Scaling","text":"<ul> <li>Read Replicas: Query performance</li> <li>Sharding Strategy: Data distribution</li> <li>Caching Layer: Redis implementation</li> <li>Connection Pooling: Resource optimization</li> </ul>"},{"location":"architecture/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Code Splitting: Frontend optimization</li> <li>Lazy Loading: Resource efficiency</li> <li>Database Indexing: Query optimization</li> <li>Asset Compression: Bandwidth reduction</li> </ul>"},{"location":"architecture/#4-monitoring-observability","title":"4. Monitoring &amp; Observability","text":"<ul> <li>Application Monitoring: Performance tracking</li> <li>Log Aggregation: Centralized logging</li> <li>Error Tracking: Issue identification</li> <li>Health Checks: Service availability</li> </ul>"},{"location":"architecture/#technology-stack-summary","title":"Technology Stack Summary","text":""},{"location":"architecture/#frontend","title":"Frontend","text":"<ul> <li>Framework: React with Next.js</li> <li>State Management: Redux Toolkit / Zustand</li> <li>Styling: Tailwind CSS / Styled Components</li> <li>Build Tool: Webpack (Next.js default)</li> </ul>"},{"location":"architecture/#backend","title":"Backend","text":"<ul> <li>Runtime: Node.js (API services)</li> <li>Framework: Express.js / Fastify</li> <li>Language: Python (AI/ML services)</li> <li>API Style: REST + GraphQL</li> </ul>"},{"location":"architecture/#database","title":"Database","text":"<ul> <li>Primary: MongoDB (document store)</li> <li>Authentication: Firebase Auth</li> <li>Cache: Redis</li> <li>Search: Elasticsearch</li> </ul>"},{"location":"architecture/#infrastructure","title":"Infrastructure","text":"<ul> <li>Containerization: Docker</li> <li>Orchestration: Kubernetes</li> <li>Cloud Provider: AWS / Google Cloud</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"architecture/#external-services","title":"External Services","text":"<ul> <li>AI/ML: OpenAI GPT, Claude</li> <li>File Storage: AWS S3 / Google Cloud Storage</li> <li>Email: SendGrid / AWS SES</li> <li>Monitoring: DataDog / New Relic</li> </ul>"},{"location":"architecture/backend/","title":"Backend Architecture","text":""},{"location":"architecture/backend/#overview","title":"Overview","text":"<p>The backend follows a microservices architecture pattern with Node.js for API services and Python for AI/ML services. Each service is containerized and can be independently deployed and scaled.</p>"},{"location":"architecture/backend/#architecture-pattern","title":"Architecture Pattern","text":""},{"location":"architecture/backend/#microservices-design","title":"Microservices Design","text":"<pre><code>Backend Services\n\u251c\u2500\u2500 API Gateway (Express.js)\n\u2502   \u251c\u2500\u2500 Authentication Middleware\n\u2502   \u251c\u2500\u2500 Rate Limiting\n\u2502   \u251c\u2500\u2500 Request Routing\n\u2502   \u2514\u2500\u2500 Response Formatting\n\u251c\u2500\u2500 Core Services\n\u2502   \u251c\u2500\u2500 User Service (Node.js)\n\u2502   \u251c\u2500\u2500 Job Service (Node.js)\n\u2502   \u251c\u2500\u2500 CV Service (Node.js)\n\u2502   \u251c\u2500\u2500 Notification Service (Node.js)\n\u2502   \u2514\u2500\u2500 Analytics Service (Node.js)\n\u251c\u2500\u2500 AI/ML Services\n\u2502   \u251c\u2500\u2500 AI Agent Service (Python)\n\u2502   \u251c\u2500\u2500 Scraper Service (Python)\n\u2502   \u251c\u2500\u2500 NLP Service (Python)\n\u2502   \u2514\u2500\u2500 Recommendation Engine (Python)\n\u2514\u2500\u2500 External Integrations\n    \u251c\u2500\u2500 Firebase Auth\n    \u251c\u2500\u2500 MongoDB Atlas\n    \u251c\u2500\u2500 Redis Cache\n    \u2514\u2500\u2500 Cloud Storage\n</code></pre>"},{"location":"architecture/backend/#service-architecture","title":"Service Architecture","text":""},{"location":"architecture/backend/#1-api-gateway","title":"1. API Gateway","text":"<pre><code>backend/api-gateway/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 middleware/         # Custom middleware\n\u2502   \u2502   \u251c\u2500\u2500 auth.js        # Authentication middleware\n\u2502   \u2502   \u251c\u2500\u2500 rateLimit.js   # Rate limiting\n\u2502   \u2502   \u251c\u2500\u2500 validation.js  # Request validation\n\u2502   \u2502   \u2514\u2500\u2500 cors.js        # CORS configuration\n\u2502   \u251c\u2500\u2500 routes/            # Route definitions\n\u2502   \u2502   \u251c\u2500\u2500 auth.js        # Auth routes\n\u2502   \u2502   \u251c\u2500\u2500 users.js       # User routes\n\u2502   \u2502   \u251c\u2500\u2500 jobs.js        # Job routes\n\u2502   \u2502   \u251c\u2500\u2500 cv.js          # CV routes\n\u2502   \u2502   \u2514\u2500\u2500 agent.js       # AI agent routes\n\u2502   \u251c\u2500\u2500 utils/             # Utility functions\n\u2502   \u2502   \u251c\u2500\u2500 logger.js      # Logging utility\n\u2502   \u2502   \u251c\u2500\u2500 response.js    # Response formatter\n\u2502   \u2502   \u2514\u2500\u2500 errors.js      # Error handling\n\u2502   \u251c\u2500\u2500 config/            # Configuration\n\u2502   \u2502   \u251c\u2500\u2500 database.js    # DB configuration\n\u2502   \u2502   \u251c\u2500\u2500 redis.js       # Redis configuration\n\u2502   \u2502   \u2514\u2500\u2500 services.js    # Service endpoints\n\u2502   \u2514\u2500\u2500 app.js             # Main application\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"architecture/backend/#2-user-service","title":"2. User Service","text":"<pre><code>backend/user-service/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/       # Request handlers\n\u2502   \u2502   \u251c\u2500\u2500 authController.js\n\u2502   \u2502   \u251c\u2500\u2500 profileController.js\n\u2502   \u2502   \u2514\u2500\u2500 settingsController.js\n\u2502   \u251c\u2500\u2500 models/            # Data models\n\u2502   \u2502   \u251c\u2500\u2500 User.js\n\u2502   \u2502   \u251c\u2500\u2500 Profile.js\n\u2502   \u2502   \u2514\u2500\u2500 Settings.js\n\u2502   \u251c\u2500\u2500 services/          # Business logic\n\u2502   \u2502   \u251c\u2500\u2500 authService.js\n\u2502   \u2502   \u251c\u2500\u2500 profileService.js\n\u2502   \u2502   \u2514\u2500\u2500 emailService.js\n\u2502   \u251c\u2500\u2500 middleware/        # Service middleware\n\u2502   \u2502   \u251c\u2500\u2500 validation.js\n\u2502   \u2502   \u2514\u2500\u2500 authorization.js\n\u2502   \u251c\u2500\u2500 routes/            # Route definitions\n\u2502   \u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u2502   \u251c\u2500\u2500 profile.js\n\u2502   \u2502   \u2514\u2500\u2500 settings.js\n\u2502   \u251c\u2500\u2500 utils/             # Utilities\n\u2502   \u2502   \u251c\u2500\u2500 hash.js\n\u2502   \u2502   \u251c\u2500\u2500 token.js\n\u2502   \u2502   \u2514\u2500\u2500 validator.js\n\u2502   \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 tests/                 # Unit tests\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"architecture/backend/#3-job-service","title":"3. Job Service","text":"<pre><code>backend/job-service/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u251c\u2500\u2500 jobController.js\n\u2502   \u2502   \u251c\u2500\u2500 applicationController.js\n\u2502   \u2502   \u2514\u2500\u2500 searchController.js\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 Job.js\n\u2502   \u2502   \u251c\u2500\u2500 Application.js\n\u2502   \u2502   \u2514\u2500\u2500 Company.js\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 jobService.js\n\u2502   \u2502   \u251c\u2500\u2500 searchService.js\n\u2502   \u2502   \u251c\u2500\u2500 applicationService.js\n\u2502   \u2502   \u2514\u2500\u2500 matchingService.js\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u251c\u2500\u2500 jobs.js\n\u2502   \u2502   \u251c\u2500\u2500 applications.js\n\u2502   \u2502   \u2514\u2500\u2500 search.js\n\u2502   \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"architecture/backend/#4-cv-service","title":"4. CV Service","text":"<pre><code>backend/cv-service/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u251c\u2500\u2500 cvController.js\n\u2502   \u2502   \u251c\u2500\u2500 templateController.js\n\u2502   \u2502   \u2514\u2500\u2500 exportController.js\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 CV.js\n\u2502   \u2502   \u251c\u2500\u2500 Template.js\n\u2502   \u2502   \u2514\u2500\u2500 Section.js\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u251c\u2500\u2500 cvService.js\n\u2502   \u2502   \u251c\u2500\u2500 pdfService.js\n\u2502   \u2502   \u251c\u2500\u2500 templateService.js\n\u2502   \u2502   \u2514\u2500\u2500 skillsService.js\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u251c\u2500\u2500 cv.js\n\u2502   \u2502   \u251c\u2500\u2500 templates.js\n\u2502   \u2502   \u2514\u2500\u2500 export.js\n\u2502   \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 templates/             # CV templates\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"architecture/backend/#5-ai-agent-service-python","title":"5. AI Agent Service (Python)","text":"<pre><code>backend/ai-service/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 api/               # FastAPI application\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 agent.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 matching.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 recommendations.py\n\u2502   \u2502   \u2514\u2500\u2500 middleware/\n\u2502   \u2502       \u251c\u2500\u2500 auth.py\n\u2502   \u2502       \u2514\u2500\u2500 logging.py\n\u2502   \u251c\u2500\u2500 services/          # Business logic\n\u2502   \u2502   \u251c\u2500\u2500 agent_service.py\n\u2502   \u2502   \u251c\u2500\u2500 nlp_service.py\n\u2502   \u2502   \u251c\u2500\u2500 matching_service.py\n\u2502   \u2502   \u2514\u2500\u2500 recommendation_service.py\n\u2502   \u251c\u2500\u2500 models/            # ML models\n\u2502   \u2502   \u251c\u2500\u2500 job_matcher.py\n\u2502   \u2502   \u251c\u2500\u2500 cv_analyzer.py\n\u2502   \u2502   \u2514\u2500\u2500 skill_extractor.py\n\u2502   \u251c\u2500\u2500 utils/             # Utilities\n\u2502   \u2502   \u251c\u2500\u2500 text_processing.py\n\u2502   \u2502   \u251c\u2500\u2500 feature_extraction.py\n\u2502   \u2502   \u2514\u2500\u2500 similarity.py\n\u2502   \u2514\u2500\u2500 config/            # Configuration\n\u2502       \u251c\u2500\u2500 settings.py\n\u2502       \u2514\u2500\u2500 database.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"architecture/backend/#database-design","title":"Database Design","text":""},{"location":"architecture/backend/#mongodb-schema-design","title":"MongoDB Schema Design","text":""},{"location":"architecture/backend/#user-collection","title":"User Collection","text":"<pre><code>{\n  _id: ObjectId,\n  email: String,\n  password: String, // hashed\n  userType: String, // 'seeker' | 'recruiter'\n  profile: {\n    firstName: String,\n    lastName: String,\n    phone: String,\n    location: {\n      city: String,\n      country: String,\n      coordinates: [Number] // [longitude, latitude]\n    },\n    avatar: String, // URL\n    bio: String,\n    linkedinProfile: String,\n    websiteUrl: String\n  },\n  preferences: {\n    jobAlerts: Boolean,\n    autoApply: Boolean,\n    emailNotifications: Boolean,\n    jobTypes: [String], // ['full-time', 'part-time', 'contract']\n    salaryRange: {\n      min: Number,\n      max: Number,\n      currency: String\n    },\n    locations: [String],\n    remoteWork: Boolean\n  },\n  createdAt: Date,\n  updatedAt: Date,\n  lastLoginAt: Date,\n  isActive: Boolean,\n  emailVerified: Boolean\n}\n</code></pre>"},{"location":"architecture/backend/#job-collection","title":"Job Collection","text":"<pre><code>{\n  _id: ObjectId,\n  title: String,\n  company: {\n    name: String,\n    logo: String,\n    website: String,\n    size: String, // 'startup', 'small', 'medium', 'large'\n    industry: String\n  },\n  description: String,\n  requirements: [String],\n  responsibilities: [String],\n  benefits: [String],\n  jobType: String, // 'full-time', 'part-time', 'contract', 'internship'\n  workType: String, // 'remote', 'on-site', 'hybrid'\n  location: {\n    city: String,\n    country: String,\n    coordinates: [Number]\n  },\n  salary: {\n    min: Number,\n    max: Number,\n    currency: String,\n    period: String // 'annually', 'monthly', 'hourly'\n  },\n  skills: [String],\n  experienceLevel: String, // 'entry', 'mid', 'senior', 'lead'\n  postedBy: ObjectId, // User ID (recruiter)\n  applicationDeadline: Date,\n  isActive: Boolean,\n  externalUrl: String, // for scraped jobs\n  source: String, // 'internal', 'linkedin', 'indeed', 'glassdoor'\n  applications: [{\n    applicantId: ObjectId,\n    appliedAt: Date,\n    status: String, // 'pending', 'reviewed', 'interviewed', 'rejected', 'hired'\n    cvId: ObjectId,\n    coverLetter: String,\n    autoApplied: Boolean\n  }],\n  createdAt: Date,\n  updatedAt: Date\n}\n</code></pre>"},{"location":"architecture/backend/#cv-collection","title":"CV Collection","text":"<pre><code>{\n  _id: ObjectId,\n  userId: ObjectId,\n  name: String,\n  templateId: ObjectId,\n  personalInfo: {\n    firstName: String,\n    lastName: String,\n    email: String,\n    phone: String,\n    location: String,\n    linkedinProfile: String,\n    websiteUrl: String,\n    summary: String\n  },\n  experience: [{\n    company: String,\n    position: String,\n    startDate: Date,\n    endDate: Date,\n    current: Boolean,\n    description: String,\n    achievements: [String]\n  }],\n  education: [{\n    institution: String,\n    degree: String,\n    field: String,\n    startDate: Date,\n    endDate: Date,\n    gpa: Number,\n    description: String\n  }],\n  skills: [{\n    name: String,\n    level: String, // 'beginner', 'intermediate', 'advanced', 'expert'\n    category: String // 'technical', 'soft', 'language'\n  }],\n  projects: [{\n    name: String,\n    description: String,\n    technologies: [String],\n    url: String,\n    startDate: Date,\n    endDate: Date\n  }],\n  certifications: [{\n    name: String,\n    issuer: String,\n    issueDate: Date,\n    expiryDate: Date,\n    credentialId: String,\n    url: String\n  }],\n  languages: [{\n    name: String,\n    proficiency: String // 'basic', 'conversational', 'fluent', 'native'\n  }],\n  isDefault: Boolean,\n  pdfUrl: String, // Generated PDF URL\n  version: Number,\n  createdAt: Date,\n  updatedAt: Date\n}\n</code></pre>"},{"location":"architecture/backend/#firebase-integration","title":"Firebase Integration","text":""},{"location":"architecture/backend/#authentication-setup","title":"Authentication Setup","text":"<pre><code>// config/firebase.js\nimport { initializeApp } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID\n}\n\nconst app = initializeApp(firebaseConfig)\nexport const auth = getAuth(app)\nexport const db = getFirestore(app)\n</code></pre>"},{"location":"architecture/backend/#firebase-admin-setup","title":"Firebase Admin Setup","text":"<pre><code>// config/firebaseAdmin.js\nimport admin from 'firebase-admin'\n\nconst serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT)\n\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount),\n    databaseURL: process.env.FIREBASE_DATABASE_URL\n  })\n}\n\nexport const adminAuth = admin.auth()\nexport const adminDb = admin.firestore()\n</code></pre>"},{"location":"architecture/backend/#api-design","title":"API Design","text":""},{"location":"architecture/backend/#restful-api-structure","title":"RESTful API Structure","text":"<pre><code>/api/v1/\n\u251c\u2500\u2500 /auth\n\u2502   \u251c\u2500\u2500 POST   /register\n\u2502   \u251c\u2500\u2500 POST   /login\n\u2502   \u251c\u2500\u2500 POST   /logout\n\u2502   \u251c\u2500\u2500 POST   /refresh\n\u2502   \u251c\u2500\u2500 POST   /forgot-password\n\u2502   \u2514\u2500\u2500 POST   /reset-password\n\u251c\u2500\u2500 /users\n\u2502   \u251c\u2500\u2500 GET    /profile\n\u2502   \u251c\u2500\u2500 PUT    /profile\n\u2502   \u251c\u2500\u2500 DELETE /account\n\u2502   \u251c\u2500\u2500 GET    /preferences\n\u2502   \u251c\u2500\u2500 PUT    /preferences\n\u2502   \u2514\u2500\u2500 POST   /upload-avatar\n\u251c\u2500\u2500 /jobs\n\u2502   \u251c\u2500\u2500 GET    /              # List jobs with filters\n\u2502   \u251c\u2500\u2500 POST   /              # Create job (recruiter)\n\u2502   \u251c\u2500\u2500 GET    /:id           # Get job details\n\u2502   \u251c\u2500\u2500 PUT    /:id           # Update job (recruiter)\n\u2502   \u251c\u2500\u2500 DELETE /:id           # Delete job (recruiter)\n\u2502   \u251c\u2500\u2500 POST   /:id/apply     # Apply to job\n\u2502   \u251c\u2500\u2500 GET    /search        # Search jobs\n\u2502   \u2514\u2500\u2500 GET    /recommendations # Get recommended jobs\n\u251c\u2500\u2500 /cv\n\u2502   \u251c\u2500\u2500 GET    /              # List user's CVs\n\u2502   \u251c\u2500\u2500 POST   /              # Create new CV\n\u2502   \u251c\u2500\u2500 GET    /:id           # Get CV details\n\u2502   \u251c\u2500\u2500 PUT    /:id           # Update CV\n\u2502   \u251c\u2500\u2500 DELETE /:id           # Delete CV\n\u2502   \u251c\u2500\u2500 POST   /:id/export    # Export CV to PDF\n\u2502   \u2514\u2500\u2500 GET    /templates     # Get CV templates\n\u251c\u2500\u2500 /agent\n\u2502   \u251c\u2500\u2500 POST   /chat          # Chat with AI agent\n\u2502   \u251c\u2500\u2500 POST   /analyze-cv    # Analyze CV\n\u2502   \u251c\u2500\u2500 POST   /job-match     # Match jobs to CV\n\u2502   \u251c\u2500\u2500 POST   /auto-apply    # Auto-apply to jobs\n\u2502   \u2514\u2500\u2500 GET    /applications  # Get auto-applied jobs\n\u2514\u2500\u2500 /applications\n    \u251c\u2500\u2500 GET    /              # List user's applications\n    \u251c\u2500\u2500 GET    /:id           # Get application details\n    \u251c\u2500\u2500 PUT    /:id/status    # Update application status\n    \u2514\u2500\u2500 DELETE /:id           # Withdraw application\n</code></pre>"},{"location":"architecture/backend/#graphql-schema-optional","title":"GraphQL Schema (Optional)","text":"<pre><code>type User {\n  id: ID!\n  email: String!\n  userType: UserType!\n  profile: Profile!\n  preferences: Preferences!\n  cvs: [CV!]!\n  applications: [Application!]!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype Job {\n  id: ID!\n  title: String!\n  company: Company!\n  description: String!\n  requirements: [String!]!\n  jobType: JobType!\n  workType: WorkType!\n  location: Location!\n  salary: Salary\n  skills: [String!]!\n  experienceLevel: ExperienceLevel!\n  applications: [Application!]!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype CV {\n  id: ID!\n  name: String!\n  personalInfo: PersonalInfo!\n  experience: [Experience!]!\n  education: [Education!]!\n  skills: [Skill!]!\n  projects: [Project!]!\n  pdfUrl: String\n  createdAt: DateTime!\n  updatedAt: DateTime!\n}\n\ntype Query {\n  me: User\n  jobs(filters: JobFilters): [Job!]!\n  job(id: ID!): Job\n  cvs: [CV!]!\n  cv(id: ID!): CV\n  recommendations: [Job!]!\n}\n\ntype Mutation {\n  register(input: RegisterInput!): AuthPayload!\n  login(input: LoginInput!): AuthPayload!\n  updateProfile(input: ProfileInput!): User!\n  createJob(input: JobInput!): Job!\n  createCV(input: CVInput!): CV!\n  applyToJob(jobId: ID!, cvId: ID!): Application!\n  autoApplyJobs(cvId: ID!, criteria: JobFilters!): [Application!]!\n}\n</code></pre>"},{"location":"architecture/backend/#service-communication","title":"Service Communication","text":""},{"location":"architecture/backend/#event-driven-architecture","title":"Event-Driven Architecture","text":"<pre><code>// Event Bus Implementation\nclass EventBus {\n  constructor() {\n    this.events = {}\n  }\n\n  emit(eventName, data) {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(callback =&gt; callback(data))\n    }\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = []\n    }\n    this.events[eventName].push(callback)\n  }\n\n  off(eventName, callback) {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(cb =&gt; cb !== callback)\n    }\n  }\n}\n\n// Usage in services\nconst eventBus = new EventBus()\n\n// User service emits events\neventBus.emit('user.registered', { userId, email, userType })\neventBus.emit('user.profileUpdated', { userId, changes })\n\n// Other services listen to events\neventBus.on('user.registered', (data) =&gt; {\n  // Send welcome email\n  emailService.sendWelcomeEmail(data.email)\n})\n\neventBus.on('job.applied', (data) =&gt; {\n  // Update analytics\n  analyticsService.trackApplication(data)\n})\n</code></pre>"},{"location":"architecture/backend/#inter-service-communication","title":"Inter-Service Communication","text":"<pre><code>// Service Registry\nclass ServiceRegistry {\n  constructor() {\n    this.services = new Map()\n  }\n\n  register(serviceName, serviceUrl) {\n    this.services.set(serviceName, serviceUrl)\n  }\n\n  getService(serviceName) {\n    return this.services.get(serviceName)\n  }\n\n  async healthCheck() {\n    const healthStatus = {}\n    for (const [name, url] of this.services) {\n      try {\n        const response = await fetch(`${url}/health`)\n        healthStatus[name] = response.ok ? 'healthy' : 'unhealthy'\n      } catch (error) {\n        healthStatus[name] = 'unreachable'\n      }\n    }\n    return healthStatus\n  }\n}\n\n// API Client for inter-service communication\nclass ApiClient {\n  constructor(baseUrl, options = {}) {\n    this.baseUrl = baseUrl\n    this.options = options\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.options.headers,\n        ...options.headers\n      },\n      ...this.options,\n      ...options\n    }\n\n    const response = await fetch(url, config)\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n\n    return response.json()\n  }\n\n  get(endpoint, options = {}) {\n    return this.request(endpoint, { method: 'GET', ...options })\n  }\n\n  post(endpoint, data, options = {}) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      ...options\n    })\n  }\n}\n</code></pre>"},{"location":"architecture/backend/#caching-strategy","title":"Caching Strategy","text":""},{"location":"architecture/backend/#redis-implementation","title":"Redis Implementation","text":"<pre><code>// Cache Service\nclass CacheService {\n  constructor(redisClient) {\n    this.redis = redisClient\n  }\n\n  async get(key) {\n    try {\n      const value = await this.redis.get(key)\n      return value ? JSON.parse(value) : null\n    } catch (error) {\n      console.error('Cache get error:', error)\n      return null\n    }\n  }\n\n  async set(key, value, ttl = 3600) {\n    try {\n      await this.redis.setex(key, ttl, JSON.stringify(value))\n    } catch (error) {\n      console.error('Cache set error:', error)\n    }\n  }\n\n  async del(key) {\n    try {\n      await this.redis.del(key)\n    } catch (error) {\n      console.error('Cache delete error:', error)\n    }\n  }\n\n  async invalidatePattern(pattern) {\n    try {\n      const keys = await this.redis.keys(pattern)\n      if (keys.length &gt; 0) {\n        await this.redis.del(...keys)\n      }\n    } catch (error) {\n      console.error('Cache invalidation error:', error)\n    }\n  }\n}\n\n// Cache middleware\nconst cacheMiddleware = (ttl = 3600) =&gt; {\n  return async (req, res, next) =&gt; {\n    const key = `cache:${req.method}:${req.originalUrl}`\n\n    try {\n      const cachedResponse = await cacheService.get(key)\n      if (cachedResponse) {\n        return res.json(cachedResponse)\n      }\n\n      // Store original res.json\n      const originalJson = res.json\n      res.json = function(data) {\n        // Cache the response\n        cacheService.set(key, data, ttl)\n        return originalJson.call(this, data)\n      }\n\n      next()\n    } catch (error) {\n      next()\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/backend/#error-handling","title":"Error Handling","text":""},{"location":"architecture/backend/#global-error-handler","title":"Global Error Handler","text":"<pre><code>// Error types\nclass AppError extends Error {\n  constructor(message, statusCode, errorCode = null) {\n    super(message)\n    this.statusCode = statusCode\n    this.errorCode = errorCode\n    this.isOperational = true\n\n    Error.captureStackTrace(this, this.constructor)\n  }\n}\n\nclass ValidationError extends AppError {\n  constructor(message, errors = []) {\n    super(message, 400, 'VALIDATION_ERROR')\n    this.errors = errors\n  }\n}\n\nclass NotFoundError extends AppError {\n  constructor(resource = 'Resource') {\n    super(`${resource} not found`, 404, 'NOT_FOUND')\n  }\n}\n\nclass UnauthorizedError extends AppError {\n  constructor(message = 'Unauthorized') {\n    super(message, 401, 'UNAUTHORIZED')\n  }\n}\n\n// Global error handler middleware\nconst errorHandler = (err, req, res, next) =&gt; {\n  let error = { ...err }\n  error.message = err.message\n\n  // Log error\n  console.error(err)\n\n  // Mongoose bad ObjectId\n  if (err.name === 'CastError') {\n    const message = 'Resource not found'\n    error = new NotFoundError(message)\n  }\n\n  // Mongoose duplicate key\n  if (err.code === 11000) {\n    const message = 'Duplicate field value entered'\n    error = new ValidationError(message)\n  }\n\n  // Mongoose validation error\n  if (err.name === 'ValidationError') {\n    const message = Object.values(err.errors).map(val =&gt; val.message)\n    error = new ValidationError('Validation Error', message)\n  }\n\n  res.status(error.statusCode || 500).json({\n    success: false,\n    error: {\n      message: error.message || 'Server Error',\n      code: error.errorCode,\n      ...(process.env.NODE_ENV === 'development' &amp;&amp; { stack: err.stack })\n    }\n  })\n}\n\nmodule.exports = {\n  AppError,\n  ValidationError,\n  NotFoundError,\n  UnauthorizedError,\n  errorHandler\n}\n</code></pre>"},{"location":"architecture/backend/#security-implementation","title":"Security Implementation","text":""},{"location":"architecture/backend/#authentication-middleware","title":"Authentication Middleware","text":"<pre><code>// JWT middleware\nconst jwt = require('jsonwebtoken')\nconst { UnauthorizedError } = require('../utils/errors')\n\nconst authenticate = async (req, res, next) =&gt; {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '')\n\n    if (!token) {\n      throw new UnauthorizedError('No token provided')\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET)\n    req.user = decoded\n\n    // Verify token with Firebase if needed\n    if (process.env.USE_FIREBASE_AUTH) {\n      const decodedToken = await admin.auth().verifyIdToken(token)\n      req.user = decodedToken\n    }\n\n    next()\n  } catch (error) {\n    throw new UnauthorizedError('Invalid token')\n  }\n}\n\n// Role-based authorization\nconst authorize = (...roles) =&gt; {\n  return (req, res, next) =&gt; {\n    if (!req.user) {\n      throw new UnauthorizedError('Authentication required')\n    }\n\n    if (!roles.includes(req.user.userType)) {\n      throw new UnauthorizedError('Insufficient permissions')\n    }\n\n    next()\n  }\n}\n\nmodule.exports = { authenticate, authorize }\n</code></pre>"},{"location":"architecture/backend/#input-validation","title":"Input Validation","text":"<pre><code>// Validation schemas using Joi\nconst Joi = require('joi')\n\nconst schemas = {\n  register: Joi.object({\n    email: Joi.string().email().required(),\n    password: Joi.string().min(8).required(),\n    userType: Joi.string().valid('seeker', 'recruiter').required(),\n    firstName: Joi.string().min(2).max(50).required(),\n    lastName: Joi.string().min(2).max(50).required()\n  }),\n\n  createJob: Joi.object({\n    title: Joi.string().min(5).max(100).required(),\n    description: Joi.string().min(50).required(),\n    company: Joi.object({\n      name: Joi.string().required(),\n      website: Joi.string().uri().optional()\n    }).required(),\n    jobType: Joi.string().valid('full-time', 'part-time', 'contract', 'internship').required(),\n    location: Joi.object({\n      city: Joi.string().required(),\n      country: Joi.string().required()\n    }).required(),\n    salary: Joi.object({\n      min: Joi.number().positive().required(),\n      max: Joi.number().positive().required(),\n      currency: Joi.string().length(3).required()\n    }).optional()\n  })\n}\n\n// Validation middleware\nconst validate = (schema) =&gt; {\n  return (req, res, next) =&gt; {\n    const { error } = schema.validate(req.body)\n    if (error) {\n      const errors = error.details.map(detail =&gt; detail.message)\n      throw new ValidationError('Validation failed', errors)\n    }\n    next()\n  }\n}\n\nmodule.exports = { schemas, validate }\n</code></pre>"},{"location":"architecture/backend/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"architecture/backend/#logging-setup","title":"Logging Setup","text":"<pre><code>// Logger configuration\nconst winston = require('winston')\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: process.env.SERVICE_NAME },\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' })\n  ]\n})\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }))\n}\n\n// Request logging middleware\nconst requestLogger = (req, res, next) =&gt; {\n  const start = Date.now()\n\n  res.on('finish', () =&gt; {\n    const duration = Date.now() - start\n    logger.info({\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration: `${duration}ms`,\n      userAgent: req.get('User-Agent'),\n      ip: req.ip\n    })\n  })\n\n  next()\n}\n\nmodule.exports = { logger, requestLogger }\n</code></pre>"},{"location":"architecture/frontend/","title":"Frontend Architecture","text":""},{"location":"architecture/frontend/#overview","title":"Overview","text":"<p>The frontend is built using React with Next.js framework, providing server-side rendering, static site generation, and excellent performance out of the box.</p>"},{"location":"architecture/frontend/#architecture-pattern","title":"Architecture Pattern","text":""},{"location":"architecture/frontend/#component-based-architecture","title":"Component-Based Architecture","text":"<pre><code>Application\n\u251c\u2500\u2500 Layout Components\n\u2502   \u251c\u2500\u2500 Header\n\u2502   \u251c\u2500\u2500 Sidebar\n\u2502   \u251c\u2500\u2500 Footer\n\u2502   \u2514\u2500\u2500 Navigation\n\u251c\u2500\u2500 Page Components\n\u2502   \u251c\u2500\u2500 Dashboard\n\u2502   \u251c\u2500\u2500 Jobs\n\u2502   \u251c\u2500\u2500 CV Builder\n\u2502   \u2514\u2500\u2500 Profile\n\u251c\u2500\u2500 Feature Components\n\u2502   \u251c\u2500\u2500 JobSearch\n\u2502   \u251c\u2500\u2500 CVEditor\n\u2502   \u251c\u2500\u2500 ApplicationTracker\n\u2502   \u2514\u2500\u2500 AgentInterface\n\u2514\u2500\u2500 UI Components\n    \u251c\u2500\u2500 Buttons\n    \u251c\u2500\u2500 Forms\n    \u251c\u2500\u2500 Modals\n    \u2514\u2500\u2500 Inputs\n</code></pre>"},{"location":"architecture/frontend/#folder-structure","title":"Folder Structure","text":"<pre><code>frontend/\n\u251c\u2500\u2500 public/                 # Static assets\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 icons/\n\u2502   \u2514\u2500\u2500 manifest.json\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 pages/             # Next.js pages (routing)\n\u2502   \u2502   \u251c\u2500\u2500 api/           # API routes\n\u2502   \u2502   \u251c\u2500\u2500 auth/          # Authentication pages\n\u2502   \u2502   \u251c\u2500\u2500 dashboard/     # Dashboard pages\n\u2502   \u2502   \u251c\u2500\u2500 jobs/          # Job-related pages\n\u2502   \u2502   \u251c\u2500\u2500 cv/            # CV builder pages\n\u2502   \u2502   \u2514\u2500\u2500 _app.js        # App wrapper\n\u2502   \u251c\u2500\u2500 components/        # React components\n\u2502   \u2502   \u251c\u2500\u2500 common/        # Shared components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Header/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Footer/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Modal/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Button/\n\u2502   \u2502   \u251c\u2500\u2500 forms/         # Form components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 AuthForm/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 JobForm/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 CVForm/\n\u2502   \u2502   \u251c\u2500\u2500 features/      # Feature-specific components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 JobSearch/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CVBuilder/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 AgentChat/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Dashboard/\n\u2502   \u2502   \u2514\u2500\u2500 layout/        # Layout components\n\u2502   \u2502       \u251c\u2500\u2500 MainLayout/\n\u2502   \u2502       \u251c\u2500\u2500 AuthLayout/\n\u2502   \u2502       \u2514\u2500\u2500 DashboardLayout/\n\u2502   \u251c\u2500\u2500 hooks/             # Custom React hooks\n\u2502   \u2502   \u251c\u2500\u2500 useAuth.js\n\u2502   \u2502   \u251c\u2500\u2500 useJobs.js\n\u2502   \u2502   \u251c\u2500\u2500 useCV.js\n\u2502   \u2502   \u2514\u2500\u2500 useAgent.js\n\u2502   \u251c\u2500\u2500 services/          # API service layer\n\u2502   \u2502   \u251c\u2500\u2500 api.js         # Base API configuration\n\u2502   \u2502   \u251c\u2500\u2500 auth.js        # Authentication services\n\u2502   \u2502   \u251c\u2500\u2500 jobs.js        # Job-related services\n\u2502   \u2502   \u251c\u2500\u2500 cv.js          # CV services\n\u2502   \u2502   \u2514\u2500\u2500 agent.js       # AI agent services\n\u2502   \u251c\u2500\u2500 store/             # State management\n\u2502   \u2502   \u251c\u2500\u2500 index.js       # Store configuration\n\u2502   \u2502   \u251c\u2500\u2500 slices/        # Redux slices\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 authSlice.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 jobsSlice.js\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 cvSlice.js\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 agentSlice.js\n\u2502   \u2502   \u2514\u2500\u2500 providers/     # Context providers\n\u2502   \u251c\u2500\u2500 utils/             # Utility functions\n\u2502   \u2502   \u251c\u2500\u2500 helpers.js\n\u2502   \u2502   \u251c\u2500\u2500 constants.js\n\u2502   \u2502   \u251c\u2500\u2500 validators.js\n\u2502   \u2502   \u2514\u2500\u2500 formatters.js\n\u2502   \u251c\u2500\u2500 styles/            # Styling\n\u2502   \u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2514\u2500\u2500 pages/\n\u2502   \u2514\u2500\u2500 types/             # TypeScript type definitions\n\u2502       \u251c\u2500\u2500 auth.ts\n\u2502       \u251c\u2500\u2500 jobs.ts\n\u2502       \u251c\u2500\u2500 cv.ts\n\u2502       \u2514\u2500\u2500 common.ts\n\u251c\u2500\u2500 .env.local             # Environment variables\n\u251c\u2500\u2500 next.config.js         # Next.js configuration\n\u251c\u2500\u2500 tailwind.config.js     # Tailwind CSS configuration\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"architecture/frontend/#state-management-strategy","title":"State Management Strategy","text":""},{"location":"architecture/frontend/#redux-toolkit-setup","title":"Redux Toolkit Setup","text":"<pre><code>// store/index.js\nimport { configureStore } from '@reduxjs/toolkit'\nimport authSlice from './slices/authSlice'\nimport jobsSlice from './slices/jobsSlice'\nimport cvSlice from './slices/cvSlice'\nimport agentSlice from './slices/agentSlice'\n\nexport const store = configureStore({\n  reducer: {\n    auth: authSlice,\n    jobs: jobsSlice,\n    cv: cvSlice,\n    agent: agentSlice,\n  },\n})\n</code></pre>"},{"location":"architecture/frontend/#slice-structure-example","title":"Slice Structure Example","text":"<pre><code>// store/slices/authSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { authService } from '../../services/auth'\n\nexport const loginUser = createAsyncThunk(\n  'auth/loginUser',\n  async (credentials, { rejectWithValue }) =&gt; {\n    try {\n      const response = await authService.login(credentials)\n      return response.data\n    } catch (error) {\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    token: null,\n    isLoading: false,\n    error: null,\n  },\n  reducers: {\n    logout: (state) =&gt; {\n      state.user = null\n      state.token = null\n    },\n    clearError: (state) =&gt; {\n      state.error = null\n    },\n  },\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(loginUser.pending, (state) =&gt; {\n        state.isLoading = true\n        state.error = null\n      })\n      .addCase(loginUser.fulfilled, (state, action) =&gt; {\n        state.isLoading = false\n        state.user = action.payload.user\n        state.token = action.payload.token\n      })\n      .addCase(loginUser.rejected, (state, action) =&gt; {\n        state.isLoading = false\n        state.error = action.payload\n      })\n  },\n})\n\nexport const { logout, clearError } = authSlice.actions\nexport default authSlice.reducer\n</code></pre>"},{"location":"architecture/frontend/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/frontend/#higher-order-components-hocs","title":"Higher-Order Components (HOCs)","text":"<pre><code>// components/hoc/withAuth.js\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport { useSelector } from 'react-redux'\n\nconst withAuth = (WrappedComponent) =&gt; {\n  return (props) =&gt; {\n    const router = useRouter()\n    const { user, isLoading } = useSelector((state) =&gt; state.auth)\n\n    useEffect(() =&gt; {\n      if (!isLoading &amp;&amp; !user) {\n        router.push('/auth/login')\n      }\n    }, [user, isLoading, router])\n\n    if (isLoading) {\n      return &lt;div&gt;Loading...&lt;/div&gt;\n    }\n\n    if (!user) {\n      return null\n    }\n\n    return &lt;WrappedComponent {...props} /&gt;\n  }\n}\n\nexport default withAuth\n</code></pre>"},{"location":"architecture/frontend/#custom-hooks","title":"Custom Hooks","text":"<pre><code>// hooks/useAuth.js\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loginUser, logout } from '../store/slices/authSlice'\n\nexport const useAuth = () =&gt; {\n  const dispatch = useDispatch()\n  const { user, token, isLoading, error } = useSelector((state) =&gt; state.auth)\n\n  const login = async (credentials) =&gt; {\n    return dispatch(loginUser(credentials))\n  }\n\n  const handleLogout = () =&gt; {\n    dispatch(logout())\n    localStorage.removeItem('token')\n  }\n\n  return {\n    user,\n    token,\n    isLoading,\n    error,\n    login,\n    logout: handleLogout,\n    isAuthenticated: !!user,\n  }\n}\n</code></pre>"},{"location":"architecture/frontend/#routing-strategy","title":"Routing Strategy","text":""},{"location":"architecture/frontend/#nextjs-file-based-routing","title":"Next.js File-based Routing","text":"<pre><code>pages/\n\u251c\u2500\u2500 index.js                 # Home page (/)\n\u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 login.js            # Login page (/auth/login)\n\u2502   \u251c\u2500\u2500 register.js         # Register page (/auth/register)\n\u2502   \u2514\u2500\u2500 forgot-password.js  # Password reset (/auth/forgot-password)\n\u251c\u2500\u2500 dashboard/\n\u2502   \u251c\u2500\u2500 index.js            # Dashboard home (/dashboard)\n\u2502   \u251c\u2500\u2500 seeker.js           # Job seeker dashboard (/dashboard/seeker)\n\u2502   \u2514\u2500\u2500 recruiter.js        # Recruiter dashboard (/dashboard/recruiter)\n\u251c\u2500\u2500 jobs/\n\u2502   \u251c\u2500\u2500 index.js            # Job listings (/jobs)\n\u2502   \u251c\u2500\u2500 [id].js             # Job details (/jobs/[id])\n\u2502   \u251c\u2500\u2500 search.js           # Job search (/jobs/search)\n\u2502   \u2514\u2500\u2500 apply/\n\u2502       \u2514\u2500\u2500 [id].js         # Job application (/jobs/apply/[id])\n\u251c\u2500\u2500 cv/\n\u2502   \u251c\u2500\u2500 index.js            # CV overview (/cv)\n\u2502   \u251c\u2500\u2500 builder.js          # CV builder (/cv/builder)\n\u2502   \u251c\u2500\u2500 templates.js        # CV templates (/cv/templates)\n\u2502   \u2514\u2500\u2500 [id]/\n\u2502       \u251c\u2500\u2500 edit.js         # Edit CV (/cv/[id]/edit)\n\u2502       \u2514\u2500\u2500 view.js         # View CV (/cv/[id]/view)\n\u251c\u2500\u2500 agent/\n\u2502   \u251c\u2500\u2500 index.js            # Agent interface (/agent)\n\u2502   \u251c\u2500\u2500 chat.js             # Chat with agent (/agent/chat)\n\u2502   \u2514\u2500\u2500 applications.js     # Auto-applied jobs (/agent/applications)\n\u2514\u2500\u2500 api/                    # API routes\n    \u251c\u2500\u2500 auth/\n    \u251c\u2500\u2500 jobs/\n    \u251c\u2500\u2500 cv/\n    \u2514\u2500\u2500 agent/\n</code></pre>"},{"location":"architecture/frontend/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/frontend/#code-splitting","title":"Code Splitting","text":"<pre><code>// Dynamic imports for large components\nimport dynamic from 'next/dynamic'\n\nconst CVBuilder = dynamic(() =&gt; import('../components/features/CVBuilder'), {\n  loading: () =&gt; &lt;p&gt;Loading CV Builder...&lt;/p&gt;,\n  ssr: false\n})\n\nconst Dashboard = dynamic(() =&gt; import('../components/features/Dashboard'), {\n  loading: () =&gt; &lt;p&gt;Loading Dashboard...&lt;/p&gt;\n})\n</code></pre>"},{"location":"architecture/frontend/#image-optimization","title":"Image Optimization","text":"<pre><code>// Using Next.js Image component\nimport Image from 'next/image'\n\nconst ProfileImage = ({ src, alt }) =&gt; (\n  &lt;Image\n    src={src}\n    alt={alt}\n    width={200}\n    height={200}\n    priority={true}\n    placeholder=\"blur\"\n    blurDataURL=\"data:image/jpeg;base64,...\"\n  /&gt;\n)\n</code></pre>"},{"location":"architecture/frontend/#caching-strategy","title":"Caching Strategy","text":"<pre><code>// API caching with SWR\nimport useSWR from 'swr'\n\nconst useJobs = (filters) =&gt; {\n  const { data, error } = useSWR(\n    filters ? ['jobs', filters] : null,\n    () =&gt; jobsService.getJobs(filters),\n    {\n      revalidateOnFocus: false,\n      dedupingInterval: 60000, // 1 minute\n    }\n  )\n\n  return {\n    jobs: data,\n    isLoading: !error &amp;&amp; !data,\n    isError: error\n  }\n}\n</code></pre>"},{"location":"architecture/frontend/#styling-architecture","title":"Styling Architecture","text":""},{"location":"architecture/frontend/#tailwind-css-configuration","title":"Tailwind CSS Configuration","text":"<pre><code>// tailwind.config.js\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx}',\n    './src/components/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          500: '#3b82f6',\n          900: '#1e3a8a',\n        },\n        secondary: {\n          50: '#f9fafb',\n          500: '#6b7280',\n          900: '#111827',\n        }\n      },\n      fontFamily: {\n        sans: ['Inter', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}\n</code></pre>"},{"location":"architecture/frontend/#component-styling-pattern","title":"Component Styling Pattern","text":"<pre><code>// Using CSS Modules with Tailwind\nimport styles from './Button.module.css'\nimport clsx from 'clsx'\n\nconst Button = ({ variant = 'primary', size = 'md', children, ...props }) =&gt; {\n  const baseClasses = 'font-medium rounded-lg focus:outline-none focus:ring-2'\n\n  const variantClasses = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',\n  }\n\n  const sizeClasses = {\n    sm: 'px-3 py-2 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-3 text-lg',\n  }\n\n  return (\n    &lt;button\n      className={clsx(\n        baseClasses,\n        variantClasses[variant],\n        sizeClasses[size]\n      )}\n      {...props}\n    &gt;\n      {children}\n    &lt;/button&gt;\n  )\n}\n</code></pre>"},{"location":"architecture/frontend/#testing-strategy","title":"Testing Strategy","text":""},{"location":"architecture/frontend/#unit-testing-setup","title":"Unit Testing Setup","text":"<pre><code>// __tests__/components/Button.test.js\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { Button } from '../src/components/common/Button'\n\ndescribe('Button Component', () =&gt; {\n  test('renders button with correct text', () =&gt; {\n    render(&lt;Button&gt;Click me&lt;/Button&gt;)\n    expect(screen.getByRole('button')).toHaveTextContent('Click me')\n  })\n\n  test('calls onClick handler when clicked', () =&gt; {\n    const handleClick = jest.fn()\n    render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;)\n\n    fireEvent.click(screen.getByRole('button'))\n    expect(handleClick).toHaveBeenCalledTimes(1)\n  })\n})\n</code></pre>"},{"location":"architecture/frontend/#integration-testing","title":"Integration Testing","text":"<pre><code>// __tests__/pages/login.test.js\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { Provider } from 'react-redux'\nimport { store } from '../src/store'\nimport LoginPage from '../src/pages/auth/login'\n\nconst renderWithRedux = (component) =&gt; {\n  return render(\n    &lt;Provider store={store}&gt;\n      {component}\n    &lt;/Provider&gt;\n  )\n}\n\ndescribe('Login Page', () =&gt; {\n  test('submits form with correct credentials', async () =&gt; {\n    renderWithRedux(&lt;LoginPage /&gt;)\n\n    fireEvent.change(screen.getByLabelText(/email/i), {\n      target: { value: 'test@example.com' }\n    })\n\n    fireEvent.change(screen.getByLabelText(/password/i), {\n      target: { value: 'password123' }\n    })\n\n    fireEvent.click(screen.getByRole('button', { name: /login/i }))\n\n    await waitFor(() =&gt; {\n      expect(screen.getByText(/dashboard/i)).toBeInTheDocument()\n    })\n  })\n})\n</code></pre>"},{"location":"architecture/frontend/#deployment-configuration","title":"Deployment Configuration","text":""},{"location":"architecture/frontend/#nextjs-configuration","title":"Next.js Configuration","text":"<pre><code>// next.config.js\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n  images: {\n    domains: ['localhost', 'api.example.com', 's3.amazonaws.com'],\n  },\n  env: {\n    CUSTOM_KEY: process.env.CUSTOM_KEY,\n  },\n  async rewrites() {\n    return [\n      {\n        source: '/api/:path*',\n        destination: `${process.env.API_BASE_URL}/:path*`,\n      },\n    ]\n  },\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n        ],\n      },\n    ]\n  },\n}\n\nmodule.exports = nextConfig\n</code></pre>"},{"location":"architecture/frontend/#build-optimization","title":"Build Optimization","text":"<pre><code>{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"test\": \"jest --watch\",\n    \"test:ci\": \"jest --ci --coverage\",\n    \"analyze\": \"cross-env ANALYZE=true next build\"\n  }\n}\n</code></pre>"},{"location":"architecture/workflow/","title":"Workflow Architecture with n8n","text":""},{"location":"architecture/workflow/#overview","title":"Overview","text":"<p>The workflow automation system using n8n handles complex business processes, data synchronization, and automated tasks across the platform. This includes job scraping, application processing, notifications, and analytics.</p>"},{"location":"architecture/workflow/#n8n-architecture","title":"n8n Architecture","text":""},{"location":"architecture/workflow/#workflow-engine-structure","title":"Workflow Engine Structure","text":"<pre><code>Workflow Engine (n8n)\n\u251c\u2500\u2500 Core Workflows\n\u2502   \u251c\u2500\u2500 Job Scraping Workflow\n\u2502   \u251c\u2500\u2500 Application Processing\n\u2502   \u251c\u2500\u2500 Notification System\n\u2502   \u251c\u2500\u2500 Data Synchronization\n\u2502   \u2514\u2500\u2500 Analytics Pipeline\n\u251c\u2500\u2500 External Integrations\n\u2502   \u251c\u2500\u2500 LinkedIn API\n\u2502   \u251c\u2500\u2500 Indeed Scraper\n\u2502   \u251c\u2500\u2500 Glassdoor Integration\n\u2502   \u251c\u2500\u2500 Email Services\n\u2502   \u2514\u2500\u2500 SMS Providers\n\u251c\u2500\u2500 Internal Services\n\u2502   \u251c\u2500\u2500 Database Operations\n\u2502   \u251c\u2500\u2500 File Processing\n\u2502   \u251c\u2500\u2500 AI Service Calls\n\u2502   \u2514\u2500\u2500 API Endpoints\n\u2514\u2500\u2500 Monitoring &amp; Alerts\n    \u251c\u2500\u2500 Workflow Health\n    \u251c\u2500\u2500 Error Handling\n    \u251c\u2500\u2500 Performance Metrics\n    \u2514\u2500\u2500 Audit Logs\n</code></pre>"},{"location":"architecture/workflow/#workflow-design-patterns","title":"Workflow Design Patterns","text":""},{"location":"architecture/workflow/#1-job-scraping-workflow","title":"1. Job Scraping Workflow","text":"<pre><code>workflows/job-scraping/\n\u251c\u2500\u2500 linkedin-scraper.json\n\u251c\u2500\u2500 indeed-scraper.json\n\u251c\u2500\u2500 glassdoor-scraper.json\n\u251c\u2500\u2500 job-aggregation.json\n\u2514\u2500\u2500 data-validation.json\n</code></pre>"},{"location":"architecture/workflow/#linkedin-job-scraping-workflow","title":"LinkedIn Job Scraping Workflow","text":"<pre><code>{\n  \"name\": \"LinkedIn Job Scraper\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"hour\": 6,\n              \"minute\": 0\n            },\n            {\n              \"hour\": 12,\n              \"minute\": 0\n            },\n            {\n              \"hour\": 18,\n              \"minute\": 0\n            }\n          ]\n        }\n      },\n      \"name\": \"Schedule Trigger\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [250, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://www.linkedin.com/jobs/search\",\n        \"responseFormat\": \"json\",\n        \"options\": {\n          \"headers\": {\n            \"User-Agent\": \"Mozilla/5.0 (compatible; JobBot/1.0)\"\n          }\n        }\n      },\n      \"name\": \"Fetch LinkedIn Jobs\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [450, 300]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Extract job data from LinkedIn response\\nconst jobs = [];\\nconst htmlContent = items[0].json.data;\\n\\n// Parse HTML and extract job listings\\nconst jobElements = parseJobElements(htmlContent);\\n\\njobElements.forEach(element =&gt; {\\n  jobs.push({\\n    title: extractTitle(element),\\n    company: extractCompany(element),\\n    location: extractLocation(element),\\n    description: extractDescription(element),\\n    postedDate: extractPostedDate(element),\\n    url: extractJobUrl(element),\\n    source: 'linkedin'\\n  });\\n});\\n\\nreturn jobs.map(job =&gt; ({ json: job }));\"\n      },\n      \"name\": \"Parse Job Data\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [650, 300]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"job\",\n        \"operation\": \"create\",\n        \"requestOptions\": {\n          \"url\": \"{{$env.API_BASE_URL}}/api/v1/jobs/bulk\",\n          \"method\": \"POST\",\n          \"headers\": {\n            \"Authorization\": \"Bearer {{$env.API_TOKEN}}\",\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      },\n      \"name\": \"Save to Database\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [850, 300]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"boolean\": [\n            {\n              \"value1\": \"={{$json.statusCode}}\",\n              \"operation\": \"equal\",\n              \"value2\": 201\n            }\n          ]\n        }\n      },\n      \"name\": \"Check Save Success\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [1050, 300]\n    },\n    {\n      \"parameters\": {\n        \"message\": \"Successfully scraped {{$json.count}} jobs from LinkedIn\",\n        \"channel\": \"#job-scraping\",\n        \"webhook\": \"{{$env.SLACK_WEBHOOK_URL}}\"\n      },\n      \"name\": \"Notify Success\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"position\": [1250, 200]\n    },\n    {\n      \"parameters\": {\n        \"message\": \"Error scraping LinkedIn jobs: {{$json.error}}\",\n        \"channel\": \"#alerts\",\n        \"webhook\": \"{{$env.SLACK_WEBHOOK_URL}}\"\n      },\n      \"name\": \"Notify Error\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"position\": [1250, 400]\n    }\n  ],\n  \"connections\": {\n    \"Schedule Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Fetch LinkedIn Jobs\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Fetch LinkedIn Jobs\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse Job Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse Job Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Save to Database\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Save to Database\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Check Save Success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Check Save Success\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Notify Success\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Notify Error\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/workflow/#2-auto-apply-workflow","title":"2. Auto-Apply Workflow","text":"<pre><code>{\n  \"name\": \"Auto Apply to Jobs\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"resource\": \"webhook\",\n        \"httpMethod\": \"POST\",\n        \"path\": \"auto-apply\"\n      },\n      \"name\": \"Webhook Trigger\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"position\": [250, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$env.API_BASE_URL}}/api/v1/cv/{{$json.cvId}}\",\n        \"headers\": {\n          \"Authorization\": \"Bearer {{$json.userToken}}\"\n        }\n      },\n      \"name\": \"Fetch User CV\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [450, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$env.AI_SERVICE_URL}}/api/job-match\",\n        \"method\": \"POST\",\n        \"body\": {\n          \"cv\": \"{{$json.cv}}\",\n          \"criteria\": \"{{$json.criteria}}\"\n        },\n        \"headers\": {\n          \"Authorization\": \"Bearer {{$env.AI_SERVICE_TOKEN}}\"\n        }\n      },\n      \"name\": \"Find Matching Jobs\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [650, 300]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"// Filter jobs based on match score and user preferences\\nconst matchingJobs = items[0].json.matches;\\nconst filteredJobs = matchingJobs.filter(job =&gt; {\\n  return job.matchScore &gt;= 0.7 &amp;&amp; // 70% match or higher\\n         job.canAutoApply === true &amp;&amp; // Platform supports auto-apply\\n         !job.alreadyApplied; // Haven't applied yet\\n});\\n\\nreturn filteredJobs.map(job =&gt; ({ json: job }));\"\n      },\n      \"name\": \"Filter Applicable Jobs\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [850, 300]\n    },\n    {\n      \"parameters\": {\n        \"batchSize\": 5,\n        \"options\": {\n          \"reset\": false\n        }\n      },\n      \"name\": \"Split Into Batches\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"position\": [1050, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$env.AI_SERVICE_URL}}/api/auto-apply\",\n        \"method\": \"POST\",\n        \"body\": {\n          \"jobId\": \"{{$json.id}}\",\n          \"cvId\": \"{{$json.cvId}}\",\n          \"coverLetter\": \"{{$json.generatedCoverLetter}}\",\n          \"platform\": \"{{$json.source}}\"\n        }\n      },\n      \"name\": \"Submit Application\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [1250, 300]\n    },\n    {\n      \"parameters\": {\n        \"amount\": 2,\n        \"unit\": \"seconds\"\n      },\n      \"name\": \"Rate Limit Delay\",\n      \"type\": \"n8n-nodes-base.wait\",\n      \"position\": [1450, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$env.API_BASE_URL}}/api/v1/applications\",\n        \"method\": \"POST\",\n        \"body\": {\n          \"jobId\": \"{{$json.jobId}}\",\n          \"userId\": \"{{$json.userId}}\",\n          \"cvId\": \"{{$json.cvId}}\",\n          \"status\": \"{{$json.applicationStatus}}\",\n          \"autoApplied\": true,\n          \"appliedAt\": \"{{$now}}\"\n        }\n      },\n      \"name\": \"Record Application\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [1650, 300]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"email\",\n        \"operation\": \"send\",\n        \"toEmail\": \"{{$json.userEmail}}\",\n        \"subject\": \"Auto-Applied to {{$json.jobTitle}} at {{$json.companyName}}\",\n        \"message\": \"We've automatically applied to a job that matches your profile!\"\n      },\n      \"name\": \"Send Notification\",\n      \"type\": \"n8n-nodes-base.emailSend\",\n      \"position\": [1850, 300]\n    }\n  ]\n}\n</code></pre>"},{"location":"architecture/workflow/#3-notification-workflow","title":"3. Notification Workflow","text":"<pre><code>{\n  \"name\": \"Multi-Channel Notifications\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"resource\": \"queue\",\n        \"queue\": \"notifications\"\n      },\n      \"name\": \"Queue Trigger\",\n      \"type\": \"n8n-nodes-base.redis\",\n      \"position\": [250, 300]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"string\": [\n            {\n              \"value1\": \"={{$json.type}}\",\n              \"operation\": \"equal\",\n              \"value2\": \"email\"\n            }\n          ]\n        }\n      },\n      \"name\": \"Check Notification Type\",\n      \"type\": \"n8n-nodes-base.switch\",\n      \"position\": [450, 300]\n    },\n    {\n      \"parameters\": {\n        \"service\": \"gmail\",\n        \"options\": {\n          \"ccEmail\": \"\",\n          \"bccEmail\": \"\"\n        },\n        \"subject\": \"={{$json.subject}}\",\n        \"message\": \"={{$json.message}}\",\n        \"toEmail\": \"={{$json.recipient}}\"\n      },\n      \"name\": \"Send Email\",\n      \"type\": \"n8n-nodes-base.emailSend\",\n      \"position\": [650, 200]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"message\",\n        \"operation\": \"send\",\n        \"body\": \"={{$json.message}}\",\n        \"from\": \"{{$env.TWILIO_PHONE_NUMBER}}\",\n        \"to\": \"={{$json.recipient}}\"\n      },\n      \"name\": \"Send SMS\",\n      \"type\": \"n8n-nodes-base.twilio\",\n      \"position\": [650, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$env.PUSH_NOTIFICATION_URL}}\",\n        \"method\": \"POST\",\n        \"body\": {\n          \"userId\": \"={{$json.userId}}\",\n          \"title\": \"={{$json.title}}\",\n          \"message\": \"={{$json.message}}\",\n          \"data\": \"={{$json.data}}\"\n        }\n      },\n      \"name\": \"Send Push Notification\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [650, 400]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"{{$env.API_BASE_URL}}/api/v1/notifications/{{$json.id}}/status\",\n        \"method\": \"PATCH\",\n        \"body\": {\n          \"status\": \"sent\",\n          \"sentAt\": \"{{$now}}\"\n        }\n      },\n      \"name\": \"Update Status\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [850, 300]\n    }\n  ]\n}\n</code></pre>"},{"location":"architecture/workflow/#workflow-configuration","title":"Workflow Configuration","text":""},{"location":"architecture/workflow/#environment-setup","title":"Environment Setup","text":"<pre><code># docker-compose.yml for n8n\nversion: '3.8'\nservices:\n  n8n:\n    image: n8nio/n8n:latest\n    restart: always\n    ports:\n      - \"5678:5678\"\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=${N8N_USER}\n      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}\n      - N8N_HOST=${N8N_HOST}\n      - N8N_PORT=5678\n      - N8N_PROTOCOL=https\n      - NODE_ENV=production\n      - WEBHOOK_URL=https://your-domain.com\n      - GENERIC_TIMEZONE=UTC\n      - N8N_LOG_LEVEL=info\n      - DB_TYPE=postgresdb\n      - DB_POSTGRESDB_HOST=postgres\n      - DB_POSTGRESDB_PORT=5432\n      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}\n      - DB_POSTGRESDB_USER=${POSTGRES_USER}\n      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}\n    volumes:\n      - n8n_data:/home/node/.n8n\n      - ./workflows:/home/node/.n8n/workflows\n    depends_on:\n      - postgres\n    networks:\n      - n8n_network\n\n  postgres:\n    image: postgres:13\n    restart: always\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - n8n_network\n\nvolumes:\n  n8n_data:\n  postgres_data:\n\nnetworks:\n  n8n_network:\n</code></pre>"},{"location":"architecture/workflow/#workflow-environment-variables","title":"Workflow Environment Variables","text":"<pre><code># .env for n8n workflows\nAPI_BASE_URL=https://api.yourapp.com\nAI_SERVICE_URL=https://ai.yourapp.com\nAPI_TOKEN=your_api_token\nAI_SERVICE_TOKEN=your_ai_service_token\n\n# External Services\nLINKEDIN_API_KEY=your_linkedin_key\nINDEED_API_KEY=your_indeed_key\nGLASSDOOR_API_KEY=your_glassdoor_key\n\n# Notification Services\nSENDGRID_API_KEY=your_sendgrid_key\nTWILIO_ACCOUNT_SID=your_twilio_sid\nTWILIO_AUTH_TOKEN=your_twilio_token\nTWILIO_PHONE_NUMBER=your_twilio_number\nSLACK_WEBHOOK_URL=your_slack_webhook\n\n# Database\nPOSTGRES_DB=n8n_db\nPOSTGRES_USER=n8n_user\nPOSTGRES_PASSWORD=your_secure_password\n\n# n8n Configuration\nN8N_USER=admin\nN8N_PASSWORD=your_n8n_password\nN8N_HOST=workflows.yourapp.com\n</code></pre>"},{"location":"architecture/workflow/#custom-nodes","title":"Custom Nodes","text":""},{"location":"architecture/workflow/#job-scraper-node","title":"Job Scraper Node","text":"<pre><code>// nodes/JobScraper/JobScraper.node.ts\nimport {\n  IExecuteFunctions,\n  INodeExecutionData,\n  INodeType,\n  INodeTypeDescription,\n} from 'n8n-workflow';\n\nexport class JobScraper implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'Job Scraper',\n    name: 'jobScraper',\n    group: ['transform'],\n    version: 1,\n    description: 'Scrapes job listings from various platforms',\n    defaults: {\n      name: 'Job Scraper',\n    },\n    inputs: ['main'],\n    outputs: ['main'],\n    properties: [\n      {\n        displayName: 'Platform',\n        name: 'platform',\n        type: 'options',\n        options: [\n          {\n            name: 'LinkedIn',\n            value: 'linkedin',\n          },\n          {\n            name: 'Indeed',\n            value: 'indeed',\n          },\n          {\n            name: 'Glassdoor',\n            value: 'glassdoor',\n          },\n        ],\n        default: 'linkedin',\n        description: 'The job platform to scrape',\n      },\n      {\n        displayName: 'Search Keywords',\n        name: 'keywords',\n        type: 'string',\n        default: '',\n        placeholder: 'e.g., software engineer, python developer',\n        description: 'Keywords to search for',\n      },\n      {\n        displayName: 'Location',\n        name: 'location',\n        type: 'string',\n        default: '',\n        placeholder: 'e.g., New York, NY',\n        description: 'Job location',\n      },\n      {\n        displayName: 'Max Results',\n        name: 'maxResults',\n        type: 'number',\n        default: 50,\n        description: 'Maximum number of jobs to scrape',\n      },\n    ],\n  };\n\n  async execute(this: IExecuteFunctions): Promise&lt;INodeExecutionData[][]&gt; {\n    const items = this.getInputData();\n    const returnData: INodeExecutionData[] = [];\n\n    for (let i = 0; i &lt; items.length; i++) {\n      const platform = this.getNodeParameter('platform', i) as string;\n      const keywords = this.getNodeParameter('keywords', i) as string;\n      const location = this.getNodeParameter('location', i) as string;\n      const maxResults = this.getNodeParameter('maxResults', i) as number;\n\n      try {\n        const scraper = new JobScraperService(platform);\n        const jobs = await scraper.scrapeJobs({\n          keywords,\n          location,\n          maxResults,\n        });\n\n        for (const job of jobs) {\n          returnData.push({\n            json: job,\n          });\n        }\n      } catch (error) {\n        throw new Error(`Job scraping failed: ${error.message}`);\n      }\n    }\n\n    return [returnData];\n  }\n}\n</code></pre>"},{"location":"architecture/workflow/#ai-job-matcher-node","title":"AI Job Matcher Node","text":"<pre><code>// nodes/AIJobMatcher/AIJobMatcher.node.ts\nexport class AIJobMatcher implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'AI Job Matcher',\n    name: 'aiJobMatcher',\n    group: ['transform'],\n    version: 1,\n    description: 'Matches jobs to user CV using AI',\n    defaults: {\n      name: 'AI Job Matcher',\n    },\n    inputs: ['main'],\n    outputs: ['main'],\n    properties: [\n      {\n        displayName: 'CV Data',\n        name: 'cvData',\n        type: 'json',\n        default: '{}',\n        description: 'User CV data in JSON format',\n      },\n      {\n        displayName: 'Match Threshold',\n        name: 'threshold',\n        type: 'number',\n        typeOptions: {\n          minValue: 0,\n          maxValue: 1,\n          numberStepSize: 0.1,\n        },\n        default: 0.7,\n        description: 'Minimum match score (0-1)',\n      },\n      {\n        displayName: 'Include Reasons',\n        name: 'includeReasons',\n        type: 'boolean',\n        default: true,\n        description: 'Include match reasoning in output',\n      },\n    ],\n  };\n\n  async execute(this: IExecuteFunctions): Promise&lt;INodeExecutionData[][]&gt; {\n    const items = this.getInputData();\n    const returnData: INodeExecutionData[] = [];\n\n    for (let i = 0; i &lt; items.length; i++) {\n      const cvData = this.getNodeParameter('cvData', i) as object;\n      const threshold = this.getNodeParameter('threshold', i) as number;\n      const includeReasons = this.getNodeParameter('includeReasons', i) as boolean;\n      const jobData = items[i].json;\n\n      try {\n        const matcher = new AIJobMatcherService();\n        const matchResult = await matcher.matchJob({\n          cv: cvData,\n          job: jobData,\n          threshold,\n          includeReasons,\n        });\n\n        if (matchResult.score &gt;= threshold) {\n          returnData.push({\n            json: {\n              ...jobData,\n              matchScore: matchResult.score,\n              matchReasons: includeReasons ? matchResult.reasons : undefined,\n              recommendations: matchResult.recommendations,\n            },\n          });\n        }\n      } catch (error) {\n        throw new Error(`AI job matching failed: ${error.message}`);\n      }\n    }\n\n    return [returnData];\n  }\n}\n</code></pre>"},{"location":"architecture/workflow/#workflow-monitoring","title":"Workflow Monitoring","text":""},{"location":"architecture/workflow/#health-check-workflow","title":"Health Check Workflow","text":"<pre><code>{\n  \"name\": \"System Health Check\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"triggerTimes\": {\n          \"item\": [\n            {\n              \"minute\": 0\n            }\n          ]\n        }\n      },\n      \"name\": \"Every Hour\",\n      \"type\": \"n8n-nodes-base.scheduleTrigger\",\n      \"position\": [250, 300]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"const services = [\\n  { name: 'API Gateway', url: process.env.API_BASE_URL + '/health' },\\n  { name: 'User Service', url: process.env.USER_SERVICE_URL + '/health' },\\n  { name: 'Job Service', url: process.env.JOB_SERVICE_URL + '/health' },\\n  { name: 'AI Service', url: process.env.AI_SERVICE_URL + '/health' }\\n];\\n\\nreturn services.map(service =&gt; ({ json: service }));\"\n      },\n      \"name\": \"Get Service URLs\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [450, 300]\n    },\n    {\n      \"parameters\": {\n        \"url\": \"={{$json.url}}\",\n        \"options\": {\n          \"timeout\": 5000\n        }\n      },\n      \"name\": \"Check Service Health\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [650, 300]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"number\": [\n            {\n              \"value1\": \"={{$json.statusCode}}\",\n              \"operation\": \"equal\",\n              \"value2\": 200\n            }\n          ]\n        }\n      },\n      \"name\": \"Check Status\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [850, 300]\n    },\n    {\n      \"parameters\": {\n        \"message\": \"\ud83d\udea8 Service {{$node['Get Service URLs'].json.name}} is down! Status: {{$json.statusCode}}\",\n        \"channel\": \"#alerts\"\n      },\n      \"name\": \"Alert on Failure\",\n      \"type\": \"n8n-nodes-base.slack\",\n      \"position\": [1050, 400]\n    },\n    {\n      \"parameters\": {\n        \"functionCode\": \"const results = items.map(item =&gt; ({\\n  service: item.json.name,\\n  status: item.json.statusCode === 200 ? 'healthy' : 'unhealthy',\\n  responseTime: item.json.responseTime,\\n  timestamp: new Date().toISOString()\\n}));\\n\\nreturn [{ json: { healthCheck: results } }];\"\n      },\n      \"name\": \"Aggregate Results\",\n      \"type\": \"n8n-nodes-base.function\",\n      \"position\": [1050, 200]\n    }\n  ]\n}\n</code></pre>"},{"location":"architecture/workflow/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// workflows/performance-monitoring.js\nconst performanceWorkflow = {\n  name: \"Performance Monitoring\",\n  nodes: [\n    {\n      name: \"Schedule Trigger\",\n      type: \"n8n-nodes-base.scheduleTrigger\",\n      parameters: {\n        rule: {\n          interval: [{ field: \"minutes\", value: 5 }]\n        }\n      }\n    },\n    {\n      name: \"Collect Metrics\",\n      type: \"n8n-nodes-base.function\",\n      parameters: {\n        functionCode: `\n          const metrics = await Promise.all([\n            fetch('${process.env.API_BASE_URL}/metrics'),\n            fetch('${process.env.AI_SERVICE_URL}/metrics'),\n            fetch('${process.env.SCRAPER_SERVICE_URL}/metrics')\n          ]);\n\n          const data = await Promise.all(\n            metrics.map(response =&gt; response.json())\n          );\n\n          return data.map(metric =&gt; ({ json: metric }));\n        `\n      }\n    },\n    {\n      name: \"Check Thresholds\",\n      type: \"n8n-nodes-base.function\",\n      parameters: {\n        functionCode: `\n          const alerts = [];\n\n          items.forEach(item =&gt; {\n            const metric = item.json;\n\n            // CPU usage &gt; 80%\n            if (metric.cpu_usage &gt; 0.8) {\n              alerts.push({\n                type: 'cpu_high',\n                service: metric.service,\n                value: metric.cpu_usage,\n                threshold: 0.8\n              });\n            }\n\n            // Memory usage &gt; 85%\n            if (metric.memory_usage &gt; 0.85) {\n              alerts.push({\n                type: 'memory_high',\n                service: metric.service,\n                value: metric.memory_usage,\n                threshold: 0.85\n              });\n            }\n\n            // Response time &gt; 2 seconds\n            if (metric.avg_response_time &gt; 2000) {\n              alerts.push({\n                type: 'response_time_high',\n                service: metric.service,\n                value: metric.avg_response_time,\n                threshold: 2000\n              });\n            }\n          });\n\n          return alerts.map(alert =&gt; ({ json: alert }));\n        `\n      }\n    },\n    {\n      name: \"Send Alerts\",\n      type: \"n8n-nodes-base.slack\",\n      parameters: {\n        channel: \"#performance-alerts\",\n        message: \"\u26a0\ufe0f Performance Alert: {{$json.type}} for {{$json.service}}\\nValue: {{$json.value}}\\nThreshold: {{$json.threshold}}\"\n      }\n    }\n  ]\n};\n</code></pre>"},{"location":"architecture/workflow/#workflow-deployment","title":"Workflow Deployment","text":""},{"location":"architecture/workflow/#cicd-pipeline-for-workflows","title":"CI/CD Pipeline for Workflows","text":"<pre><code># .github/workflows/deploy-n8n-workflows.yml\nname: Deploy n8n Workflows\n\non:\n  push:\n    branches: [main]\n    paths: ['workflows/**']\n\n  pull_request:\n    branches: [main]\n    paths: ['workflows/**']\n\njobs:\n  validate-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Install n8n CLI\n        run: npm install -g n8n\n\n      - name: Validate Workflow Syntax\n        run: |\n          for file in workflows/*.json; do\n            echo \"Validating $file\"\n            node -e \"JSON.parse(require('fs').readFileSync('$file', 'utf8'))\"\n          done\n\n      - name: Test Workflows\n        run: |\n          # Start n8n in test mode\n          n8n start --tunnel &amp;\n          sleep 30\n\n          # Import and test workflows\n          for file in workflows/*.json; do\n            echo \"Testing $file\"\n            # Add workflow testing logic here\n          done\n\n  deploy-staging:\n    needs: validate-workflows\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Deploy to Staging n8n\n        run: |\n          # Deploy workflows to staging environment\n          curl -X POST \"${{ secrets.N8N_STAGING_URL }}/api/v1/workflows/import\" \\\n            -H \"Authorization: Bearer ${{ secrets.N8N_API_KEY }}\" \\\n            -H \"Content-Type: application/json\" \\\n            -d @workflows/job-scraping.json\n\n  deploy-production:\n    needs: deploy-staging\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Deploy to Production n8n\n        run: |\n          # Deploy workflows to production environment\n          for file in workflows/*.json; do\n            curl -X POST \"${{ secrets.N8N_PROD_URL }}/api/v1/workflows/import\" \\\n              -H \"Authorization: Bearer ${{ secrets.N8N_PROD_API_KEY }}\" \\\n              -H \"Content-Type: application/json\" \\\n              -d @\"$file\"\n          done\n</code></pre>"},{"location":"architecture/workflow/#workflow-backup-strategy","title":"Workflow Backup Strategy","text":"<pre><code>#!/bin/bash\n# scripts/backup-workflows.sh\n\n# Backup n8n workflows\necho \"Starting n8n workflow backup...\"\n\n# Create backup directory with timestamp\nBACKUP_DIR=\"backups/workflows/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Export all workflows\ncurl -X GET \"${N8N_URL}/api/v1/workflows\" \\\n  -H \"Authorization: Bearer ${N8N_API_KEY}\" \\\n  -o \"${BACKUP_DIR}/all_workflows.json\"\n\n# Export individual workflows\nWORKFLOW_IDS=$(curl -s -X GET \"${N8N_URL}/api/v1/workflows\" \\\n  -H \"Authorization: Bearer ${N8N_API_KEY}\" | jq -r '.data[].id')\n\nfor id in $WORKFLOW_IDS; do\n  curl -X GET \"${N8N_URL}/api/v1/workflows/${id}\" \\\n    -H \"Authorization: Bearer ${N8N_API_KEY}\" \\\n    -o \"${BACKUP_DIR}/workflow_${id}.json\"\ndone\n\n# Compress backup\ntar -czf \"${BACKUP_DIR}.tar.gz\" -C backups/workflows \"$(basename \"$BACKUP_DIR\")\"\nrm -rf \"$BACKUP_DIR\"\n\n# Upload to cloud storage (optional)\naws s3 cp \"${BACKUP_DIR}.tar.gz\" \"s3://your-backup-bucket/n8n-workflows/\"\n\necho \"Backup completed: ${BACKUP_DIR}.tar.gz\"\n</code></pre>"},{"location":"architecture/workflow/#integration-patterns","title":"Integration Patterns","text":""},{"location":"architecture/workflow/#api-integration-pattern","title":"API Integration Pattern","text":"<pre><code>// Custom API connector for internal services\nclass InternalAPIConnector {\n  constructor(baseURL, apiKey) {\n    this.baseURL = baseURL;\n    this.apiKey = apiKey;\n  }\n\n  async makeRequest(endpoint, method = 'GET', data = null) {\n    const url = `${this.baseURL}${endpoint}`;\n    const options = {\n      method,\n      headers: {\n        'Authorization': `Bearer ${this.apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    };\n\n    if (data &amp;&amp; method !== 'GET') {\n      options.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // User service methods\n  async getUser(userId) {\n    return this.makeRequest(`/users/${userId}`);\n  }\n\n  async updateUserPreferences(userId, preferences) {\n    return this.makeRequest(`/users/${userId}/preferences`, 'PUT', preferences);\n  }\n\n  // Job service methods\n  async createJob(jobData) {\n    return this.makeRequest('/jobs', 'POST', jobData);\n  }\n\n  async searchJobs(criteria) {\n    const queryString = new URLSearchParams(criteria).toString();\n    return this.makeRequest(`/jobs/search?${queryString}`);\n  }\n\n  // Application methods\n  async createApplication(applicationData) {\n    return this.makeRequest('/applications', 'POST', applicationData);\n  }\n\n  async updateApplicationStatus(applicationId, status) {\n    return this.makeRequest(`/applications/${applicationId}/status`, 'PATCH', { status });\n  }\n}\n</code></pre>"},{"location":"architecture/workflow/#error-handling-and-retry-logic","title":"Error Handling and Retry Logic","text":"<pre><code>// Robust error handling for workflows\nclass WorkflowErrorHandler {\n  static async executeWithRetry(fn, maxRetries = 3, delay = 1000) {\n    for (let i = 0; i &lt; maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        if (i === maxRetries - 1) {\n          throw error;\n        }\n\n        // Exponential backoff\n        await this.sleep(delay * Math.pow(2, i));\n      }\n    }\n  }\n\n  static async sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n  }\n\n  static handleWorkflowError(error, context) {\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      workflow: context.workflow,\n      node: context.node,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Log error\n    console.error('Workflow Error:', errorData);\n\n    // Send to monitoring service\n    this.sendToMonitoring(errorData);\n\n    // Trigger alert if critical\n    if (this.isCriticalError(error)) {\n      this.sendAlert(errorData);\n    }\n\n    return errorData;\n  }\n\n  static isCriticalError(error) {\n    const criticalPatterns = [\n      'ECONNREFUSED',\n      'timeout',\n      'authentication',\n      'authorization'\n    ];\n\n    return criticalPatterns.some(pattern =&gt; \n      error.message.toLowerCase().includes(pattern)\n    );\n  }\n\n  static async sendAlert(errorData) {\n    // Send to Slack, email, or other alerting system\n    await fetch(process.env.ALERT_WEBHOOK_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        text: `\ud83d\udea8 Critical Workflow Error: ${errorData.message}`,\n        attachments: [{\n          color: 'danger',\n          fields: [\n            { title: 'Workflow', value: errorData.workflow, short: true },\n            { title: 'Node', value: errorData.node, short: true },\n            { title: 'Time', value: errorData.timestamp, short: true }\n          ]\n        }]\n      })\n    });\n  }\n}\n</code></pre> <p>This workflow architecture provides a robust foundation for automating complex business processes while maintaining scalability, reliability, and monitoring capabilities.</p>"},{"location":"deployment/","title":"Deployment Strategy","text":""},{"location":"deployment/#overview","title":"Overview","text":"<p>This document outlines the comprehensive deployment strategy for the AI-Powered Job Seeker Platform, covering containerization, orchestration, CI/CD pipelines, monitoring, and scaling strategies.</p>"},{"location":"deployment/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Infrastructure Architecture</li> <li>Containerization Strategy</li> <li>Kubernetes Deployment</li> <li>CI/CD Pipeline</li> <li>Environment Management</li> <li>Monitoring &amp; Observability</li> <li>Security Implementation</li> <li>Scaling Strategy</li> <li>Disaster Recovery</li> </ol>"},{"location":"deployment/#infrastructure-architecture","title":"Infrastructure Architecture","text":""},{"location":"deployment/#cloud-provider-strategy","title":"Cloud Provider Strategy","text":"<pre><code>Multi-Cloud Architecture\n\u251c\u2500\u2500 Primary: AWS\n\u2502   \u251c\u2500\u2500 EKS (Kubernetes)\n\u2502   \u251c\u2500\u2500 RDS (PostgreSQL)\n\u2502   \u251c\u2500\u2500 ElastiCache (Redis)\n\u2502   \u251c\u2500\u2500 S3 (File Storage)\n\u2502   \u251c\u2500\u2500 CloudFront (CDN)\n\u2502   \u2514\u2500\u2500 Route 53 (DNS)\n\u251c\u2500\u2500 Secondary: Google Cloud\n\u2502   \u251c\u2500\u2500 GKE (Backup Cluster)\n\u2502   \u251c\u2500\u2500 Cloud SQL\n\u2502   \u251c\u2500\u2500 Cloud Storage\n\u2502   \u2514\u2500\u2500 Firebase Services\n\u2514\u2500\u2500 Edge: Cloudflare\n    \u251c\u2500\u2500 DDoS Protection\n    \u251c\u2500\u2500 WAF\n    \u251c\u2500\u2500 Edge Caching\n    \u2514\u2500\u2500 Load Balancing\n</code></pre>"},{"location":"deployment/#network-architecture","title":"Network Architecture","text":"<pre><code>Production Network\n\u251c\u2500\u2500 VPC (10.0.0.0/16)\n\u2502   \u251c\u2500\u2500 Public Subnets\n\u2502   \u2502   \u251c\u2500\u2500 NAT Gateways\n\u2502   \u2502   \u251c\u2500\u2500 Load Balancers\n\u2502   \u2502   \u2514\u2500\u2500 Bastion Hosts\n\u2502   \u251c\u2500\u2500 Private Subnets\n\u2502   \u2502   \u251c\u2500\u2500 Application Servers\n\u2502   \u2502   \u251c\u2500\u2500 Kubernetes Nodes\n\u2502   \u2502   \u2514\u2500\u2500 Cache Layer\n\u2502   \u2514\u2500\u2500 Database Subnets\n\u2502       \u251c\u2500\u2500 RDS Instances\n\u2502       \u251c\u2500\u2500 MongoDB Cluster\n\u2502       \u2514\u2500\u2500 Analytics DB\n\u251c\u2500\u2500 Security Groups\n\u2502   \u251c\u2500\u2500 Web Tier (80, 443)\n\u2502   \u251c\u2500\u2500 App Tier (8000-8010)\n\u2502   \u251c\u2500\u2500 Cache Tier (6379)\n\u2502   \u2514\u2500\u2500 DB Tier (5432, 27017)\n\u2514\u2500\u2500 Monitoring\n    \u251c\u2500\u2500 VPC Flow Logs\n    \u251c\u2500\u2500 CloudTrail\n    \u2514\u2500\u2500 Config Rules\n</code></pre>"},{"location":"deployment/#containerization-strategy","title":"Containerization Strategy","text":""},{"location":"deployment/#docker-architecture","title":"Docker Architecture","text":"<pre><code>Container Strategy\n\u251c\u2500\u2500 Base Images\n\u2502   \u251c\u2500\u2500 node:18-alpine (Frontend/API)\n\u2502   \u251c\u2500\u2500 python:3.11-slim (AI Services)\n\u2502   \u251c\u2500\u2500 nginx:alpine (Reverse Proxy)\n\u2502   \u2514\u2500\u2500 redis:7-alpine (Cache)\n\u251c\u2500\u2500 Multi-stage Builds\n\u2502   \u251c\u2500\u2500 Build Stage\n\u2502   \u251c\u2500\u2500 Test Stage\n\u2502   \u251c\u2500\u2500 Security Scan\n\u2502   \u2514\u2500\u2500 Runtime Stage\n\u251c\u2500\u2500 Image Optimization\n\u2502   \u251c\u2500\u2500 Layer Caching\n\u2502   \u251c\u2500\u2500 Minimal Base Images\n\u2502   \u251c\u2500\u2500 Security Hardening\n\u2502   \u2514\u2500\u2500 Size Optimization\n\u2514\u2500\u2500 Registry Strategy\n    \u251c\u2500\u2500 ECR (Primary)\n    \u251c\u2500\u2500 Harbor (Self-hosted)\n    \u2514\u2500\u2500 Docker Hub (Public)\n</code></pre>"},{"location":"deployment/#dockerfile-examples","title":"Dockerfile Examples","text":""},{"location":"deployment/#frontend-dockerfile","title":"Frontend Dockerfile","text":"<pre><code># Multi-stage build for React/Next.js frontend\nFROM node:18-alpine AS dependencies\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\n\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine AS runner\nWORKDIR /app\n\n# Create non-root user\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\n# Copy built application\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/.next/standalone ./\nCOPY --from=builder /app/.next/static ./.next/static\n\n# Set ownership\nRUN chown -R nextjs:nodejs /app\nUSER nextjs\n\nEXPOSE 3000\nENV PORT 3000\n\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"deployment/#backend-api-dockerfile","title":"Backend API Dockerfile","text":"<pre><code># Multi-stage build for Node.js API\nFROM node:18-alpine AS base\nWORKDIR /app\nRUN apk add --no-cache dumb-init\n\nFROM base AS dependencies\nCOPY package*.json ./\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\n\nFROM base AS build\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM base AS runtime\nENV NODE_ENV=production\nCOPY --from=dependencies /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\nCOPY package*.json ./\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\nRUN chown -R nextjs:nodejs /app\nUSER nextjs\n\nEXPOSE 8000\nENTRYPOINT [\"dumb-init\", \"--\"]\nCMD [\"node\", \"dist/app.js\"]\n</code></pre>"},{"location":"deployment/#ai-service-dockerfile","title":"AI Service Dockerfile","text":"<pre><code># Multi-stage build for Python AI service\nFROM python:3.11-slim AS base\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nFROM base AS dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nFROM base AS runtime\nCOPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=dependencies /usr/local/bin /usr/local/bin\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd --create-home --shell /bin/bash app\nRUN chown -R app:app /app\nUSER app\n\nEXPOSE 8001\nCMD [\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8001\"]\n</code></pre>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deployment/#cluster-architecture","title":"Cluster Architecture","text":"<pre><code># cluster-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-config\ndata:\n  cluster-name: \"hr-agent-prod\"\n  region: \"us-west-2\"\n  node-groups: |\n    - name: general\n      instance-types: [\"t3.medium\", \"t3.large\"]\n      scaling:\n        min: 2\n        max: 10\n        desired: 4\n    - name: compute-intensive\n      instance-types: [\"c5.large\", \"c5.xlarge\"]\n      scaling:\n        min: 1\n        max: 5\n        desired: 2\n    - name: memory-intensive\n      instance-types: [\"r5.large\", \"r5.xlarge\"]\n      scaling:\n        min: 1\n        max: 3\n        desired: 1\n</code></pre>"},{"location":"deployment/#namespace-strategy","title":"Namespace Strategy","text":"<pre><code># namespaces.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: production\n  labels:\n    environment: production\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: staging\n  labels:\n    environment: staging\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: development\n  labels:\n    environment: development\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitoring\n  labels:\n    purpose: monitoring\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ingress\n  labels:\n    purpose: networking\n</code></pre>"},{"location":"deployment/#application-deployments","title":"Application Deployments","text":""},{"location":"deployment/#frontend-deployment","title":"Frontend Deployment","text":"<pre><code># frontend-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n  namespace: production\n  labels:\n    app: frontend\n    tier: presentation\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n      maxSurge: 1\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n        tier: presentation\n    spec:\n      containers:\n      - name: frontend\n        image: your-registry/hr-agent-frontend:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: API_BASE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: app-config\n              key: api-base-url\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      imagePullSecrets:\n      - name: registry-secret\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\n  namespace: production\nspec:\n  selector:\n    app: frontend\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/#api-gateway-deployment","title":"API Gateway Deployment","text":"<pre><code># api-gateway-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-gateway\n  namespace: production\n  labels:\n    app: api-gateway\n    tier: application\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: api-gateway\n  template:\n    metadata:\n      labels:\n        app: api-gateway\n        tier: application\n    spec:\n      containers:\n      - name: api-gateway\n        image: your-registry/hr-agent-api-gateway:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-secret\n              key: url\n        - name: DB_CONNECTION_STRING\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: connection-string\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-gateway-service\n  namespace: production\nspec:\n  selector:\n    app: api-gateway\n  ports:\n  - port: 80\n    targetPort: 8000\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/#microservices-deployment","title":"Microservices Deployment","text":"<pre><code># user-service-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\n  namespace: production\n  labels:\n    app: user-service\n    tier: application\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n        tier: application\n    spec:\n      containers:\n      - name: user-service\n        image: your-registry/hr-agent-user-service:latest\n        ports:\n        - containerPort: 8001\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: DB_CONNECTION_STRING\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: connection-string\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: jwt-secret\n              key: secret\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8001\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8001\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-service\n  namespace: production\nspec:\n  selector:\n    app: user-service\n  ports:\n  - port: 80\n    targetPort: 8001\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/#ai-service-deployment","title":"AI Service Deployment","text":"<pre><code># ai-service-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ai-service\n  namespace: production\n  labels:\n    app: ai-service\n    tier: application\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: ai-service\n  template:\n    metadata:\n      labels:\n        app: ai-service\n        tier: application\n    spec:\n      containers:\n      - name: ai-service\n        image: your-registry/hr-agent-ai-service:latest\n        ports:\n        - containerPort: 8002\n        env:\n        - name: OPENAI_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: ai-secrets\n              key: openai-api-key\n        - name: MODEL_PATH\n          value: \"/app/models\"\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"1000m\"\n            nvidia.com/gpu: 0\n          limits:\n            memory: \"2Gi\"\n            cpu: \"2000m\"\n            nvidia.com/gpu: 1\n        volumeMounts:\n        - name: model-storage\n          mountPath: /app/models\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8002\n          initialDelaySeconds: 60\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8002\n          initialDelaySeconds: 30\n          periodSeconds: 10\n      volumes:\n      - name: model-storage\n        persistentVolumeClaim:\n          claimName: ai-models-pvc\n      nodeSelector:\n        node-type: gpu-enabled\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ai-service\n  namespace: production\nspec:\n  selector:\n    app: ai-service\n  ports:\n  - port: 80\n    targetPort: 8002\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/#ingress-configuration","title":"Ingress Configuration","text":"<pre><code># ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hr-agent-ingress\n  namespace: production\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n    nginx.ingress.kubernetes.io/rate-limit-window: \"1m\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/use-regex: \"true\"\nspec:\n  tls:\n  - hosts:\n    - api.hr-agent.com\n    - app.hr-agent.com\n    secretName: hr-agent-tls\n  rules:\n  - host: app.hr-agent.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: frontend-service\n            port:\n              number: 80\n  - host: api.hr-agent.com\n    http:\n      paths:\n      - path: /api/v1/auth\n        pathType: Prefix\n        backend:\n          service:\n            name: user-service\n            port:\n              number: 80\n      - path: /api/v1/users\n        pathType: Prefix\n        backend:\n          service:\n            name: user-service\n            port:\n              number: 80\n      - path: /api/v1/jobs\n        pathType: Prefix\n        backend:\n          service:\n            name: job-service\n            port:\n              number: 80\n      - path: /api/v1/cv\n        pathType: Prefix\n        backend:\n          service:\n            name: cv-service\n            port:\n              number: 80\n      - path: /api/v1/agent\n        pathType: Prefix\n        backend:\n          service:\n            name: ai-service\n            port:\n              number: 80\n      - path: /api/v1/.*\n        pathType: Prefix\n        backend:\n          service:\n            name: api-gateway-service\n            port:\n              number: 80\n</code></pre>"},{"location":"deployment/#storage-configuration","title":"Storage Configuration","text":"<pre><code># storage.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: ai-models-pvc\n  namespace: production\nspec:\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: gp3\n  resources:\n    requests:\n      storage: 50Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: file-storage-pvc\n  namespace: production\nspec:\n  accessModes:\n    - ReadWriteMany\n  storageClassName: efs\n  resources:\n    requests:\n      storage: 100Gi\n</code></pre>"},{"location":"deployment/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"deployment/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [18.x]\n        service: [frontend, api-gateway, user-service, job-service, cv-service]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: ${{ matrix.service }}/package-lock.json\n\n    - name: Install dependencies\n      working-directory: ${{ matrix.service }}\n      run: npm ci\n\n    - name: Run tests\n      working-directory: ${{ matrix.service }}\n      run: npm test\n\n    - name: Run security audit\n      working-directory: ${{ matrix.service }}\n      run: npm audit --audit-level moderate\n\n  test-python:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.11]\n        service: [ai-service, scraper-service]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      working-directory: ${{ matrix.service }}\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n\n    - name: Run tests\n      working-directory: ${{ matrix.service }}\n      run: |\n        pytest tests/ --cov=src --cov-report=xml\n\n    - name: Security scan\n      working-directory: ${{ matrix.service }}\n      run: |\n        bandit -r src/\n        safety check\n\n  build-and-push:\n    needs: [test, test-python]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    strategy:\n      matrix:\n        service: [frontend, api-gateway, user-service, job-service, cv-service, ai-service, scraper-service]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n\n    - name: Log in to Container Registry\n      uses: docker/login-action@v2\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v4\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha,prefix={{branch}}-\n          type=raw,value=latest,enable={{is_default_branch}}\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v4\n      with:\n        context: ${{ matrix.service }}\n        file: ${{ matrix.service }}/Dockerfile\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  security-scan:\n    needs: build-and-push\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    strategy:\n      matrix:\n        service: [frontend, api-gateway, user-service, job-service, cv-service, ai-service, scraper-service]\n\n    steps:\n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n\n    - name: Upload Trivy scan results to GitHub Security tab\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: 'trivy-results.sarif'\n\n  deploy-staging:\n    needs: [build-and-push, security-scan]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: staging\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n\n    - name: Update kubeconfig\n      run: |\n        aws eks update-kubeconfig --region us-west-2 --name hr-agent-staging\n\n    - name: Deploy to staging\n      run: |\n        # Update image tags in deployment files\n        for service in frontend api-gateway user-service job-service cv-service ai-service scraper-service; do\n          sed -i \"s|your-registry/hr-agent-${service}:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${service}:${{ github.sha }}|g\" k8s/staging/${service}-deployment.yaml\n        done\n\n        # Apply configurations\n        kubectl apply -f k8s/staging/ -n staging\n\n        # Wait for rollout\n        kubectl rollout status deployment --all -n staging --timeout=600s\n\n  deploy-production:\n    needs: deploy-staging\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: production\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n\n    - name: Update kubeconfig\n      run: |\n        aws eks update-kubeconfig --region us-west-2 --name hr-agent-production\n\n    - name: Deploy to production\n      run: |\n        # Update image tags in deployment files\n        for service in frontend api-gateway user-service job-service cv-service ai-service scraper-service; do\n          sed -i \"s|your-registry/hr-agent-${service}:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${service}:${{ github.sha }}|g\" k8s/production/${service}-deployment.yaml\n        done\n\n        # Apply configurations\n        kubectl apply -f k8s/production/ -n production\n\n        # Wait for rollout\n        kubectl rollout status deployment --all -n production --timeout=600s\n\n    - name: Run smoke tests\n      run: |\n        # Wait for services to be ready\n        sleep 30\n\n        # Run basic health checks\n        curl -f https://api.hr-agent.com/health || exit 1\n        curl -f https://app.hr-agent.com/health || exit 1\n\n    - name: Notify deployment\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#deployments'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        fields: repo,message,commit,author,action,eventName,ref,workflow\n      if: always()\n</code></pre>"},{"location":"deployment/#helm-chart-deployment","title":"Helm Chart Deployment","text":"<pre><code># helm/hr-agent/Chart.yaml\napiVersion: v2\nname: hr-agent\ndescription: AI-Powered Job Seeker Platform\nversion: 1.0.0\nappVersion: \"1.0.0\"\n\ndependencies:\n- name: postgresql\n  version: \"12.x.x\"\n  repository: \"https://charts.bitnami.com/bitnami\"\n  condition: postgresql.enabled\n- name: redis\n  version: \"17.x.x\"\n  repository: \"https://charts.bitnami.com/bitnami\"\n  condition: redis.enabled\n- name: nginx-ingress\n  version: \"4.x.x\"\n  repository: \"https://kubernetes.github.io/ingress-nginx\"\n  condition: ingress.enabled\n</code></pre> <pre><code># helm/hr-agent/values.yaml\nglobal:\n  imageRegistry: \"ghcr.io\"\n  imagePullSecrets:\n    - name: registry-secret\n\nreplicaCount:\n  frontend: 3\n  apiGateway: 2\n  userService: 2\n  jobService: 2\n  cvService: 2\n  aiService: 2\n\nimage:\n  repository: hr-agent\n  tag: \"latest\"\n  pullPolicy: Always\n\nservice:\n  type: ClusterIP\n  port: 80\n\ningress:\n  enabled: true\n  className: nginx\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n  hosts:\n    - host: app.hr-agent.com\n      paths:\n        - path: /\n          pathType: Prefix\n          service: frontend\n    - host: api.hr-agent.com\n      paths:\n        - path: /api/v1\n          pathType: Prefix\n          service: api-gateway\n  tls:\n    - secretName: hr-agent-tls\n      hosts:\n        - app.hr-agent.com\n        - api.hr-agent.com\n\nresources:\n  frontend:\n    requests:\n      memory: \"256Mi\"\n      cpu: \"250m\"\n    limits:\n      memory: \"512Mi\"\n      cpu: \"500m\"\n  apiGateway:\n    requests:\n      memory: \"512Mi\"\n      cpu: \"500m\"\n    limits:\n      memory: \"1Gi\"\n      cpu: \"1000m\"\n  userService:\n    requests:\n      memory: \"256Mi\"\n      cpu: \"250m\"\n    limits:\n      memory: \"512Mi\"\n      cpu: \"500m\"\n  aiService:\n    requests:\n      memory: \"1Gi\"\n      cpu: \"1000m\"\n    limits:\n      memory: \"2Gi\"\n      cpu: \"2000m\"\n\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 70\n  targetMemoryUtilizationPercentage: 80\n\npostgresql:\n  enabled: true\n  auth:\n    postgresPassword: \"secure-password\"\n    database: \"hr_agent\"\n  primary:\n    persistence:\n      enabled: true\n      size: 20Gi\n\nredis:\n  enabled: true\n  auth:\n    enabled: true\n    password: \"redis-password\"\n  master:\n    persistence:\n      enabled: true\n      size: 8Gi\n\nmonitoring:\n  enabled: true\n  prometheus:\n    enabled: true\n  grafana:\n    enabled: true\n\nsecrets:\n  jwt:\n    secret: \"your-jwt-secret\"\n  database:\n    connectionString: \"postgresql://user:pass@host:port/db\"\n  openai:\n    apiKey: \"your-openai-key\"\n</code></pre>"},{"location":"deployment/#environment-management","title":"Environment Management","text":""},{"location":"deployment/#environment-configuration","title":"Environment Configuration","text":"<pre><code># environments/development.yaml\nenvironment: development\nnamespace: development\n\nreplicas:\n  frontend: 1\n  backend: 1\n  ai-service: 1\n\nresources:\n  requests:\n    memory: \"128Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"256Mi\"\n    cpu: \"200m\"\n\ndatabase:\n  type: \"sqlite\"\n  host: \"localhost\"\n\nexternal-services:\n  enabled: false\n\n---\n# environments/staging.yaml\nenvironment: staging\nnamespace: staging\n\nreplicas:\n  frontend: 2\n  backend: 2\n  ai-service: 1\n\nresources:\n  requests:\n    memory: \"256Mi\"\n    cpu: \"200m\"\n  limits:\n    memory: \"512Mi\"\n    cpu: \"400m\"\n\ndatabase:\n  type: \"postgresql\"\n  host: \"staging-db.cluster.local\"\n\nexternal-services:\n  enabled: true\n  rate-limits:\n    linkedin: 100/hour\n    indeed: 200/hour\n\n---\n# environments/production.yaml\nenvironment: production\nnamespace: production\n\nreplicas:\n  frontend: 3\n  backend: 3\n  ai-service: 2\n\nresources:\n  requests:\n    memory: \"512Mi\"\n    cpu: \"500m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"1000m\"\n\ndatabase:\n  type: \"postgresql\"\n  host: \"prod-db.cluster.local\"\n  replicas: 3\n\nexternal-services:\n  enabled: true\n  rate-limits:\n    linkedin: 1000/hour\n    indeed: 2000/hour\n</code></pre>"},{"location":"deployment/#secret-management","title":"Secret Management","text":"<pre><code># secret-management.yaml\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: app-secrets\n  namespace: production\nspec:\n  refreshInterval: 1m\n  secretStoreRef:\n    name: aws-secrets-manager\n    kind: SecretStore\n  target:\n    name: app-secrets\n    creationPolicy: Owner\n  data:\n  - secretKey: jwt-secret\n    remoteRef:\n      key: hr-agent/production\n      property: jwt_secret\n  - secretKey: database-url\n    remoteRef:\n      key: hr-agent/production\n      property: database_url\n  - secretKey: openai-api-key\n    remoteRef:\n      key: hr-agent/production\n      property: openai_api_key\n\n---\napiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: aws-secrets-manager\n  namespace: production\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: us-west-2\n      auth:\n        jwt:\n          serviceAccountRef:\n            name: external-secrets-sa\n</code></pre> <p>This deployment strategy provides a comprehensive, scalable, and secure foundation for the HR Agent platform with automated deployments, monitoring, and disaster recovery capabilities.</p>"},{"location":"development/","title":"Development Setup Guide","text":""},{"location":"development/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Project Structure</li> <li>Environment Setup</li> <li>Database Setup</li> <li>Service Configuration</li> <li>Development Workflow</li> <li>Testing Strategy</li> <li>Troubleshooting</li> </ol>"},{"location":"development/#prerequisites","title":"Prerequisites","text":""},{"location":"development/#system-requirements","title":"System Requirements","text":"<ul> <li>Node.js: v18.0.0 or higher</li> <li>Python: v3.11 or higher</li> <li>Docker: v20.0.0 or higher</li> <li>Docker Compose: v2.0.0 or higher</li> <li>Git: v2.30.0 or higher</li> </ul>"},{"location":"development/#development-tools","title":"Development Tools","text":"<ul> <li>VS Code (recommended) with extensions:</li> <li>ESLint</li> <li>Prettier</li> <li>TypeScript and JavaScript Language Features</li> <li>Python Extension Pack</li> <li>Docker Extension</li> <li>REST Client</li> <li>Postman or Insomnia for API testing</li> <li>MongoDB Compass for database management</li> <li>Redis Desktop Manager for cache inspection</li> </ul>"},{"location":"development/#package-managers","title":"Package Managers","text":"<pre><code># Install Node.js packages\nnpm install -g yarn pnpm\n\n# Install Python package managers\npip install pipenv poetry\n\n# Install global development tools\nnpm install -g @nestjs/cli\nnpm install -g nodemon\nnpm install -g typescript\npip install black flake8 pytest\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>hr-agent/\n\u251c\u2500\u2500 .env.example                 # Environment variables template\n\u251c\u2500\u2500 .gitignore                   # Git ignore rules\n\u251c\u2500\u2500 docker-compose.yml           # Development containers\n\u251c\u2500\u2500 docker-compose.prod.yml      # Production containers\n\u251c\u2500\u2500 package.json                 # Root package.json for scripts\n\u251c\u2500\u2500 README.md                    # Project documentation\n\u251c\u2500\u2500 docs/                        # Documentation\n\u2502   \u251c\u2500\u2500 api/                     # API documentation\n\u2502   \u251c\u2500\u2500 architecture/            # System architecture\n\u2502   \u251c\u2500\u2500 deployment/              # Deployment guides\n\u2502   \u2514\u2500\u2500 development/             # Development guides\n\u251c\u2500\u2500 frontend/                    # React/Next.js frontend\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 components/          # React components\n\u2502   \u2502   \u251c\u2500\u2500 pages/               # Next.js pages\n\u2502   \u2502   \u251c\u2500\u2500 hooks/               # Custom hooks\n\u2502   \u2502   \u251c\u2500\u2500 services/            # API services\n\u2502   \u2502   \u251c\u2500\u2500 store/               # State management\n\u2502   \u2502   \u251c\u2500\u2500 utils/               # Utility functions\n\u2502   \u2502   \u2514\u2500\u2500 styles/              # Stylesheets\n\u2502   \u251c\u2500\u2500 public/                  # Static assets\n\u2502   \u251c\u2500\u2500 tests/                   # Frontend tests\n\u2502   \u251c\u2500\u2500 package.json             # Frontend dependencies\n\u2502   \u251c\u2500\u2500 next.config.js           # Next.js configuration\n\u2502   \u2514\u2500\u2500 tailwind.config.js       # Tailwind CSS config\n\u251c\u2500\u2500 backend/                     # Backend services\n\u2502   \u251c\u2500\u2500 api-gateway/             # API Gateway service\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 routes/          # Express routes\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 middleware/      # Custom middleware\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utils/           # Utility functions\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 app.js           # Main application\n\u2502   \u2502   \u251c\u2500\u2500 tests/               # Gateway tests\n\u2502   \u2502   \u251c\u2500\u2500 package.json         # Dependencies\n\u2502   \u2502   \u2514\u2500\u2500 Dockerfile           # Container definition\n\u2502   \u251c\u2500\u2500 user-service/            # User management service\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers/     # Request handlers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models/          # Data models\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/        # Business logic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 routes/          # API routes\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 app.js           # Service entry point\n\u2502   \u2502   \u251c\u2500\u2500 tests/               # Service tests\n\u2502   \u2502   \u251c\u2500\u2500 package.json         # Dependencies\n\u2502   \u2502   \u2514\u2500\u2500 Dockerfile           # Container definition\n\u2502   \u251c\u2500\u2500 job-service/             # Job management service\n\u2502   \u251c\u2500\u2500 cv-service/              # CV management service\n\u2502   \u251c\u2500\u2500 ai-service/              # AI/ML service (Python)\n\u2502   \u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api/             # FastAPI routes\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 services/        # Business logic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models/          # ML models\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utils/           # Utilities\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 main.py          # FastAPI app\n\u2502   \u2502   \u251c\u2500\u2500 tests/               # Python tests\n\u2502   \u2502   \u251c\u2500\u2500 requirements.txt     # Python dependencies\n\u2502   \u2502   \u2514\u2500\u2500 Dockerfile           # Container definition\n\u2502   \u2514\u2500\u2500 scraper-service/         # Web scraping service\n\u251c\u2500\u2500 workflows/                   # n8n workflow definitions\n\u2502   \u251c\u2500\u2500 job-scraping.json        # Job scraping workflows\n\u2502   \u251c\u2500\u2500 notifications.json       # Notification workflows\n\u2502   \u2514\u2500\u2500 auto-apply.json          # Auto-apply workflows\n\u251c\u2500\u2500 database/                    # Database schemas and migrations\n\u2502   \u251c\u2500\u2500 mongodb/                 # MongoDB schemas\n\u2502   \u251c\u2500\u2500 postgresql/              # PostgreSQL migrations\n\u2502   \u2514\u2500\u2500 redis/                   # Redis configurations\n\u251c\u2500\u2500 infrastructure/              # Infrastructure as Code\n\u2502   \u251c\u2500\u2500 docker/                  # Docker configurations\n\u2502   \u251c\u2500\u2500 kubernetes/              # K8s manifests\n\u2502   \u251c\u2500\u2500 terraform/               # AWS/GCP infrastructure\n\u2502   \u2514\u2500\u2500 helm/                    # Helm charts\n\u251c\u2500\u2500 scripts/                     # Development scripts\n\u2502   \u251c\u2500\u2500 setup.sh                 # Initial setup script\n\u2502   \u251c\u2500\u2500 dev-start.sh             # Start development environment\n\u2502   \u251c\u2500\u2500 test.sh                  # Run all tests\n\u2502   \u2514\u2500\u2500 deploy.sh                # Deployment script\n\u2514\u2500\u2500 tests/                       # Integration tests\n    \u251c\u2500\u2500 e2e/                     # End-to-end tests\n    \u251c\u2500\u2500 integration/             # Service integration tests\n    \u2514\u2500\u2500 performance/             # Performance tests\n</code></pre>"},{"location":"development/#environment-setup","title":"Environment Setup","text":""},{"location":"development/#1-clone-repository","title":"1. Clone Repository","text":"<pre><code>git clone https://github.com/your-org/hr-agent.git\ncd hr-agent\n</code></pre>"},{"location":"development/#2-initial-setup-script","title":"2. Initial Setup Script","text":"<pre><code># Make setup script executable\nchmod +x scripts/setup.sh\n\n# Run setup script\n./scripts/setup.sh\n</code></pre>"},{"location":"development/#3-environment-variables","title":"3. Environment Variables","text":"<pre><code># Copy environment template\ncp .env.example .env\n\n# Edit environment variables\nnano .env\n</code></pre>"},{"location":"development/#environment-variables-configuration","title":"Environment Variables Configuration","text":"<pre><code># .env\n# =============================================================================\n# GENERAL CONFIGURATION\n# =============================================================================\nNODE_ENV=development\nLOG_LEVEL=debug\nAPI_VERSION=v1\n\n# =============================================================================\n# DATABASE CONFIGURATION\n# =============================================================================\n# MongoDB\nMONGODB_URI=mongodb://localhost:27017/hr_agent_dev\nMONGODB_TEST_URI=mongodb://localhost:27017/hr_agent_test\n\n# PostgreSQL (for n8n and analytics)\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=hr_agent_dev\nPOSTGRES_USER=hr_agent\nPOSTGRES_PASSWORD=dev_password\n\n# Redis\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=redis_dev_password\nREDIS_DB=0\n\n# =============================================================================\n# SERVICE CONFIGURATION\n# =============================================================================\n# API Gateway\nAPI_GATEWAY_PORT=8000\nAPI_GATEWAY_HOST=localhost\n\n# User Service\nUSER_SERVICE_PORT=8001\nUSER_SERVICE_HOST=localhost\n\n# Job Service\nJOB_SERVICE_PORT=8002\nJOB_SERVICE_HOST=localhost\n\n# CV Service\nCV_SERVICE_PORT=8003\nCV_SERVICE_HOST=localhost\n\n# AI Service\nAI_SERVICE_PORT=8004\nAI_SERVICE_HOST=localhost\n\n# Scraper Service\nSCRAPER_SERVICE_PORT=8005\nSCRAPER_SERVICE_HOST=localhost\n\n# Frontend\nFRONTEND_PORT=3000\nFRONTEND_HOST=localhost\nNEXT_PUBLIC_API_BASE_URL=http://localhost:8000\n\n# n8n Workflow Engine\nN8N_PORT=5678\nN8N_HOST=localhost\nN8N_BASIC_AUTH_ACTIVE=true\nN8N_BASIC_AUTH_USER=admin\nN8N_BASIC_AUTH_PASSWORD=dev_password\n\n# =============================================================================\n# AUTHENTICATION &amp; SECURITY\n# =============================================================================\nJWT_SECRET=your_jwt_secret_key_for_development\nJWT_EXPIRES_IN=24h\nREFRESH_TOKEN_SECRET=your_refresh_token_secret\nBCRYPT_ROUNDS=10\n\n# Firebase Configuration\nFIREBASE_PROJECT_ID=hr-agent-dev\nFIREBASE_CLIENT_EMAIL=firebase-adminsdk@hr-agent-dev.iam.gserviceaccount.com\nFIREBASE_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\"\nFIREBASE_DATABASE_URL=https://hr-agent-dev.firebaseio.com\n\n# =============================================================================\n# EXTERNAL API KEYS\n# =============================================================================\n# OpenAI\nOPENAI_API_KEY=sk-your-openai-api-key\nOPENAI_MODEL=gpt-4\n\n# Claude (Anthropic)\nANTHROPIC_API_KEY=sk-ant-your-anthropic-key\n\n# Job Board APIs\nLINKEDIN_CLIENT_ID=your_linkedin_client_id\nLINKEDIN_CLIENT_SECRET=your_linkedin_client_secret\nINDEED_PUBLISHER_ID=your_indeed_publisher_id\nGLASSDOOR_PARTNER_ID=your_glassdoor_partner_id\nGLASSDOOR_API_KEY=your_glassdoor_api_key\n\n# =============================================================================\n# CLOUD STORAGE\n# =============================================================================\n# AWS S3\nAWS_ACCESS_KEY_ID=your_aws_access_key\nAWS_SECRET_ACCESS_KEY=your_aws_secret_key\nAWS_REGION=us-west-2\nAWS_S3_BUCKET=hr-agent-dev-storage\n\n# Google Cloud Storage\nGOOGLE_CLOUD_PROJECT_ID=hr-agent-dev\nGOOGLE_CLOUD_KEYFILE=path/to/service-account.json\nGOOGLE_CLOUD_STORAGE_BUCKET=hr-agent-dev-gcs\n\n# =============================================================================\n# EMAIL &amp; NOTIFICATIONS\n# =============================================================================\n# SendGrid\nSENDGRID_API_KEY=your_sendgrid_api_key\nFROM_EMAIL=noreply@hr-agent.com\nFROM_NAME=HR Agent Platform\n\n# Twilio (SMS)\nTWILIO_ACCOUNT_SID=your_twilio_account_sid\nTWILIO_AUTH_TOKEN=your_twilio_auth_token\nTWILIO_PHONE_NUMBER=+1234567890\n\n# Slack (for notifications)\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/slack/webhook\n\n# =============================================================================\n# MONITORING &amp; ANALYTICS\n# =============================================================================\n# Sentry (Error tracking)\nSENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id\n\n# Google Analytics\nGOOGLE_ANALYTICS_ID=GA-XXXXXXXXX\n\n# =============================================================================\n# DEVELOPMENT TOOLS\n# =============================================================================\n# Hot reload and development\nCHOKIDAR_USEPOLLING=true\nFAST_REFRESH=true\n\n# Testing\nTEST_TIMEOUT=30000\nJEST_TIMEOUT=30000\n\n# =============================================================================\n# FEATURE FLAGS\n# =============================================================================\nENABLE_AUTO_APPLY=true\nENABLE_AI_RECOMMENDATIONS=true\nENABLE_WEB_SCRAPING=true\nENABLE_PREMIUM_FEATURES=false\n</code></pre>"},{"location":"development/#database-setup","title":"Database Setup","text":""},{"location":"development/#1-mongodb-setup","title":"1. MongoDB Setup","text":"<pre><code># Start MongoDB with Docker\ndocker run -d \\\n  --name mongodb-dev \\\n  -p 27017:27017 \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=admin123 \\\n  -v mongodb_data:/data/db \\\n  mongo:6.0\n\n# Create development database and user\nmongosh mongodb://admin:admin123@localhost:27017/admin\n</code></pre> <pre><code>// MongoDB setup commands\nuse hr_agent_dev;\n\n// Create application user\ndb.createUser({\n  user: \"hr_agent\",\n  pwd: \"dev_password\",\n  roles: [\n    { role: \"readWrite\", db: \"hr_agent_dev\" },\n    { role: \"readWrite\", db: \"hr_agent_test\" }\n  ]\n});\n\n// Create collections with indexes\ndb.users.createIndex({ email: 1 }, { unique: true });\ndb.users.createIndex({ \"profile.location.coordinates\": \"2dsphere\" });\n\ndb.jobs.createIndex({ title: \"text\", description: \"text\" });\ndb.jobs.createIndex({ \"location.coordinates\": \"2dsphere\" });\ndb.jobs.createIndex({ skills: 1 });\ndb.jobs.createIndex({ createdAt: -1 });\ndb.jobs.createIndex({ isActive: 1, createdAt: -1 });\n\ndb.cvs.createIndex({ userId: 1 });\ndb.cvs.createIndex({ \"skills.name\": 1 });\n\ndb.applications.createIndex({ applicantId: 1, createdAt: -1 });\ndb.applications.createIndex({ jobId: 1 });\ndb.applications.createIndex({ status: 1 });\n</code></pre>"},{"location":"development/#2-postgresql-setup-for-n8n","title":"2. PostgreSQL Setup (for n8n)","text":"<pre><code># Start PostgreSQL with Docker\ndocker run -d \\\n  --name postgres-dev \\\n  -p 5432:5432 \\\n  -e POSTGRES_DB=hr_agent_dev \\\n  -e POSTGRES_USER=hr_agent \\\n  -e POSTGRES_PASSWORD=dev_password \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  postgres:14\n\n# Connect and create n8n database\npsql -h localhost -U hr_agent -d hr_agent_dev\n</code></pre> <pre><code>-- Create n8n database\nCREATE DATABASE n8n_dev;\nGRANT ALL PRIVILEGES ON DATABASE n8n_dev TO hr_agent;\n\n-- Create analytics tables\nCREATE SCHEMA analytics;\n\nCREATE TABLE analytics.user_events (\n    id SERIAL PRIMARY KEY,\n    user_id VARCHAR(255) NOT NULL,\n    event_type VARCHAR(100) NOT NULL,\n    event_data JSONB,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    session_id VARCHAR(255)\n);\n\nCREATE TABLE analytics.job_metrics (\n    id SERIAL PRIMARY KEY,\n    job_id VARCHAR(255) NOT NULL,\n    views INTEGER DEFAULT 0,\n    applications INTEGER DEFAULT 0,\n    date DATE DEFAULT CURRENT_DATE,\n    UNIQUE(job_id, date)\n);\n\n-- Create indexes\nCREATE INDEX idx_user_events_user_id ON analytics.user_events(user_id);\nCREATE INDEX idx_user_events_timestamp ON analytics.user_events(timestamp);\nCREATE INDEX idx_job_metrics_job_id ON analytics.job_metrics(job_id);\n</code></pre>"},{"location":"development/#3-redis-setup","title":"3. Redis Setup","text":"<pre><code># Start Redis with Docker\ndocker run -d \\\n  --name redis-dev \\\n  -p 6379:6379 \\\n  redis:7-alpine redis-server --requirepass redis_dev_password\n\n# Test connection\nredis-cli -h localhost -p 6379 -a redis_dev_password ping\n</code></pre>"},{"location":"development/#service-configuration","title":"Service Configuration","text":""},{"location":"development/#1-docker-compose-development-setup","title":"1. Docker Compose Development Setup","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  # Databases\n  mongodb:\n    image: mongo:6.0\n    container_name: hr-agent-mongodb-dev\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: admin\n      MONGO_INITDB_ROOT_PASSWORD: admin123\n      MONGO_INITDB_DATABASE: hr_agent_dev\n    volumes:\n      - mongodb_data:/data/db\n      - ./database/mongodb/init.js:/docker-entrypoint-initdb.d/init.js\n    networks:\n      - hr-agent-network\n\n  postgres:\n    image: postgres:14\n    container_name: hr-agent-postgres-dev\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_DB: hr_agent_dev\n      POSTGRES_USER: hr_agent\n      POSTGRES_PASSWORD: dev_password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./database/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql\n    networks:\n      - hr-agent-network\n\n  redis:\n    image: redis:7-alpine\n    container_name: hr-agent-redis-dev\n    ports:\n      - \"6379:6379\"\n    command: redis-server --requirepass redis_dev_password\n    volumes:\n      - redis_data:/data\n    networks:\n      - hr-agent-network\n\n  # Core Services\n  api-gateway:\n    build:\n      context: ./backend/api-gateway\n      target: development\n    container_name: hr-agent-api-gateway-dev\n    ports:\n      - \"8000:8000\"\n    environment:\n      - NODE_ENV=development\n      - PORT=8000\n    volumes:\n      - ./backend/api-gateway:/app\n      - /app/node_modules\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - hr-agent-network\n    command: npm run dev\n\n  user-service:\n    build:\n      context: ./backend/user-service\n      target: development\n    container_name: hr-agent-user-service-dev\n    ports:\n      - \"8001:8001\"\n    environment:\n      - NODE_ENV=development\n      - PORT=8001\n    volumes:\n      - ./backend/user-service:/app\n      - /app/node_modules\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - hr-agent-network\n    command: npm run dev\n\n  job-service:\n    build:\n      context: ./backend/job-service\n      target: development\n    container_name: hr-agent-job-service-dev\n    ports:\n      - \"8002:8002\"\n    environment:\n      - NODE_ENV=development\n      - PORT=8002\n    volumes:\n      - ./backend/job-service:/app\n      - /app/node_modules\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - hr-agent-network\n    command: npm run dev\n\n  cv-service:\n    build:\n      context: ./backend/cv-service\n      target: development\n    container_name: hr-agent-cv-service-dev\n    ports:\n      - \"8003:8003\"\n    environment:\n      - NODE_ENV=development\n      - PORT=8003\n    volumes:\n      - ./backend/cv-service:/app\n      - /app/node_modules\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - hr-agent-network\n    command: npm run dev\n\n  ai-service:\n    build:\n      context: ./backend/ai-service\n      target: development\n    container_name: hr-agent-ai-service-dev\n    ports:\n      - \"8004:8004\"\n    environment:\n      - PYTHONPATH=/app\n      - DEBUG=true\n    volumes:\n      - ./backend/ai-service:/app\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - hr-agent-network\n    command: uvicorn main:app --host 0.0.0.0 --port 8004 --reload\n\n  scraper-service:\n    build:\n      context: ./backend/scraper-service\n      target: development\n    container_name: hr-agent-scraper-service-dev\n    ports:\n      - \"8005:8005\"\n    environment:\n      - PYTHONPATH=/app\n      - DEBUG=true\n    volumes:\n      - ./backend/scraper-service:/app\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - hr-agent-network\n    command: uvicorn main:app --host 0.0.0.0 --port 8005 --reload\n\n  # Frontend\n  frontend:\n    build:\n      context: ./frontend\n      target: development\n    container_name: hr-agent-frontend-dev\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=development\n      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8000\n    volumes:\n      - ./frontend:/app\n      - /app/node_modules\n      - /app/.next\n    depends_on:\n      - api-gateway\n    networks:\n      - hr-agent-network\n    command: npm run dev\n\n  # n8n Workflow Engine\n  n8n:\n    image: n8nio/n8n:latest\n    container_name: hr-agent-n8n-dev\n    ports:\n      - \"5678:5678\"\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=dev_password\n      - N8N_HOST=localhost\n      - N8N_PORT=5678\n      - N8N_PROTOCOL=http\n      - NODE_ENV=development\n      - WEBHOOK_URL=http://localhost:5678\n      - DB_TYPE=postgresdb\n      - DB_POSTGRESDB_HOST=postgres\n      - DB_POSTGRESDB_PORT=5432\n      - DB_POSTGRESDB_DATABASE=n8n_dev\n      - DB_POSTGRESDB_USER=hr_agent\n      - DB_POSTGRESDB_PASSWORD=dev_password\n    volumes:\n      - n8n_data:/home/node/.n8n\n      - ./workflows:/home/node/.n8n/workflows\n    depends_on:\n      - postgres\n    networks:\n      - hr-agent-network\n\nvolumes:\n  mongodb_data:\n  postgres_data:\n  redis_data:\n  n8n_data:\n\nnetworks:\n  hr-agent-network:\n    driver: bridge\n</code></pre>"},{"location":"development/#2-development-dockerfiles","title":"2. Development Dockerfiles","text":""},{"location":"development/#frontend-dockerfile-development","title":"Frontend Dockerfile (Development)","text":"<pre><code># frontend/Dockerfile\nFROM node:18-alpine AS base\nWORKDIR /app\n\nFROM base AS dependencies\nCOPY package*.json ./\nRUN npm ci\n\nFROM base AS development\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"run\", \"dev\"]\n\nFROM base AS builder\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM base AS production\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\nUSER nextjs\nEXPOSE 3000\nENV PORT 3000\nCMD [\"node\", \"server.js\"]\n</code></pre>"},{"location":"development/#backend-service-dockerfile-development","title":"Backend Service Dockerfile (Development)","text":"<pre><code># backend/*/Dockerfile\nFROM node:18-alpine AS base\nWORKDIR /app\n\nFROM base AS dependencies\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM base AS development\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nEXPOSE 8000\nCMD [\"npm\", \"run\", \"dev\"]\n\nFROM base AS builder\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM base AS production\nCOPY --from=dependencies /app/node_modules ./node_modules\nCOPY --from=builder /app/dist ./dist\nCOPY package*.json ./\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\nUSER nextjs\nEXPOSE 8000\nCMD [\"node\", \"dist/app.js\"]\n</code></pre>"},{"location":"development/#python-service-dockerfile-development","title":"Python Service Dockerfile (Development)","text":"<pre><code># backend/ai-service/Dockerfile\nFROM python:3.11-slim AS base\nWORKDIR /app\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nFROM base AS dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nFROM base AS development\nCOPY requirements.txt requirements-dev.txt ./\nRUN pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt\nCOPY . .\nEXPOSE 8004\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8004\", \"--reload\"]\n\nFROM base AS production\nCOPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=dependencies /usr/local/bin /usr/local/bin\nCOPY . .\nRUN useradd --create-home --shell /bin/bash app\nUSER app\nEXPOSE 8004\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8004\"]\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#1-starting-development-environment","title":"1. Starting Development Environment","text":"<pre><code># Start all services\n./scripts/dev-start.sh\n\n# Or manually with Docker Compose\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f api-gateway\ndocker-compose logs -f frontend\n</code></pre>"},{"location":"development/#2-development-scripts","title":"2. Development Scripts","text":"<pre><code># scripts/dev-start.sh\n#!/bin/bash\nset -e\n\necho \"\ud83d\ude80 Starting HR Agent Development Environment...\"\n\n# Check if Docker is running\nif ! docker info &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u274c Docker is not running. Please start Docker first.\"\n    exit 1\nfi\n\n# Create network if it doesn't exist\ndocker network create hr-agent-network 2&gt;/dev/null || true\n\n# Start databases first\necho \"\ud83d\udce6 Starting databases...\"\ndocker-compose up -d mongodb postgres redis\n\n# Wait for databases to be ready\necho \"\u23f3 Waiting for databases to be ready...\"\nsleep 10\n\n# Start services\necho \"\ud83d\udd27 Starting backend services...\"\ndocker-compose up -d api-gateway user-service job-service cv-service ai-service scraper-service\n\n# Start frontend\necho \"\ud83c\udfa8 Starting frontend...\"\ndocker-compose up -d frontend\n\n# Start n8n\necho \"\ud83d\udd04 Starting workflow engine...\"\ndocker-compose up -d n8n\n\necho \"\u2705 Development environment started!\"\necho \"\"\necho \"\ud83c\udf10 Services are available at:\"\necho \"  Frontend:     http://localhost:3000\"\necho \"  API Gateway:  http://localhost:8000\"\necho \"  n8n:          http://localhost:5678 (admin/dev_password)\"\necho \"\"\necho \"\ud83d\udcca Databases:\"\necho \"  MongoDB:      mongodb://localhost:27017\"\necho \"  PostgreSQL:   postgresql://localhost:5432\"\necho \"  Redis:        redis://localhost:6379\"\necho \"\"\necho \"\ud83d\udd0d To view logs: docker-compose logs -f [service-name]\"\necho \"\ud83d\uded1 To stop: docker-compose down\"\n</code></pre>"},{"location":"development/#3-hot-reloading-setup","title":"3. Hot Reloading Setup","text":""},{"location":"development/#frontend-nextjs","title":"Frontend (Next.js)","text":"<pre><code>// frontend/package.json\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"dev:turbo\": \"next dev --turbo\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"@types/react\": \"^18.0.0\",\n    \"typescript\": \"^4.9.0\",\n    \"eslint\": \"^8.0.0\",\n    \"eslint-config-next\": \"^13.0.0\"\n  }\n}\n</code></pre>"},{"location":"development/#backend-services-nodejs","title":"Backend Services (Node.js)","text":"<pre><code>// backend/*/package.json\n{\n  \"scripts\": {\n    \"dev\": \"nodemon --exec ts-node src/app.ts\",\n    \"dev:debug\": \"nodemon --exec 'node --inspect=0.0.0.0:9229 -r ts-node/register' src/app.ts\",\n    \"build\": \"tsc\",\n    \"start\": \"node dist/app.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"lint\": \"eslint src/**/*.ts\",\n    \"format\": \"prettier --write src/**/*.ts\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"@types/express\": \"^4.17.0\",\n    \"typescript\": \"^4.9.0\",\n    \"ts-node\": \"^10.9.0\",\n    \"nodemon\": \"^2.0.0\",\n    \"jest\": \"^29.0.0\",\n    \"@types/jest\": \"^29.0.0\"\n  }\n}\n</code></pre>"},{"location":"development/#python-services","title":"Python Services","text":"<pre><code># backend/ai-service/requirements-dev.txt\nuvicorn[standard]==0.20.0\nfastapi==0.95.0\npytest==7.2.0\npytest-asyncio==0.21.0\nblack==23.1.0\nflake8==6.0.0\nmypy==1.1.0\npre-commit==3.1.0\n</code></pre>"},{"location":"development/#4-ide-configuration","title":"4. IDE Configuration","text":""},{"location":"development/#vs-code-settings","title":"VS Code Settings","text":"<pre><code>// .vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true,\n    \"source.organizeImports\": true\n  },\n  \"python.formatting.provider\": \"black\",\n  \"python.linting.enabled\": true,\n  \"python.linting.flake8Enabled\": true,\n  \"eslint.workingDirectories\": [\n    \"frontend\",\n    \"backend/api-gateway\",\n    \"backend/user-service\",\n    \"backend/job-service\",\n    \"backend/cv-service\"\n  ],\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"files.exclude\": {\n    \"**/node_modules\": true,\n    \"**/__pycache__\": true,\n    \"**/dist\": true,\n    \"**/.next\": true\n  },\n  \"search.exclude\": {\n    \"**/node_modules\": true,\n    \"**/dist\": true,\n    \"**/.next\": true\n  }\n}\n</code></pre>"},{"location":"development/#vs-code-extensions","title":"VS Code Extensions","text":"<pre><code>// .vscode/extensions.json\n{\n  \"recommendations\": [\n    \"esbenp.prettier-vscode\",\n    \"dbaeumer.vscode-eslint\",\n    \"ms-python.python\",\n    \"ms-python.flake8\",\n    \"ms-python.black-formatter\",\n    \"bradlc.vscode-tailwindcss\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"ms-azuretools.vscode-docker\",\n    \"humao.rest-client\",\n    \"mongodb.mongodb-vscode\",\n    \"ms-vscode.vscode-json\"\n  ]\n}\n</code></pre>"},{"location":"development/#vs-code-tasks","title":"VS Code Tasks","text":"<pre><code>// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Start Development Environment\",\n      \"type\": \"shell\",\n      \"command\": \"./scripts/dev-start.sh\",\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"Stop Development Environment\",\n      \"type\": \"shell\",\n      \"command\": \"docker-compose down\",\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    },\n    {\n      \"label\": \"Run Frontend Tests\",\n      \"type\": \"shell\",\n      \"command\": \"npm test\",\n      \"options\": {\n        \"cwd\": \"${workspaceFolder}/frontend\"\n      },\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    },\n    {\n      \"label\": \"Run Backend Tests\",\n      \"type\": \"shell\",\n      \"command\": \"./scripts/test.sh\",\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"development/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/#1-testing-setup-script","title":"1. Testing Setup Script","text":"<pre><code># scripts/test.sh\n#!/bin/bash\nset -e\n\necho \"\ud83e\uddea Running HR Agent Test Suite...\"\n\n# Start test databases\necho \"\ud83d\uddc4\ufe0f Starting test databases...\"\ndocker-compose -f docker-compose.test.yml up -d mongodb-test postgres-test redis-test\n\n# Wait for databases\nsleep 5\n\n# Run frontend tests\necho \"\ud83c\udfa8 Running frontend tests...\"\ncd frontend\nnpm test -- --coverage --watchAll=false\ncd ..\n\n# Run backend service tests\necho \"\ud83d\udd27 Running backend service tests...\"\nservices=(\"api-gateway\" \"user-service\" \"job-service\" \"cv-service\")\n\nfor service in \"${services[@]}\"; do\n    echo \"Testing $service...\"\n    cd \"backend/$service\"\n    npm test -- --coverage --passWithNoTests\n    cd ../..\ndone\n\n# Run Python service tests\necho \"\ud83d\udc0d Running Python service tests...\"\npython_services=(\"ai-service\" \"scraper-service\")\n\nfor service in \"${python_services[@]}\"; do\n    echo \"Testing $service...\"\n    cd \"backend/$service\"\n    python -m pytest tests/ --cov=src --cov-report=term-missing\n    cd ../..\ndone\n\n# Run integration tests\necho \"\ud83d\udd17 Running integration tests...\"\ncd tests/integration\nnpm test\ncd ../..\n\n# Run E2E tests\necho \"\ud83c\udf10 Running E2E tests...\"\ncd tests/e2e\nnpm test\ncd ../..\n\n# Cleanup test databases\necho \"\ud83e\uddf9 Cleaning up test environment...\"\ndocker-compose -f docker-compose.test.yml down\n\necho \"\u2705 All tests completed!\"\n</code></pre>"},{"location":"development/#2-test-configuration","title":"2. Test Configuration","text":""},{"location":"development/#jest-configuration-frontend","title":"Jest Configuration (Frontend)","text":"<pre><code>// frontend/jest.config.js\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/tests/setup.ts'],\n  moduleNameMapping: {\n    '^@/(.*)$': '&lt;rootDir&gt;/src/$1',\n  },\n  testPathIgnorePatterns: ['&lt;rootDir&gt;/.next/', '&lt;rootDir&gt;/node_modules/'],\n  collectCoverageFrom: [\n    'src/**/*.{ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/pages/_app.tsx',\n    '!src/pages/_document.tsx',\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 70,\n      functions: 70,\n      lines: 70,\n      statements: 70,\n    },\n  },\n};\n</code></pre>"},{"location":"development/#jest-configuration-backend","title":"Jest Configuration (Backend)","text":"<pre><code>// backend/*/jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/tests/setup.ts'],\n  moduleNameMapping: {\n    '^@/(.*)$': '&lt;rootDir&gt;/src/$1',\n  },\n  collectCoverageFrom: [\n    'src/**/*.ts',\n    '!src/**/*.d.ts',\n    '!src/app.ts',\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n};\n</code></pre>"},{"location":"development/#pytest-configuration-python","title":"Pytest Configuration (Python)","text":"<pre><code># backend/*/pytest.ini\n[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\naddopts = \n    --strict-markers\n    --disable-warnings\n    --cov=src\n    --cov-report=term-missing\n    --cov-report=html:htmlcov\n    --cov-fail-under=80\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    slow: Slow tests\n</code></pre>"},{"location":"development/#3-test-examples","title":"3. Test Examples","text":""},{"location":"development/#frontend-component-test","title":"Frontend Component Test","text":"<pre><code>// frontend/tests/components/Button.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from '@/components/common/Button';\n\ndescribe('Button Component', () =&gt; {\n  test('renders button with correct text', () =&gt; {\n    render(&lt;Button&gt;Click me&lt;/Button&gt;);\n    expect(screen.getByRole('button')).toHaveTextContent('Click me');\n  });\n\n  test('calls onClick handler when clicked', () =&gt; {\n    const handleClick = jest.fn();\n    render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;);\n\n    fireEvent.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  test('applies correct variant styles', () =&gt; {\n    render(&lt;Button variant=\"primary\"&gt;Primary Button&lt;/Button&gt;);\n    expect(screen.getByRole('button')).toHaveClass('bg-blue-600');\n  });\n});\n</code></pre>"},{"location":"development/#backend-service-test","title":"Backend Service Test","text":"<pre><code>// backend/user-service/tests/controllers/userController.test.ts\nimport request from 'supertest';\nimport { app } from '../../src/app';\nimport { User } from '../../src/models/User';\n\ndescribe('User Controller', () =&gt; {\n  beforeEach(async () =&gt; {\n    await User.deleteMany({});\n  });\n\n  describe('POST /api/v1/users/register', () =&gt; {\n    test('should create a new user', async () =&gt; {\n      const userData = {\n        email: 'test@example.com',\n        password: 'password123',\n        userType: 'seeker',\n        firstName: 'Test',\n        lastName: 'User'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/users/register')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user.email).toBe(userData.email);\n      expect(response.body.data.token).toBeDefined();\n    });\n\n    test('should return 400 for invalid email', async () =&gt; {\n      const userData = {\n        email: 'invalid-email',\n        password: 'password123',\n        userType: 'seeker'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/users/register')\n        .send(userData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error.code).toBe('VALIDATION_ERROR');\n    });\n  });\n});\n</code></pre>"},{"location":"development/#python-service-test","title":"Python Service Test","text":"<pre><code># backend/ai-service/tests/test_job_matcher.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom src.services.job_matcher import JobMatcherService\n\nclass TestJobMatcherService:\n    @pytest.fixture\n    def job_matcher(self):\n        return JobMatcherService()\n\n    @pytest.fixture\n    def sample_cv(self):\n        return {\n            \"skills\": [\"Python\", \"React\", \"AWS\"],\n            \"experience\": [\n                {\n                    \"company\": \"TechCorp\",\n                    \"position\": \"Software Engineer\",\n                    \"duration\": 36\n                }\n            ]\n        }\n\n    @pytest.fixture\n    def sample_job(self):\n        return {\n            \"title\": \"Senior Software Engineer\",\n            \"skills\": [\"Python\", \"React\", \"Docker\"],\n            \"requirements\": [\"3+ years experience\"],\n            \"description\": \"We are looking for a senior developer...\"\n        }\n\n    def test_calculate_skill_match(self, job_matcher, sample_cv, sample_job):\n        score = job_matcher.calculate_skill_match(sample_cv, sample_job)\n        assert 0.0 &lt;= score &lt;= 1.0\n        assert score &gt; 0.5  # Should have reasonable match\n\n    def test_match_job_returns_score_and_reasons(self, job_matcher, sample_cv, sample_job):\n        result = job_matcher.match_job(sample_cv, sample_job)\n\n        assert \"score\" in result\n        assert \"reasons\" in result\n        assert isinstance(result[\"score\"], float)\n        assert isinstance(result[\"reasons\"], list)\n\n    @patch('src.services.job_matcher.openai_client')\n    def test_generate_match_explanation(self, mock_openai, job_matcher):\n        mock_openai.completions.create.return_value.choices[0].text = \"Good match because...\"\n\n        explanation = job_matcher.generate_match_explanation(0.85, [\"skill match\"])\n        assert isinstance(explanation, str)\n        assert len(explanation) &gt; 0\n</code></pre>"},{"location":"development/#4-integration-tests","title":"4. Integration Tests","text":"<pre><code>// tests/integration/job-application-flow.test.ts\nimport request from 'supertest';\nimport { MongoMemoryServer } from 'mongodb-memory-server';\nimport mongoose from 'mongoose';\n\ndescribe('Job Application Flow Integration', () =&gt; {\n  let mongoServer: MongoMemoryServer;\n  let userToken: string;\n  let jobId: string;\n  let cvId: string;\n\n  beforeAll(async () =&gt; {\n    mongoServer = await MongoMemoryServer.create();\n    await mongoose.connect(mongoServer.getUri());\n  });\n\n  afterAll(async () =&gt; {\n    await mongoose.connection.dropDatabase();\n    await mongoose.connection.close();\n    await mongoServer.stop();\n  });\n\n  test('complete job application flow', async () =&gt; {\n    // 1. Register user\n    const registerResponse = await request(apiGateway)\n      .post('/api/v1/auth/register')\n      .send({\n        email: 'test@example.com',\n        password: 'password123',\n        userType: 'seeker',\n        firstName: 'Test',\n        lastName: 'User'\n      });\n\n    userToken = registerResponse.body.data.token;\n\n    // 2. Create CV\n    const cvResponse = await request(apiGateway)\n      .post('/api/v1/cv')\n      .set('Authorization', `Bearer ${userToken}`)\n      .send({\n        name: 'Test CV',\n        personalInfo: { firstName: 'Test', lastName: 'User' }\n      });\n\n    cvId = cvResponse.body.data.id;\n\n    // 3. Search for jobs\n    const jobsResponse = await request(apiGateway)\n      .get('/api/v1/jobs?q=software+engineer')\n      .set('Authorization', `Bearer ${userToken}`);\n\n    jobId = jobsResponse.body.data.jobs[0].id;\n\n    // 4. Apply to job\n    const applicationResponse = await request(apiGateway)\n      .post(`/api/v1/jobs/${jobId}/apply`)\n      .set('Authorization', `Bearer ${userToken}`)\n      .send({\n        cvId,\n        coverLetter: 'I am interested in this position...'\n      });\n\n    expect(applicationResponse.status).toBe(201);\n    expect(applicationResponse.body.data.application).toBeDefined();\n\n    // 5. Check application status\n    const applicationsResponse = await request(apiGateway)\n      .get('/api/v1/applications')\n      .set('Authorization', `Bearer ${userToken}`);\n\n    expect(applicationsResponse.body.data.applications).toHaveLength(1);\n    expect(applicationsResponse.body.data.applications[0].status).toBe('pending');\n  });\n});\n</code></pre>"},{"location":"development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"development/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Find process using port\nlsof -i :3000\n\n# Kill process\nkill -9 &lt;PID&gt;\n\n# Or change port in .env\nFRONTEND_PORT=3001\n</code></pre>"},{"location":"development/#2-database-connection-issues","title":"2. Database Connection Issues","text":"<pre><code># Check if databases are running\ndocker ps | grep mongo\ndocker ps | grep postgres\ndocker ps | grep redis\n\n# Check database logs\ndocker logs hr-agent-mongodb-dev\ndocker logs hr-agent-postgres-dev\n\n# Reset databases\ndocker-compose down -v\ndocker-compose up -d mongodb postgres redis\n</code></pre>"},{"location":"development/#3-nodejs-module-issues","title":"3. Node.js Module Issues","text":"<pre><code># Clear node_modules and package-lock.json\nrm -rf node_modules package-lock.json\nnpm install\n\n# Or in Docker\ndocker-compose build --no-cache frontend\ndocker-compose build --no-cache api-gateway\n</code></pre>"},{"location":"development/#4-python-dependencies-issues","title":"4. Python Dependencies Issues","text":"<pre><code># Rebuild Python containers\ndocker-compose build --no-cache ai-service\ndocker-compose build --no-cache scraper-service\n\n# Check Python version\ndocker-compose exec ai-service python --version\n</code></pre>"},{"location":"development/#5-hot-reload-not-working","title":"5. Hot Reload Not Working","text":"<pre><code># Check file watchers limit (Linux)\ncat /proc/sys/fs/inotify/max_user_watches\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf\n\n# Enable polling for Docker volumes\nexport CHOKIDAR_USEPOLLING=true\n</code></pre>"},{"location":"development/#6-environment-variables-not-loading","title":"6. Environment Variables Not Loading","text":"<pre><code># Check if .env file exists\nls -la .env\n\n# Verify environment variables in container\ndocker-compose exec frontend env | grep NEXT_PUBLIC\ndocker-compose exec api-gateway env | grep NODE_ENV\n</code></pre>"},{"location":"development/#debugging-tools","title":"Debugging Tools","text":""},{"location":"development/#1-service-health-checks","title":"1. Service Health Checks","text":"<pre><code># scripts/health-check.sh\n#!/bin/bash\n\nservices=(\"frontend:3000\" \"api-gateway:8000\" \"user-service:8001\" \"job-service:8002\")\n\nfor service in \"${services[@]}\"; do\n    name=$(echo $service | cut -d: -f1)\n    port=$(echo $service | cut -d: -f2)\n\n    if curl -f \"http://localhost:$port/health\" &gt; /dev/null 2&gt;&amp;1; then\n        echo \"\u2705 $name is healthy\"\n    else\n        echo \"\u274c $name is not responding\"\n    fi\ndone\n</code></pre>"},{"location":"development/#2-database-connection-tests","title":"2. Database Connection Tests","text":"<pre><code># Test MongoDB connection\ndocker-compose exec mongodb mongosh --eval \"db.adminCommand('ping')\"\n\n# Test PostgreSQL connection\ndocker-compose exec postgres psql -U hr_agent -d hr_agent_dev -c \"SELECT 1;\"\n\n# Test Redis connection\ndocker-compose exec redis redis-cli ping\n</code></pre>"},{"location":"development/#3-log-aggregation","title":"3. Log Aggregation","text":"<pre><code># scripts/logs.sh\n#!/bin/bash\n\n# Follow logs for all services\ndocker-compose logs -f\n\n# Follow logs for specific service\ndocker-compose logs -f $1\n\n# Get logs for all services with timestamps\ndocker-compose logs -t\n\n# Get recent logs\ndocker-compose logs --tail=100\n</code></pre> <p>This development setup provides a comprehensive environment for building, testing, and debugging the HR Agent platform efficiently.</p>"},{"location":"diagrams/","title":"System Diagrams &amp; Visual Documentation","text":""},{"location":"diagrams/#overview","title":"Overview","text":"<p>This directory contains comprehensive visual documentation for the AI-Powered Job Seeker Platform, including Data Flow Diagrams (DFD), Entity Relationship Diagrams (ERD), Workflow Diagrams, and Architecture Diagrams.</p>"},{"location":"diagrams/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Data Flow Diagrams (DFD)</li> <li>Entity Relationship Diagrams (ERD)</li> <li>Workflow Diagrams</li> <li>System Architecture Diagrams</li> <li>User Interface Flow Diagrams</li> </ol>"},{"location":"diagrams/#diagram-files","title":"Diagram Files","text":""},{"location":"diagrams/#data-flow-diagrams","title":"Data Flow Diagrams","text":"<ul> <li><code>data-flow-diagram.md</code> - Complete DFD documentation</li> <li>Context Diagram (Level 0)</li> <li>System Overview (Level 1)</li> <li>Detailed Process Flows (Level 2)</li> </ul>"},{"location":"diagrams/#entity-relationship-diagrams","title":"Entity Relationship Diagrams","text":"<ul> <li><code>entity-relationship-diagram.md</code> - Complete ERD documentation</li> <li>Conceptual ERD</li> <li>Logical ERD</li> <li>Physical Database Schema</li> </ul>"},{"location":"diagrams/#workflow-diagrams","title":"Workflow Diagrams","text":"<ul> <li><code>workflow-diagrams.md</code> - Complete workflow documentation</li> <li>User Journey Workflows</li> <li>Business Process Workflows</li> <li>Technical Process Workflows</li> <li>n8n Automation Workflows</li> </ul>"},{"location":"diagrams/#architecture-diagrams","title":"Architecture Diagrams","text":"<ul> <li><code>architecture-diagrams.md</code> - System architecture visuals</li> <li>High-level System Architecture</li> <li>Microservices Architecture</li> <li>Deployment Architecture</li> <li>Security Architecture</li> </ul>"},{"location":"diagrams/#diagram-standards","title":"Diagram Standards","text":""},{"location":"diagrams/#notation-standards","title":"Notation Standards","text":"<ul> <li>DFD: Uses Gane-Sarson notation</li> <li>ERD: Uses Chen notation with Crow's foot</li> <li>Workflows: Uses BPMN 2.0 standard</li> <li>Architecture: Uses UML and C4 model</li> </ul>"},{"location":"diagrams/#color-coding","title":"Color Coding","text":"<ul> <li>Blue: External entities and users</li> <li>Green: System processes and services</li> <li>Orange: Data stores and databases</li> <li>Red: Security and authentication</li> <li>Purple: AI/ML services</li> <li>Gray: Infrastructure components</li> </ul>"},{"location":"diagrams/#tools-used","title":"Tools Used","text":"<ul> <li>Mermaid: For interactive diagrams</li> <li>PlantUML: For detailed technical diagrams</li> <li>Draw.io/Lucidchart: For complex workflows</li> <li>ASCII Art: For simple text-based diagrams</li> </ul>"},{"location":"diagrams/#how-to-use-these-diagrams","title":"How to Use These Diagrams","text":""},{"location":"diagrams/#for-developers","title":"For Developers","text":"<ol> <li>Start with the System Architecture diagrams</li> <li>Review DFD for understanding data flows</li> <li>Use ERD for database implementation</li> <li>Follow workflow diagrams for feature implementation</li> </ol>"},{"location":"diagrams/#for-stakeholders","title":"For Stakeholders","text":"<ol> <li>Begin with Context Diagram (DFD Level 0)</li> <li>Review User Journey workflows</li> <li>Examine business process workflows</li> <li>Check high-level architecture</li> </ol>"},{"location":"diagrams/#for-devops-teams","title":"For DevOps Teams","text":"<ol> <li>Focus on Deployment Architecture diagrams</li> <li>Review Infrastructure workflows</li> <li>Use CI/CD process diagrams</li> <li>Check monitoring and alerting flows</li> </ol>"},{"location":"diagrams/#updating-diagrams","title":"Updating Diagrams","text":"<p>When making changes to the system: 1. Update relevant diagrams first 2. Ensure consistency across all related diagrams 3. Update both high-level and detailed views 4. Maintain version history in comments</p>"},{"location":"diagrams/#interactive-diagrams","title":"Interactive Diagrams","text":"<p>Many diagrams in this documentation use Mermaid syntax, which can be rendered interactively in: - GitHub (native support) - VS Code (with Mermaid extension) - Documentation sites (GitBook, etc.) - Online Mermaid editor</p>"},{"location":"diagrams/#diagram-index","title":"Diagram Index","text":"Diagram Type File Level Purpose Context DFD data-flow-diagram.md 0 System overview System DFD data-flow-diagram.md 1 Main processes Process DFD data-flow-diagram.md 2 Detailed flows Conceptual ERD entity-relationship-diagram.md High Business entities Logical ERD entity-relationship-diagram.md Medium Data relationships Physical ERD entity-relationship-diagram.md Low Database schema User Workflows workflow-diagrams.md - User journeys Business Workflows workflow-diagrams.md - Business processes Technical Workflows workflow-diagrams.md - System processes System Architecture architecture-diagrams.md - Overall structure Microservices architecture-diagrams.md - Service details Deployment architecture-diagrams.md - Infrastructure <p>This visual documentation provides comprehensive coverage of the system from multiple perspectives, enabling better understanding, development, and maintenance of the AI-Powered Job Seeker Platform.</p>"},{"location":"diagrams/architecture-diagrams/","title":"Architecture Diagrams","text":""},{"location":"diagrams/architecture-diagrams/#overview","title":"Overview","text":"<p>This document contains comprehensive architecture diagrams for the AI-Powered Job Seeker Platform, showing system structure, component relationships, deployment architecture, and security design.</p>"},{"location":"diagrams/architecture-diagrams/#table-of-contents","title":"Table of Contents","text":"<ol> <li>High-Level System Architecture</li> <li>Microservices Architecture</li> <li>Frontend Architecture</li> <li>Backend Services Architecture</li> <li>Data Architecture</li> <li>Security Architecture</li> <li>Deployment Architecture</li> <li>Network Architecture</li> </ol>"},{"location":"diagrams/architecture-diagrams/#high-level-system-architecture","title":"High-Level System Architecture","text":"<pre><code>graph TB\n    subgraph \"External Users\"\n        JS[Job Seekers]\n        R[Recruiters]\n        A[Administrators]\n    end\n\n    subgraph \"Client Layer\"\n        WEB[Web Application&lt;br/&gt;React/Next.js]\n        MOB[Mobile App&lt;br/&gt;React Native]\n        PWA[Progressive Web App]\n    end\n\n    subgraph \"CDN &amp; Load Balancing\"\n        CDN[CloudFront CDN]\n        ALB[Application Load Balancer]\n    end\n\n    subgraph \"API Gateway Layer\"\n        AG[API Gateway&lt;br/&gt;Express.js]\n        AUTH[Authentication&lt;br/&gt;Middleware]\n        RL[Rate Limiting]\n        LOG[Logging &amp; Monitoring]\n    end\n\n    subgraph \"Microservices Layer\"\n        US[User Service]\n        CVS[CV Service]\n        JS_SVC[Job Service]\n        AS[Application Service]\n        NS[Notification Service]\n        AIS[AI Service]\n        ANS[Analytics Service]\n    end\n\n    subgraph \"Workflow Engine\"\n        N8N[n8n Workflow Engine]\n        WF[Custom Workflows]\n    end\n\n    subgraph \"Data Layer\"\n        MONGO[(MongoDB&lt;br/&gt;Primary Data)]\n        POSTGRES[(PostgreSQL&lt;br/&gt;Analytics)]\n        REDIS[(Redis&lt;br/&gt;Cache)]\n        S3[(S3&lt;br/&gt;File Storage)]\n    end\n\n    subgraph \"External Services\"\n        AI_EXT[AI APIs&lt;br/&gt;OpenAI, Claude]\n        JB_EXT[Job Boards&lt;br/&gt;LinkedIn, Indeed]\n        EMAIL[Email Service&lt;br/&gt;SendGrid]\n        SMS[SMS Service&lt;br/&gt;Twilio]\n        PAY[Payment&lt;br/&gt;Stripe]\n    end\n\n    subgraph \"Infrastructure\"\n        K8S[Kubernetes Cluster]\n        MON[Monitoring&lt;br/&gt;Prometheus/Grafana]\n        CI_CD[CI/CD Pipeline&lt;br/&gt;GitHub Actions]\n    end\n\n    %% Client connections\n    JS --&gt; WEB\n    R --&gt; WEB\n    A --&gt; WEB\n    JS --&gt; MOB\n    R --&gt; PWA\n\n    %% CDN and Load Balancing\n    WEB --&gt; CDN\n    MOB --&gt; ALB\n    PWA --&gt; CDN\n    CDN --&gt; ALB\n\n    %% API Gateway\n    ALB --&gt; AG\n    AG --&gt; AUTH\n    AG --&gt; RL\n    AG --&gt; LOG\n\n    %% Microservices\n    AG --&gt; US\n    AG --&gt; CVS\n    AG --&gt; JS_SVC\n    AG --&gt; AS\n    AG --&gt; NS\n    AG --&gt; AIS\n    AG --&gt; ANS\n\n    %% Workflow connections\n    N8N --&gt; WF\n    WF --&gt; JB_EXT\n    WF --&gt; US\n    WF --&gt; AS\n\n    %% Data connections\n    US --&gt; MONGO\n    CVS --&gt; MONGO\n    JS_SVC --&gt; MONGO\n    AS --&gt; MONGO\n    ANS --&gt; POSTGRES\n    US --&gt; REDIS\n    CVS --&gt; S3\n\n    %% External service connections\n    AIS --&gt; AI_EXT\n    WF --&gt; JB_EXT\n    NS --&gt; EMAIL\n    NS --&gt; SMS\n    AG --&gt; PAY\n\n    %% Infrastructure\n    K8S --&gt; MON\n    CI_CD --&gt; K8S\n\n    %% Styling\n    classDef user fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef client fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef gateway fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef service fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef data fill:#ffebee,stroke:#c62828,stroke-width:2px\n    classDef external fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n    classDef infra fill:#fafafa,stroke:#424242,stroke-width:2px\n\n    class JS,R,A user\n    class WEB,MOB,PWA client\n    class CDN,ALB,AG,AUTH,RL,LOG gateway\n    class US,CVS,JS_SVC,AS,NS,AIS,ANS,N8N,WF service\n    class MONGO,POSTGRES,REDIS,S3 data\n    class AI_EXT,JB_EXT,EMAIL,SMS,PAY external\n    class K8S,MON,CI_CD infra</code></pre>"},{"location":"diagrams/architecture-diagrams/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>graph TB\n    subgraph \"API Gateway\"\n        AG[API Gateway]\n        AUTH_MW[Auth Middleware]\n        RATE_MW[Rate Limiting]\n        LOG_MW[Logging Middleware]\n        CORS_MW[CORS Middleware]\n    end\n\n    subgraph \"Core Services\"\n        subgraph \"User Management\"\n            US[User Service&lt;br/&gt;:3001]\n            PROFILE[Profile Management]\n            PREF[User Preferences]\n        end\n\n        subgraph \"CV Management\"\n            CVS[CV Service&lt;br/&gt;:3002]\n            TEMPLATE[Template Engine]\n            PDF[PDF Generator]\n            PARSER[CV Parser]\n        end\n\n        subgraph \"Job Management\"\n            JS_SVC[Job Service&lt;br/&gt;:3003]\n            SEARCH[Search Engine]\n            FILTER[Advanced Filtering]\n            GEO[Geolocation Service]\n        end\n\n        subgraph \"Application Processing\"\n            AS[Application Service&lt;br/&gt;:3004]\n            TRACK[Application Tracking]\n            STATUS[Status Management]\n            INTERVIEW[Interview Scheduling]\n        end\n    end\n\n    subgraph \"AI &amp; ML Services\"\n        AIS[AI Service&lt;br/&gt;:8000]\n        ML_MATCH[Job Matching ML]\n        NLP[NLP Processing]\n        EMBED[Embedding Service]\n        CHAT[Conversational AI]\n    end\n\n    subgraph \"Notification Services\"\n        NS[Notification Service&lt;br/&gt;:3005]\n        EMAIL_SVC[Email Service]\n        SMS_SVC[SMS Service]\n        PUSH_SVC[Push Notifications]\n        IN_APP[In-App Notifications]\n    end\n\n    subgraph \"Analytics &amp; Reporting\"\n        ANS[Analytics Service&lt;br/&gt;:3006]\n        METRICS[Metrics Collection]\n        REPORTS[Report Generation]\n        INSIGHTS[Business Insights]\n        DASHBOARD[Dashboard API]\n    end\n\n    subgraph \"Workflow Automation\"\n        WAS[Workflow Service&lt;br/&gt;:3007]\n        AUTO_APPLY[Auto-Apply Engine]\n        SCRAPER[Job Scraping]\n        SCHEDULER[Task Scheduler]\n    end\n\n    subgraph \"Data Services\"\n        DS[Data Service&lt;br/&gt;:3008]\n        SYNC[Data Synchronization]\n        BACKUP[Backup Management]\n        MIGRATION[Data Migration]\n    end\n\n    %% Gateway to Services\n    AG --&gt; US\n    AG --&gt; CVS\n    AG --&gt; JS_SVC\n    AG --&gt; AS\n    AG --&gt; AIS\n    AG --&gt; NS\n    AG --&gt; ANS\n    AG --&gt; WAS\n    AG --&gt; DS\n\n    %% Middleware flow\n    AG --&gt; AUTH_MW\n    AG --&gt; RATE_MW\n    AG --&gt; LOG_MW\n    AG --&gt; CORS_MW\n\n    %% Internal service connections\n    US --&gt; PROFILE\n    US --&gt; PREF\n    CVS --&gt; TEMPLATE\n    CVS --&gt; PDF\n    CVS --&gt; PARSER\n    JS_SVC --&gt; SEARCH\n    JS_SVC --&gt; FILTER\n    JS_SVC --&gt; GEO\n    AS --&gt; TRACK\n    AS --&gt; STATUS\n    AS --&gt; INTERVIEW\n\n    %% AI service components\n    AIS --&gt; ML_MATCH\n    AIS --&gt; NLP\n    AIS --&gt; EMBED\n    AIS --&gt; CHAT\n\n    %% Notification components\n    NS --&gt; EMAIL_SVC\n    NS --&gt; SMS_SVC\n    NS --&gt; PUSH_SVC\n    NS --&gt; IN_APP\n\n    %% Analytics components\n    ANS --&gt; METRICS\n    ANS --&gt; REPORTS\n    ANS --&gt; INSIGHTS\n    ANS --&gt; DASHBOARD\n\n    %% Workflow components\n    WAS --&gt; AUTO_APPLY\n    WAS --&gt; SCRAPER\n    WAS --&gt; SCHEDULER\n\n    %% Data service components\n    DS --&gt; SYNC\n    DS --&gt; BACKUP\n    DS --&gt; MIGRATION\n\n    %% Inter-service communication\n    AS -.-&gt; CVS\n    AS -.-&gt; JS_SVC\n    ML_MATCH -.-&gt; CVS\n    ML_MATCH -.-&gt; JS_SVC\n    AUTO_APPLY -.-&gt; AS\n    SCRAPER -.-&gt; JS_SVC\n    METRICS -.-&gt; US\n    METRICS -.-&gt; AS\n\n    %% Styling\n    classDef gateway fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef service fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef notification fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef analytics fill:#ffebee,stroke:#c62828,stroke-width:2px\n    classDef workflow fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n    classDef data fill:#fce4ec,stroke:#ad1457,stroke-width:2px\n    classDef middleware fill:#f9f9f9,stroke:#757575,stroke-width:1px\n\n    class AG,AUTH_MW,RATE_MW,LOG_MW,CORS_MW gateway\n    class US,CVS,JS_SVC,AS,PROFILE,PREF,TEMPLATE,PDF,PARSER,SEARCH,FILTER,GEO,TRACK,STATUS,INTERVIEW service\n    class AIS,ML_MATCH,NLP,EMBED,CHAT ai\n    class NS,EMAIL_SVC,SMS_SVC,PUSH_SVC,IN_APP notification\n    class ANS,METRICS,REPORTS,INSIGHTS,DASHBOARD analytics\n    class WAS,AUTO_APPLY,SCRAPER,SCHEDULER workflow\n    class DS,SYNC,BACKUP,MIGRATION data</code></pre>"},{"location":"diagrams/architecture-diagrams/#frontend-architecture","title":"Frontend Architecture","text":"<pre><code>graph TB\n    subgraph \"Browser/Mobile Environment\"\n        USER[User Interaction]\n    end\n\n    subgraph \"Frontend Application\"\n        subgraph \"Next.js App Router\"\n            LAYOUT[Root Layout]\n            PAGES[Page Components]\n            API_ROUTES[API Routes]\n            MIDDLEWARE[Next.js Middleware]\n        end\n\n        subgraph \"React Component Layer\"\n            subgraph \"Page Components\"\n                HOME[Home Page]\n                DASHBOARD[Dashboard]\n                JOBS[Jobs Page]\n                CV_PAGE[CV Builder]\n                PROFILE[Profile Page]\n                SETTINGS[Settings]\n            end\n\n            subgraph \"Shared Components\"\n                HEADER[Header/Navigation]\n                FOOTER[Footer]\n                SIDEBAR[Sidebar]\n                MODALS[Modal Components]\n                FORMS[Form Components]\n                CARDS[Card Components]\n            end\n\n            subgraph \"Feature Components\"\n                CV_BUILDER[CV Builder Components]\n                JOB_SEARCH[Job Search Components]\n                AI_CHAT[AI Chat Interface]\n                NOTIFICATIONS[Notification Center]\n                ANALYTICS_UI[Analytics Dashboard]\n            end\n        end\n\n        subgraph \"State Management\"\n            REDUX[Redux Store]\n            RTK[Redux Toolkit]\n            ZUSTAND[Zustand Stores]\n            REACT_QUERY[TanStack Query]\n        end\n\n        subgraph \"UI &amp; Styling\"\n            TAILWIND[Tailwind CSS]\n            HEADLESS[Headless UI]\n            FRAMER[Framer Motion]\n            ICONS[Icon Library]\n        end\n\n        subgraph \"Utilities &amp; Hooks\"\n            CUSTOM_HOOKS[Custom Hooks]\n            UTILS[Utility Functions]\n            VALIDATORS[Form Validators]\n            FORMATTERS[Data Formatters]\n        end\n\n        subgraph \"API Layer\"\n            API_CLIENT[API Client]\n            AXIOS[Axios Instance]\n            INTERCEPTORS[Request/Response Interceptors]\n            CACHE[Response Caching]\n        end\n    end\n\n    subgraph \"External Services\"\n        BACKEND_API[Backend APIs]\n        CDN[CDN Assets]\n        ANALYTICS_EXT[Analytics Services]\n        ERROR_TRACK[Error Tracking]\n    end\n\n    %% User interactions\n    USER --&gt; LAYOUT\n\n    %% Layout structure\n    LAYOUT --&gt; HEADER\n    LAYOUT --&gt; PAGES\n    LAYOUT --&gt; FOOTER\n\n    %% Page to component relationships\n    PAGES --&gt; HOME\n    PAGES --&gt; DASHBOARD\n    PAGES --&gt; JOBS\n    PAGES --&gt; CV_PAGE\n    PAGES --&gt; PROFILE\n    PAGES --&gt; SETTINGS\n\n    %% Shared component usage\n    HOME --&gt; CARDS\n    DASHBOARD --&gt; ANALYTICS_UI\n    JOBS --&gt; JOB_SEARCH\n    CV_PAGE --&gt; CV_BUILDER\n    PROFILE --&gt; FORMS\n    SETTINGS --&gt; FORMS\n\n    %% Feature component relationships\n    CV_BUILDER --&gt; MODALS\n    JOB_SEARCH --&gt; CARDS\n    AI_CHAT --&gt; NOTIFICATIONS\n\n    %% State management flow\n    PAGES --&gt; REDUX\n    PAGES --&gt; ZUSTAND\n    REDUX --&gt; RTK\n    API_CLIENT --&gt; REACT_QUERY\n\n    %% Styling connections\n    PAGES --&gt; TAILWIND\n    SHARED --&gt; HEADLESS\n    FEATURE --&gt; FRAMER\n    UI --&gt; ICONS\n\n    %% Utility usage\n    FORMS --&gt; VALIDATORS\n    ANALYTICS_UI --&gt; FORMATTERS\n    API_CLIENT --&gt; CUSTOM_HOOKS\n\n    %% API layer\n    REACT_QUERY --&gt; API_CLIENT\n    API_CLIENT --&gt; AXIOS\n    AXIOS --&gt; INTERCEPTORS\n    INTERCEPTORS --&gt; CACHE\n\n    %% External connections\n    API_CLIENT --&gt; BACKEND_API\n    LAYOUT --&gt; CDN\n    PAGES --&gt; ANALYTICS_EXT\n    INTERCEPTORS --&gt; ERROR_TRACK\n\n    %% Styling\n    classDef user fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef framework fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef component fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef state fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef ui fill:#ffebee,stroke:#c62828,stroke-width:2px\n    classDef utility fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n    classDef api fill:#fce4ec,stroke:#ad1457,stroke-width:2px\n    classDef external fill:#f9f9f9,stroke:#757575,stroke-width:2px\n\n    class USER user\n    class LAYOUT,PAGES,API_ROUTES,MIDDLEWARE framework\n    class HOME,DASHBOARD,JOBS,CV_PAGE,PROFILE,SETTINGS,HEADER,FOOTER,SIDEBAR,MODALS,FORMS,CARDS,CV_BUILDER,JOB_SEARCH,AI_CHAT,NOTIFICATIONS,ANALYTICS_UI component\n    class REDUX,RTK,ZUSTAND,REACT_QUERY state\n    class TAILWIND,HEADLESS,FRAMER,ICONS ui\n    class CUSTOM_HOOKS,UTILS,VALIDATORS,FORMATTERS utility\n    class API_CLIENT,AXIOS,INTERCEPTORS,CACHE api\n    class BACKEND_API,CDN,ANALYTICS_EXT,ERROR_TRACK external</code></pre>"},{"location":"diagrams/architecture-diagrams/#backend-services-architecture","title":"Backend Services Architecture","text":"<pre><code>graph TB\n    subgraph \"API Gateway Layer\"\n        AG[API Gateway&lt;br/&gt;Express.js]\n        AUTH[Authentication]\n        RATE[Rate Limiting]\n        PROXY[Service Proxy]\n    end\n\n    subgraph \"Service Mesh\"\n        SM[Service Mesh&lt;br/&gt;Istio]\n        LB[Load Balancing]\n        CIRCUIT[Circuit Breaker]\n        RETRY[Retry Logic]\n    end\n\n    subgraph \"User Management Service\"\n        direction TB\n        US[User Service]\n        subgraph \"User Components\"\n            AUTH_SVC[Authentication Service]\n            PROFILE_SVC[Profile Service]\n            PREF_SVC[Preferences Service]\n            RBAC[Role-Based Access Control]\n        end\n        subgraph \"User Data\"\n            USER_DB[(User Database)]\n            SESSION_CACHE[(Session Cache)]\n        end\n    end\n\n    subgraph \"CV Management Service\"\n        direction TB\n        CVS[CV Service]\n        subgraph \"CV Components\"\n            CV_CRUD[CV CRUD Operations]\n            TEMPLATE_SVC[Template Service]\n            PDF_GEN[PDF Generator]\n            VERSION[Version Control]\n        end\n        subgraph \"CV Data\"\n            CV_DB[(CV Database)]\n            FILE_STORAGE[(File Storage)]\n        end\n    end\n\n    subgraph \"Job Management Service\"\n        direction TB\n        JS_SVC[Job Service]\n        subgraph \"Job Components\"\n            JOB_CRUD[Job CRUD Operations]\n            SEARCH_SVC[Search Service]\n            GEO_SVC[Geolocation Service]\n            SCRAPER_SVC[Job Scraper Service]\n        end\n        subgraph \"Job Data\"\n            JOB_DB[(Job Database)]\n            SEARCH_INDEX[(Search Index)]\n        end\n    end\n\n    subgraph \"AI Service Layer\"\n        direction TB\n        AIS[AI Service&lt;br/&gt;FastAPI]\n        subgraph \"AI Components\"\n            NLP_SVC[NLP Service]\n            ML_SVC[ML Service]\n            EMBEDDING_SVC[Embedding Service]\n            CHAT_SVC[Chat Service]\n        end\n        subgraph \"AI Data\"\n            MODEL_STORE[(Model Store)]\n            VECTOR_DB[(Vector Database)]\n        end\n    end\n\n    subgraph \"Message Queue System\"\n        MQ[Message Queue&lt;br/&gt;Redis]\n        EVENTS[Event Bus]\n        WORKERS[Background Workers]\n    end\n\n    subgraph \"Monitoring &amp; Observability\"\n        METRICS[Metrics Collection]\n        LOGS[Centralized Logging]\n        TRACES[Distributed Tracing]\n        ALERTS[Alerting System]\n    end\n\n    %% API Gateway connections\n    AG --&gt; AUTH\n    AG --&gt; RATE\n    AG --&gt; PROXY\n\n    %% Service mesh connections\n    PROXY --&gt; SM\n    SM --&gt; LB\n    SM --&gt; CIRCUIT\n    SM --&gt; RETRY\n\n    %% Service routing\n    LB --&gt; US\n    LB --&gt; CVS\n    LB --&gt; JS_SVC\n    LB --&gt; AIS\n\n    %% User service internal\n    US --&gt; AUTH_SVC\n    US --&gt; PROFILE_SVC\n    US --&gt; PREF_SVC\n    US --&gt; RBAC\n    AUTH_SVC --&gt; USER_DB\n    PROFILE_SVC --&gt; USER_DB\n    RBAC --&gt; SESSION_CACHE\n\n    %% CV service internal\n    CVS --&gt; CV_CRUD\n    CVS --&gt; TEMPLATE_SVC\n    CVS --&gt; PDF_GEN\n    CVS --&gt; VERSION\n    CV_CRUD --&gt; CV_DB\n    PDF_GEN --&gt; FILE_STORAGE\n\n    %% Job service internal\n    JS_SVC --&gt; JOB_CRUD\n    JS_SVC --&gt; SEARCH_SVC\n    JS_SVC --&gt; GEO_SVC\n    JS_SVC --&gt; SCRAPER_SVC\n    JOB_CRUD --&gt; JOB_DB\n    SEARCH_SVC --&gt; SEARCH_INDEX\n\n    %% AI service internal\n    AIS --&gt; NLP_SVC\n    AIS --&gt; ML_SVC\n    AIS --&gt; EMBEDDING_SVC\n    AIS --&gt; CHAT_SVC\n    ML_SVC --&gt; MODEL_STORE\n    EMBEDDING_SVC --&gt; VECTOR_DB\n\n    %% Message queue connections\n    US --&gt; MQ\n    CVS --&gt; MQ\n    JS_SVC --&gt; MQ\n    AIS --&gt; MQ\n    MQ --&gt; EVENTS\n    EVENTS --&gt; WORKERS\n\n    %% Monitoring connections\n    US --&gt; METRICS\n    CVS --&gt; LOGS\n    JS_SVC --&gt; TRACES\n    AIS --&gt; ALERTS\n\n    %% Inter-service communication\n    AIS -.-&gt; CVS\n    AIS -.-&gt; JS_SVC\n    CVS -.-&gt; US\n    JS_SVC -.-&gt; US\n\n    %% Styling\n    classDef gateway fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef mesh fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef service fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef data fill:#ffebee,stroke:#c62828,stroke-width:2px\n    classDef queue fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n    classDef monitoring fill:#fce4ec,stroke:#ad1457,stroke-width:2px\n\n    class AG,AUTH,RATE,PROXY gateway\n    class SM,LB,CIRCUIT,RETRY mesh\n    class US,CVS,JS_SVC,AUTH_SVC,PROFILE_SVC,PREF_SVC,RBAC,CV_CRUD,TEMPLATE_SVC,PDF_GEN,VERSION,JOB_CRUD,SEARCH_SVC,GEO_SVC,SCRAPER_SVC service\n    class AIS,NLP_SVC,ML_SVC,EMBEDDING_SVC,CHAT_SVC ai\n    class USER_DB,SESSION_CACHE,CV_DB,FILE_STORAGE,JOB_DB,SEARCH_INDEX,MODEL_STORE,VECTOR_DB data\n    class MQ,EVENTS,WORKERS queue\n    class METRICS,LOGS,TRACES,ALERTS monitoring</code></pre>"},{"location":"diagrams/architecture-diagrams/#data-architecture","title":"Data Architecture","text":"<pre><code>graph TB\n    subgraph \"Application Layer\"\n        WEB[Web Application]\n        API[API Services]\n        WORKER[Background Workers]\n    end\n\n    subgraph \"Data Access Layer\"\n        ORM[ORM/ODM&lt;br/&gt;Mongoose, Prisma]\n        QUERY[Query Builder]\n        CONN[Connection Pool]\n        CACHE_LAYER[Cache Layer]\n    end\n\n    subgraph \"Primary Storage\"\n        subgraph \"MongoDB Cluster\"\n            MONGO_PRIMARY[(MongoDB Primary)]\n            MONGO_SECONDARY[(MongoDB Secondary)]\n            MONGO_ARBITER[(MongoDB Arbiter)]\n        end\n\n        subgraph \"MongoDB Collections\"\n            USERS_COLL[Users Collection]\n            CVS_COLL[CVs Collection]\n            JOBS_COLL[Jobs Collection]\n            APPS_COLL[Applications Collection]\n            COMPANIES_COLL[Companies Collection]\n        end\n    end\n\n    subgraph \"Analytics Storage\"\n        subgraph \"PostgreSQL Cluster\"\n            PG_PRIMARY[(PostgreSQL Primary)]\n            PG_REPLICA[(PostgreSQL Read Replica)]\n        end\n\n        subgraph \"Analytics Tables\"\n            USER_EVENTS[User Events]\n            JOB_ANALYTICS[Job Analytics]\n            APP_ANALYTICS[Application Analytics]\n            SEARCH_ANALYTICS[Search Analytics]\n            AI_METRICS[AI Metrics]\n        end\n    end\n\n    subgraph \"Caching Layer\"\n        subgraph \"Redis Cluster\"\n            REDIS_MASTER[(Redis Master)]\n            REDIS_SLAVE[(Redis Slave)]\n        end\n\n        subgraph \"Cache Types\"\n            SESSION_CACHE[Session Cache]\n            API_CACHE[API Response Cache]\n            QUERY_CACHE[Query Result Cache]\n            JOB_QUEUE[Job Queue]\n        end\n    end\n\n    subgraph \"File Storage\"\n        subgraph \"AWS S3\"\n            CV_BUCKET[CV Documents Bucket]\n            ASSET_BUCKET[Assets Bucket]\n            BACKUP_BUCKET[Backup Bucket]\n        end\n\n        subgraph \"CDN\"\n            CLOUDFRONT[CloudFront CDN]\n        end\n    end\n\n    subgraph \"Search &amp; Analytics\"\n        ELASTICSEARCH[(Elasticsearch)]\n        KIBANA[Kibana Dashboard]\n        LOGSTASH[Logstash]\n    end\n\n    subgraph \"Vector Database\"\n        CHROMA[(ChromaDB)]\n        EMBEDDINGS[Job/CV Embeddings]\n        SIMILARITY[Similarity Search]\n    end\n\n    subgraph \"Data Pipeline\"\n        ETL[ETL Processes]\n        STREAM[Stream Processing]\n        BATCH[Batch Processing]\n        SCHEDULER[Data Scheduler]\n    end\n\n    subgraph \"Backup &amp; Recovery\"\n        MONGO_BACKUP[MongoDB Backup]\n        PG_BACKUP[PostgreSQL Backup]\n        SNAPSHOT[S3 Snapshots]\n        DISASTER_RECOVERY[Disaster Recovery]\n    end\n\n    %% Application to Data Access\n    WEB --&gt; ORM\n    API --&gt; ORM\n    WORKER --&gt; QUERY\n    ORM --&gt; CONN\n    QUERY --&gt; CACHE_LAYER\n\n    %% Data Access to Storage\n    CONN --&gt; MONGO_PRIMARY\n    CONN --&gt; PG_PRIMARY\n    CACHE_LAYER --&gt; REDIS_MASTER\n\n    %% MongoDB replication\n    MONGO_PRIMARY --&gt; MONGO_SECONDARY\n    MONGO_PRIMARY --&gt; MONGO_ARBITER\n\n    %% MongoDB collections\n    MONGO_PRIMARY --&gt; USERS_COLL\n    MONGO_PRIMARY --&gt; CVS_COLL\n    MONGO_PRIMARY --&gt; JOBS_COLL\n    MONGO_PRIMARY --&gt; APPS_COLL\n    MONGO_PRIMARY --&gt; COMPANIES_COLL\n\n    %% PostgreSQL replication\n    PG_PRIMARY --&gt; PG_REPLICA\n\n    %% Analytics tables\n    PG_PRIMARY --&gt; USER_EVENTS\n    PG_PRIMARY --&gt; JOB_ANALYTICS\n    PG_PRIMARY --&gt; APP_ANALYTICS\n    PG_PRIMARY --&gt; SEARCH_ANALYTICS\n    PG_PRIMARY --&gt; AI_METRICS\n\n    %% Redis replication\n    REDIS_MASTER --&gt; REDIS_SLAVE\n\n    %% Cache types\n    REDIS_MASTER --&gt; SESSION_CACHE\n    REDIS_MASTER --&gt; API_CACHE\n    REDIS_MASTER --&gt; QUERY_CACHE\n    REDIS_MASTER --&gt; JOB_QUEUE\n\n    %% File storage\n    API --&gt; CV_BUCKET\n    API --&gt; ASSET_BUCKET\n    CV_BUCKET --&gt; CLOUDFRONT\n    ASSET_BUCKET --&gt; CLOUDFRONT\n\n    %% Search and analytics\n    MONGO_PRIMARY --&gt; ELASTICSEARCH\n    PG_PRIMARY --&gt; LOGSTASH\n    LOGSTASH --&gt; ELASTICSEARCH\n    ELASTICSEARCH --&gt; KIBANA\n\n    %% Vector database\n    API --&gt; CHROMA\n    CHROMA --&gt; EMBEDDINGS\n    CHROMA --&gt; SIMILARITY\n\n    %% Data pipeline\n    MONGO_PRIMARY --&gt; ETL\n    PG_PRIMARY --&gt; STREAM\n    ETL --&gt; BATCH\n    BATCH --&gt; SCHEDULER\n\n    %% Backup and recovery\n    MONGO_PRIMARY --&gt; MONGO_BACKUP\n    PG_PRIMARY --&gt; PG_BACKUP\n    CV_BUCKET --&gt; SNAPSHOT\n    MONGO_BACKUP --&gt; DISASTER_RECOVERY\n\n    %% Styling\n    classDef app fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef access fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef primary fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef analytics fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef cache fill:#ffebee,stroke:#c62828,stroke-width:2px\n    classDef storage fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n    classDef search fill:#fce4ec,stroke:#ad1457,stroke-width:2px\n    classDef vector fill:#e8eaf6,stroke:#3f51b5,stroke-width:2px\n    classDef pipeline fill:#f9f9f9,stroke:#757575,stroke-width:2px\n\n    class WEB,API,WORKER app\n    class ORM,QUERY,CONN,CACHE_LAYER access\n    class MONGO_PRIMARY,MONGO_SECONDARY,MONGO_ARBITER,USERS_COLL,CVS_COLL,JOBS_COLL,APPS_COLL,COMPANIES_COLL primary\n    class PG_PRIMARY,PG_REPLICA,USER_EVENTS,JOB_ANALYTICS,APP_ANALYTICS,SEARCH_ANALYTICS,AI_METRICS analytics\n    class REDIS_MASTER,REDIS_SLAVE,SESSION_CACHE,API_CACHE,QUERY_CACHE,JOB_QUEUE cache\n    class CV_BUCKET,ASSET_BUCKET,BACKUP_BUCKET,CLOUDFRONT storage\n    class ELASTICSEARCH,KIBANA,LOGSTASH search\n    class CHROMA,EMBEDDINGS,SIMILARITY vector\n    class ETL,STREAM,BATCH,SCHEDULER,MONGO_BACKUP,PG_BACKUP,SNAPSHOT,DISASTER_RECOVERY pipeline</code></pre>"},{"location":"diagrams/architecture-diagrams/#security-architecture","title":"Security Architecture","text":"<pre><code>graph TB\n    subgraph \"External Threats\"\n        ATTACKER[Malicious Actors]\n        BOT[Automated Bots]\n        DDOS[DDoS Attacks]\n    end\n\n    subgraph \"Perimeter Security\"\n        WAF[Web Application Firewall]\n        DDOS_PROTECTION[DDoS Protection]\n        CDN_SECURITY[CDN Security Features]\n    end\n\n    subgraph \"Network Security\"\n        VPC[Virtual Private Cloud]\n        SUBNETS[Private/Public Subnets]\n        NAT[NAT Gateway]\n        IGW[Internet Gateway]\n        SECURITY_GROUPS[Security Groups]\n        NACL[Network ACLs]\n    end\n\n    subgraph \"Application Security\"\n        subgraph \"API Gateway Security\"\n            RATE_LIMITING[Rate Limiting]\n            IP_WHITELIST[IP Whitelisting]\n            API_KEYS[API Key Management]\n            REQUEST_VALIDATION[Request Validation]\n        end\n\n        subgraph \"Authentication &amp; Authorization\"\n            JWT_AUTH[JWT Authentication]\n            OAUTH[OAuth 2.0/OIDC]\n            MFA[Multi-Factor Authentication]\n            RBAC_SECURITY[Role-Based Access Control]\n            SESSION_MGT[Session Management]\n        end\n\n        subgraph \"Data Security\"\n            ENCRYPTION_TRANSIT[Encryption in Transit]\n            ENCRYPTION_REST[Encryption at Rest]\n            KEY_MGMT[Key Management Service]\n            DATA_MASKING[Data Masking]\n            PII_PROTECTION[PII Protection]\n        end\n    end\n\n    subgraph \"Infrastructure Security\"\n        subgraph \"Container Security\"\n            IMAGE_SCANNING[Container Image Scanning]\n            RUNTIME_SECURITY[Runtime Security]\n            VULNERABILITY_MGMT[Vulnerability Management]\n        end\n\n        subgraph \"Kubernetes Security\"\n            RBAC_K8S[Kubernetes RBAC]\n            NETWORK_POLICIES[Network Policies]\n            POD_SECURITY[Pod Security Standards]\n            SECRETS_MGMT[Secrets Management]\n        end\n\n        subgraph \"Database Security\"\n            DB_ENCRYPTION[Database Encryption]\n            ACCESS_CONTROL[Database Access Control]\n            AUDIT_LOGGING[Audit Logging]\n            BACKUP_ENCRYPTION[Backup Encryption]\n        end\n    end\n\n    subgraph \"Monitoring &amp; Compliance\"\n        SIEM[Security Information and Event Management]\n        VULNERABILITY_SCAN[Vulnerability Scanning]\n        COMPLIANCE_MONITORING[Compliance Monitoring]\n        INCIDENT_RESPONSE[Incident Response]\n        THREAT_INTELLIGENCE[Threat Intelligence]\n    end\n\n    subgraph \"Data Privacy &amp; Compliance\"\n        GDPR_COMPLIANCE[GDPR Compliance]\n        CCPA_COMPLIANCE[CCPA Compliance]\n        DATA_RETENTION[Data Retention Policies]\n        RIGHT_TO_ERASURE[Right to Erasure]\n        CONSENT_MGT[Consent Management]\n    end\n\n    %% Threat flow\n    ATTACKER --&gt; WAF\n    BOT --&gt; DDOS_PROTECTION\n    DDOS --&gt; CDN_SECURITY\n\n    %% Perimeter to Network\n    WAF --&gt; VPC\n    DDOS_PROTECTION --&gt; SECURITY_GROUPS\n    CDN_SECURITY --&gt; IGW\n\n    %% Network security flow\n    IGW --&gt; SUBNETS\n    SUBNETS --&gt; NAT\n    SECURITY_GROUPS --&gt; NACL\n\n    %% Application security\n    SUBNETS --&gt; RATE_LIMITING\n    RATE_LIMITING --&gt; JWT_AUTH\n    JWT_AUTH --&gt; ENCRYPTION_TRANSIT\n\n    %% Authentication flow\n    JWT_AUTH --&gt; OAUTH\n    OAUTH --&gt; MFA\n    MFA --&gt; RBAC_SECURITY\n    RBAC_SECURITY --&gt; SESSION_MGT\n\n    %% Data security\n    ENCRYPTION_TRANSIT --&gt; ENCRYPTION_REST\n    ENCRYPTION_REST --&gt; KEY_MGMT\n    KEY_MGMT --&gt; DATA_MASKING\n    DATA_MASKING --&gt; PII_PROTECTION\n\n    %% Infrastructure security\n    SUBNETS --&gt; IMAGE_SCANNING\n    IMAGE_SCANNING --&gt; RBAC_K8S\n    RBAC_K8S --&gt; DB_ENCRYPTION\n\n    %% Container to K8s security\n    IMAGE_SCANNING --&gt; RUNTIME_SECURITY\n    RUNTIME_SECURITY --&gt; VULNERABILITY_MGMT\n    RBAC_K8S --&gt; NETWORK_POLICIES\n    NETWORK_POLICIES --&gt; POD_SECURITY\n    POD_SECURITY --&gt; SECRETS_MGMT\n\n    %% Database security\n    DB_ENCRYPTION --&gt; ACCESS_CONTROL\n    ACCESS_CONTROL --&gt; AUDIT_LOGGING\n    AUDIT_LOGGING --&gt; BACKUP_ENCRYPTION\n\n    %% Monitoring\n    RBAC_SECURITY --&gt; SIEM\n    AUDIT_LOGGING --&gt; VULNERABILITY_SCAN\n    VULNERABILITY_SCAN --&gt; COMPLIANCE_MONITORING\n    COMPLIANCE_MONITORING --&gt; INCIDENT_RESPONSE\n    INCIDENT_RESPONSE --&gt; THREAT_INTELLIGENCE\n\n    %% Compliance\n    PII_PROTECTION --&gt; GDPR_COMPLIANCE\n    GDPR_COMPLIANCE --&gt; CCPA_COMPLIANCE\n    CCPA_COMPLIANCE --&gt; DATA_RETENTION\n    DATA_RETENTION --&gt; RIGHT_TO_ERASURE\n    RIGHT_TO_ERASURE --&gt; CONSENT_MGT\n\n    %% Styling\n    classDef threat fill:#ffebee,stroke:#f44336,stroke-width:2px\n    classDef perimeter fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef network fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef application fill:#e8f5e8,stroke:#4caf50,stroke-width:2px\n    classDef infrastructure fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef monitoring fill:#e0f2f1,stroke:#009688,stroke-width:2px\n    classDef compliance fill:#fce4ec,stroke:#e91e63,stroke-width:2px\n\n    class ATTACKER,BOT,DDOS threat\n    class WAF,DDOS_PROTECTION,CDN_SECURITY perimeter\n    class VPC,SUBNETS,NAT,IGW,SECURITY_GROUPS,NACL network\n    class RATE_LIMITING,IP_WHITELIST,API_KEYS,REQUEST_VALIDATION,JWT_AUTH,OAUTH,MFA,RBAC_SECURITY,SESSION_MGT,ENCRYPTION_TRANSIT,ENCRYPTION_REST,KEY_MGMT,DATA_MASKING,PII_PROTECTION application\n    class IMAGE_SCANNING,RUNTIME_SECURITY,VULNERABILITY_MGMT,RBAC_K8S,NETWORK_POLICIES,POD_SECURITY,SECRETS_MGMT,DB_ENCRYPTION,ACCESS_CONTROL,AUDIT_LOGGING,BACKUP_ENCRYPTION infrastructure\n    class SIEM,VULNERABILITY_SCAN,COMPLIANCE_MONITORING,INCIDENT_RESPONSE,THREAT_INTELLIGENCE monitoring\n    class GDPR_COMPLIANCE,CCPA_COMPLIANCE,DATA_RETENTION,RIGHT_TO_ERASURE,CONSENT_MGT compliance</code></pre>"},{"location":"diagrams/architecture-diagrams/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code>graph TB\n    subgraph \"Multi-Cloud Infrastructure\"\n        subgraph \"AWS (Primary)\"\n            subgraph \"Production Environment\"\n                AWS_PROD_VPC[Production VPC]\n                AWS_EKS_PROD[EKS Cluster - Production]\n                AWS_RDS_PROD[RDS - Production]\n                AWS_S3_PROD[S3 - Production]\n                AWS_REDIS_PROD[ElastiCache - Production]\n            end\n\n            subgraph \"Staging Environment\"\n                AWS_STAGING_VPC[Staging VPC]\n                AWS_EKS_STAGING[EKS Cluster - Staging]\n                AWS_RDS_STAGING[RDS - Staging]\n                AWS_S3_STAGING[S3 - Staging]\n            end\n\n            subgraph \"Development Environment\"\n                AWS_DEV_VPC[Development VPC]\n                AWS_EKS_DEV[EKS Cluster - Development]\n                AWS_RDS_DEV[RDS - Development]\n            end\n        end\n\n        subgraph \"GCP (Disaster Recovery)\"\n            GCP_VPC[GCP VPC]\n            GKE_DR[GKE Cluster - DR]\n            CLOUD_SQL_DR[Cloud SQL - DR]\n            GCS_DR[Cloud Storage - DR]\n        end\n    end\n\n    subgraph \"Container Orchestration\"\n        subgraph \"Kubernetes Production\"\n            K8S_INGRESS[Ingress Controller]\n            K8S_SERVICES[Kubernetes Services]\n            K8S_DEPLOYMENTS[Application Deployments]\n            K8S_CONFIGS[ConfigMaps &amp; Secrets]\n            K8S_STORAGE[Persistent Volumes]\n        end\n\n        subgraph \"Service Mesh\"\n            ISTIO[Istio Service Mesh]\n            ENVOY[Envoy Proxies]\n            CIRCUIT_BREAKER[Circuit Breakers]\n            LOAD_BALANCER[Load Balancing]\n        end\n    end\n\n    subgraph \"CI/CD Pipeline\"\n        subgraph \"Source Control\"\n            GITHUB[GitHub Repository]\n            FEATURE_BRANCHES[Feature Branches]\n            MAIN_BRANCH[Main Branch]\n        end\n\n        subgraph \"Build Pipeline\"\n            GITHUB_ACTIONS[GitHub Actions]\n            BUILD_STAGE[Build &amp; Test]\n            SECURITY_SCAN[Security Scanning]\n            IMAGE_BUILD[Container Image Build]\n            IMAGE_REGISTRY[Container Registry]\n        end\n\n        subgraph \"Deployment Pipeline\"\n            HELM[Helm Charts]\n            ARGOCD[ArgoCD]\n            CANARY[Canary Deployments]\n            BLUE_GREEN[Blue-Green Deployments]\n        end\n    end\n\n    subgraph \"Monitoring &amp; Observability\"\n        subgraph \"Metrics &amp; Monitoring\"\n            PROMETHEUS[Prometheus]\n            GRAFANA[Grafana Dashboards]\n            ALERTMANAGER[Alert Manager]\n        end\n\n        subgraph \"Logging\"\n            FLUENTD[Fluentd]\n            ELASTICSEARCH_LOG[Elasticsearch]\n            KIBANA_LOG[Kibana]\n        end\n\n        subgraph \"Tracing\"\n            JAEGER[Jaeger Tracing]\n            ZIPKIN[Zipkin]\n        end\n\n        subgraph \"Error Tracking\"\n            SENTRY[Sentry]\n            ERROR_ALERTING[Error Alerting]\n        end\n    end\n\n    subgraph \"Traffic Management\"\n        subgraph \"Global Load Balancing\"\n            CLOUDFLARE[Cloudflare]\n            CDN_EDGE[Edge Locations]\n            WAF_GLOBAL[Global WAF]\n        end\n\n        subgraph \"Regional Load Balancing\"\n            ALB_AWS[AWS Application LB]\n            NLB_AWS[AWS Network LB]\n            GLB_GCP[GCP Global LB]\n        end\n    end\n\n    subgraph \"Security &amp; Compliance\"\n        subgraph \"Certificate Management\"\n            CERT_MANAGER[Cert Manager]\n            SSL_CERTS[SSL Certificates]\n            AUTO_RENEWAL[Auto Renewal]\n        end\n\n        subgraph \"Secrets Management\"\n            AWS_SECRETS[AWS Secrets Manager]\n            K8S_SECRETS[Kubernetes Secrets]\n            VAULT[HashiCorp Vault]\n        end\n\n        subgraph \"Security Scanning\"\n            CONTAINER_SCAN[Container Scanning]\n            VULNERABILITY_SCAN_DEPLOY[Vulnerability Scanning]\n            COMPLIANCE_CHECK[Compliance Checking]\n        end\n    end\n\n    %% Infrastructure connections\n    AWS_EKS_PROD --&gt; K8S_SERVICES\n    AWS_EKS_STAGING --&gt; K8S_SERVICES\n    GKE_DR --&gt; K8S_SERVICES\n\n    %% Container orchestration\n    K8S_INGRESS --&gt; K8S_SERVICES\n    K8S_SERVICES --&gt; K8S_DEPLOYMENTS\n    K8S_DEPLOYMENTS --&gt; K8S_CONFIGS\n    K8S_DEPLOYMENTS --&gt; K8S_STORAGE\n\n    %% Service mesh\n    K8S_SERVICES --&gt; ISTIO\n    ISTIO --&gt; ENVOY\n    ENVOY --&gt; CIRCUIT_BREAKER\n    CIRCUIT_BREAKER --&gt; LOAD_BALANCER\n\n    %% CI/CD flow\n    FEATURE_BRANCHES --&gt; MAIN_BRANCH\n    MAIN_BRANCH --&gt; GITHUB_ACTIONS\n    GITHUB_ACTIONS --&gt; BUILD_STAGE\n    BUILD_STAGE --&gt; SECURITY_SCAN\n    SECURITY_SCAN --&gt; IMAGE_BUILD\n    IMAGE_BUILD --&gt; IMAGE_REGISTRY\n    IMAGE_REGISTRY --&gt; HELM\n    HELM --&gt; ARGOCD\n    ARGOCD --&gt; CANARY\n    CANARY --&gt; BLUE_GREEN\n\n    %% Deployment targets\n    ARGOCD --&gt; AWS_EKS_PROD\n    ARGOCD --&gt; AWS_EKS_STAGING\n    ARGOCD --&gt; GKE_DR\n\n    %% Monitoring connections\n    K8S_DEPLOYMENTS --&gt; PROMETHEUS\n    PROMETHEUS --&gt; GRAFANA\n    PROMETHEUS --&gt; ALERTMANAGER\n    K8S_DEPLOYMENTS --&gt; FLUENTD\n    FLUENTD --&gt; ELASTICSEARCH_LOG\n    ELASTICSEARCH_LOG --&gt; KIBANA_LOG\n    K8S_DEPLOYMENTS --&gt; JAEGER\n    K8S_DEPLOYMENTS --&gt; SENTRY\n\n    %% Traffic management\n    CLOUDFLARE --&gt; CDN_EDGE\n    CDN_EDGE --&gt; ALB_AWS\n    ALB_AWS --&gt; K8S_INGRESS\n    GLB_GCP --&gt; GKE_DR\n\n    %% Security\n    K8S_CONFIGS --&gt; CERT_MANAGER\n    CERT_MANAGER --&gt; SSL_CERTS\n    K8S_SECRETS --&gt; AWS_SECRETS\n    AWS_SECRETS --&gt; VAULT\n    IMAGE_BUILD --&gt; CONTAINER_SCAN\n\n    %% Styling\n    classDef aws fill:#ff9900,stroke:#232f3e,stroke-width:2px,color:#fff\n    classDef gcp fill:#4285f4,stroke:#1a73e8,stroke-width:2px,color:#fff\n    classDef k8s fill:#326ce5,stroke:#ffffff,stroke-width:2px,color:#fff\n    classDef cicd fill:#28a745,stroke:#1e7e34,stroke-width:2px,color:#fff\n    classDef monitoring fill:#dc3545,stroke:#c82333,stroke-width:2px,color:#fff\n    classDef traffic fill:#17a2b8,stroke:#138496,stroke-width:2px,color:#fff\n    classDef security fill:#6f42c1,stroke:#59359a,stroke-width:2px,color:#fff\n\n    class AWS_PROD_VPC,AWS_EKS_PROD,AWS_RDS_PROD,AWS_S3_PROD,AWS_REDIS_PROD,AWS_STAGING_VPC,AWS_EKS_STAGING,AWS_RDS_STAGING,AWS_S3_STAGING,AWS_DEV_VPC,AWS_EKS_DEV,AWS_RDS_DEV,ALB_AWS,NLB_AWS,AWS_SECRETS aws\n    class GCP_VPC,GKE_DR,CLOUD_SQL_DR,GCS_DR,GLB_GCP gcp\n    class K8S_INGRESS,K8S_SERVICES,K8S_DEPLOYMENTS,K8S_CONFIGS,K8S_STORAGE,ISTIO,ENVOY,CIRCUIT_BREAKER,LOAD_BALANCER k8s\n    class GITHUB,FEATURE_BRANCHES,MAIN_BRANCH,GITHUB_ACTIONS,BUILD_STAGE,SECURITY_SCAN,IMAGE_BUILD,IMAGE_REGISTRY,HELM,ARGOCD,CANARY,BLUE_GREEN cicd\n    class PROMETHEUS,GRAFANA,ALERTMANAGER,FLUENTD,ELASTICSEARCH_LOG,KIBANA_LOG,JAEGER,ZIPKIN,SENTRY,ERROR_ALERTING monitoring\n    class CLOUDFLARE,CDN_EDGE,WAF_GLOBAL traffic\n    class CERT_MANAGER,SSL_CERTS,AUTO_RENEWAL,K8S_SECRETS,VAULT,CONTAINER_SCAN,VULNERABILITY_SCAN_DEPLOY,COMPLIANCE_CHECK security</code></pre>"},{"location":"diagrams/architecture-diagrams/#network-architecture","title":"Network Architecture","text":"<pre><code>graph TB\n    subgraph \"Internet\"\n        USERS[End Users]\n        INTERNET[Internet]\n    end\n\n    subgraph \"Edge &amp; CDN Layer\"\n        CLOUDFLARE[Cloudflare Global Network]\n        EDGE_LOCATIONS[Edge Locations Worldwide]\n        WAF_EDGE[Edge WAF]\n        DDOS_PROTECTION[DDoS Protection]\n    end\n\n    subgraph \"AWS Primary Region (us-east-1)\"\n        subgraph \"Production VPC (10.0.0.0/16)\"\n            subgraph \"Public Subnets\"\n                PUBLIC_1A[Public Subnet AZ-1a&lt;br/&gt;10.0.1.0/24]\n                PUBLIC_1B[Public Subnet AZ-1b&lt;br/&gt;10.0.2.0/24]\n                PUBLIC_1C[Public Subnet AZ-1c&lt;br/&gt;10.0.3.0/24]\n\n                ALB[Application Load Balancer]\n                NAT_1A[NAT Gateway AZ-1a]\n                NAT_1B[NAT Gateway AZ-1b]\n                NAT_1C[NAT Gateway AZ-1c]\n            end\n\n            subgraph \"Private Subnets - App Tier\"\n                PRIVATE_APP_1A[Private App AZ-1a&lt;br/&gt;10.0.11.0/24]\n                PRIVATE_APP_1B[Private App AZ-1b&lt;br/&gt;10.0.12.0/24]\n                PRIVATE_APP_1C[Private App AZ-1c&lt;br/&gt;10.0.13.0/24]\n\n                EKS_NODES[EKS Worker Nodes]\n                APP_SERVERS[Application Servers]\n            end\n\n            subgraph \"Private Subnets - Data Tier\"\n                PRIVATE_DB_1A[Private DB AZ-1a&lt;br/&gt;10.0.21.0/24]\n                PRIVATE_DB_1B[Private DB AZ-1b&lt;br/&gt;10.0.22.0/24]\n                PRIVATE_DB_1C[Private DB AZ-1c&lt;br/&gt;10.0.23.0/24]\n\n                RDS_CLUSTER[RDS MongoDB Cluster]\n                REDIS_CLUSTER[ElastiCache Redis]\n            end\n\n            IGW[Internet Gateway]\n            VPC_ENDPOINT[VPC Endpoints]\n        end\n\n        subgraph \"Staging VPC (10.1.0.0/16)\"\n            STAGING_SUBNETS[Staging Subnets]\n            STAGING_EKS[Staging EKS]\n            STAGING_DB[Staging Databases]\n        end\n    end\n\n    subgraph \"AWS Secondary Region (us-west-2)\"\n        subgraph \"DR VPC (10.2.0.0/16)\"\n            DR_SUBNETS[DR Subnets]\n            DR_EKS[DR EKS Cluster]\n            DR_DB[DR Databases]\n        end\n    end\n\n    subgraph \"GCP Region (us-central1)\"\n        subgraph \"GCP VPC (10.3.0.0/16)\"\n            GCP_SUBNETS[GCP Subnets]\n            GKE_CLUSTER[GKE Cluster]\n            CLOUD_SQL[Cloud SQL]\n        end\n    end\n\n    subgraph \"Network Security\"\n        subgraph \"Security Groups\"\n            WEB_SG[Web Security Group&lt;br/&gt;Port 80, 443]\n            APP_SG[App Security Group&lt;br/&gt;Port 3000-8000]\n            DB_SG[DB Security Group&lt;br/&gt;Port 27017, 5432, 6379]\n        end\n\n        subgraph \"Network ACLs\"\n            PUBLIC_NACL[Public Subnet NACL]\n            PRIVATE_NACL[Private Subnet NACL]\n        end\n\n        subgraph \"VPN &amp; Private Connectivity\"\n            VPN_GW[VPN Gateway]\n            DIRECT_CONNECT[AWS Direct Connect]\n            PRIVATE_LINK[AWS PrivateLink]\n        end\n    end\n\n    subgraph \"Service Mesh Networking\"\n        ISTIO_INGRESS[Istio Ingress Gateway]\n        ISTIO_EGRESS[Istio Egress Gateway]\n        SIDECAR_PROXIES[Envoy Sidecar Proxies]\n        MESH_POLICIES[Network Policies]\n    end\n\n    subgraph \"DNS &amp; Service Discovery\"\n        ROUTE53[Route 53]\n        PRIVATE_DNS[Private DNS Zones]\n        SERVICE_DISCOVERY[Kubernetes Service Discovery]\n        CONSUL[Consul Service Mesh]\n    end\n\n    subgraph \"Monitoring &amp; Observability\"\n        NETWORK_MONITORING[Network Monitoring]\n        FLOW_LOGS[VPC Flow Logs]\n        TRAFFIC_ANALYSIS[Traffic Analysis]\n        LATENCY_MONITORING[Latency Monitoring]\n    end\n\n    %% User traffic flow\n    USERS --&gt; INTERNET\n    INTERNET --&gt; CLOUDFLARE\n    CLOUDFLARE --&gt; EDGE_LOCATIONS\n    EDGE_LOCATIONS --&gt; WAF_EDGE\n    WAF_EDGE --&gt; DDOS_PROTECTION\n\n    %% Edge to AWS\n    DDOS_PROTECTION --&gt; IGW\n    IGW --&gt; ALB\n    ALB --&gt; PUBLIC_1A\n    ALB --&gt; PUBLIC_1B\n    ALB --&gt; PUBLIC_1C\n\n    %% Public to Private routing\n    PUBLIC_1A --&gt; NAT_1A\n    PUBLIC_1B --&gt; NAT_1B\n    PUBLIC_1C --&gt; NAT_1C\n\n    NAT_1A --&gt; PRIVATE_APP_1A\n    NAT_1B --&gt; PRIVATE_APP_1B\n    NAT_1C --&gt; PRIVATE_APP_1C\n\n    %% App to Data tier\n    PRIVATE_APP_1A --&gt; PRIVATE_DB_1A\n    PRIVATE_APP_1B --&gt; PRIVATE_DB_1B\n    PRIVATE_APP_1C --&gt; PRIVATE_DB_1C\n\n    %% EKS and databases\n    PRIVATE_APP_1A --&gt; EKS_NODES\n    PRIVATE_APP_1B --&gt; APP_SERVERS\n    PRIVATE_DB_1A --&gt; RDS_CLUSTER\n    PRIVATE_DB_1B --&gt; REDIS_CLUSTER\n\n    %% Security group assignments\n    ALB --&gt; WEB_SG\n    EKS_NODES --&gt; APP_SG\n    RDS_CLUSTER --&gt; DB_SG\n\n    %% Network ACLs\n    PUBLIC_1A --&gt; PUBLIC_NACL\n    PRIVATE_APP_1A --&gt; PRIVATE_NACL\n\n    %% Cross-region connectivity\n    RDS_CLUSTER -.-&gt; DR_DB\n    EKS_NODES -.-&gt; DR_EKS\n\n    %% Multi-cloud connectivity\n    DR_EKS -.-&gt; GKE_CLUSTER\n    DR_DB -.-&gt; CLOUD_SQL\n\n    %% Service mesh\n    EKS_NODES --&gt; ISTIO_INGRESS\n    ISTIO_INGRESS --&gt; SIDECAR_PROXIES\n    SIDECAR_PROXIES --&gt; ISTIO_EGRESS\n\n    %% DNS and service discovery\n    ALB --&gt; ROUTE53\n    EKS_NODES --&gt; SERVICE_DISCOVERY\n    SERVICE_DISCOVERY --&gt; CONSUL\n\n    %% VPC endpoints\n    PRIVATE_APP_1A --&gt; VPC_ENDPOINT\n    VPC_ENDPOINT --&gt; PRIVATE_LINK\n\n    %% Monitoring\n    EKS_NODES --&gt; NETWORK_MONITORING\n    ALB --&gt; FLOW_LOGS\n    SIDECAR_PROXIES --&gt; TRAFFIC_ANALYSIS\n\n    %% Styling\n    classDef internet fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    classDef edge fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    classDef public fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef private fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef database fill:#ffebee,stroke:#c62828,stroke-width:2px\n    classDef security fill:#e0f2f1,stroke:#00695c,stroke-width:2px\n    classDef mesh fill:#fce4ec,stroke:#ad1457,stroke-width:2px\n    classDef monitoring fill:#f9f9f9,stroke:#757575,stroke-width:2px\n\n    class USERS,INTERNET internet\n    class CLOUDFLARE,EDGE_LOCATIONS,WAF_EDGE,DDOS_PROTECTION edge\n    class PUBLIC_1A,PUBLIC_1B,PUBLIC_1C,ALB,NAT_1A,NAT_1B,NAT_1C,IGW public\n    class PRIVATE_APP_1A,PRIVATE_APP_1B,PRIVATE_APP_1C,EKS_NODES,APP_SERVERS private\n    class PRIVATE_DB_1A,PRIVATE_DB_1B,PRIVATE_DB_1C,RDS_CLUSTER,REDIS_CLUSTER database\n    class WEB_SG,APP_SG,DB_SG,PUBLIC_NACL,PRIVATE_NACL,VPN_GW,DIRECT_CONNECT,PRIVATE_LINK security\n    class ISTIO_INGRESS,ISTIO_EGRESS,SIDECAR_PROXIES,MESH_POLICIES,ROUTE53,SERVICE_DISCOVERY,CONSUL mesh\n    class NETWORK_MONITORING,FLOW_LOGS,TRAFFIC_ANALYSIS,LATENCY_MONITORING monitoring</code></pre> <p>This comprehensive architecture documentation provides detailed visual representations of the AI-Powered Job Seeker Platform's system design, covering all aspects from high-level architecture to detailed network topology, enabling proper understanding, implementation, and maintenance of the platform.</p>"},{"location":"diagrams/data-flow-diagram/","title":"Data Flow Diagrams (DFD)","text":""},{"location":"diagrams/data-flow-diagram/#overview","title":"Overview","text":"<p>This document contains comprehensive Data Flow Diagrams for the AI-Powered Job Seeker Platform, showing how data moves through the system at different levels of detail.</p>"},{"location":"diagrams/data-flow-diagram/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Context Diagram (Level 0)</li> <li>System Overview Diagram (Level 1)</li> <li>Detailed Process Diagrams (Level 2)</li> <li>Data Dictionary</li> </ol>"},{"location":"diagrams/data-flow-diagram/#context-diagram-level-0","title":"Context Diagram (Level 0)","text":"<p>The context diagram shows the system as a single process with external entities and data flows.</p> <pre><code>graph TD\n    %% External Entities\n    JS[Job Seekers]\n    R[Recruiters]\n    JB[Job Boards&lt;br/&gt;LinkedIn, Indeed, Glassdoor]\n    AI[AI Services&lt;br/&gt;OpenAI, Claude]\n    ES[Email Service&lt;br/&gt;SendGrid]\n    SMS[SMS Service&lt;br/&gt;Twilio]\n    PS[Payment System&lt;br/&gt;Stripe]\n\n    %% Main System\n    HRP[HR Platform&lt;br/&gt;System]\n\n    %% Job Seeker Flows\n    JS --&gt;|Registration Data, CV Data, Job Applications| HRP\n    HRP --&gt;|Job Recommendations, Application Status, Notifications| JS\n\n    %% Recruiter Flows\n    R --&gt;|Job Postings, Candidate Reviews, Interview Scheduling| HRP\n    HRP --&gt;|Candidate Profiles, Application Analytics, Notifications| R\n\n    %% External Service Flows\n    HRP --&gt;|Job Search Queries| JB\n    JB --&gt;|Job Listings, Company Data| HRP\n\n    HRP --&gt;|CV Analysis, Job Matching Requests| AI\n    AI --&gt;|Analysis Results, Recommendations| HRP\n\n    HRP --&gt;|Email Templates, Notifications| ES\n    ES --&gt;|Delivery Status| HRP\n\n    HRP --&gt;|SMS Alerts| SMS\n    SMS --&gt;|Delivery Status| HRP\n\n    HRP --&gt;|Payment Requests| PS\n    PS --&gt;|Payment Confirmations| HRP\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef system fill:#f3e5f5,stroke:#4a148c,stroke-width:3px\n\n    class JS,R,JB,AI,ES,SMS,PS external\n    class HRP system</code></pre>"},{"location":"diagrams/data-flow-diagram/#system-overview-diagram-level-1","title":"System Overview Diagram (Level 1)","text":"<p>The Level 1 DFD breaks down the main system into major processes and data stores.</p> <pre><code>graph TD\n    %% External Entities\n    JS[Job Seekers]\n    R[Recruiters]\n    JB[Job Boards]\n    AI[AI Services]\n    NS[Notification Services]\n\n    %% Main Processes\n    P1[1.0&lt;br/&gt;User Management&lt;br/&gt;&amp; Authentication]\n    P2[2.0&lt;br/&gt;CV Management&lt;br/&gt;&amp; Builder]\n    P3[3.0&lt;br/&gt;Job Management&lt;br/&gt;&amp; Search]\n    P4[4.0&lt;br/&gt;Application&lt;br/&gt;Processing]\n    P5[5.0&lt;br/&gt;AI Analysis&lt;br/&gt;&amp; Matching]\n    P6[6.0&lt;br/&gt;Workflow&lt;br/&gt;Automation]\n    P7[7.0&lt;br/&gt;Notification&lt;br/&gt;Management]\n    P8[8.0&lt;br/&gt;Analytics&lt;br/&gt;&amp; Reporting]\n\n    %% Data Stores\n    D1[(D1: Users)]\n    D2[(D2: CVs)]\n    D3[(D3: Jobs)]\n    D4[(D4: Applications)]\n    D5[(D5: AI Models)]\n    D6[(D6: Analytics)]\n    D7[(D7: Notifications)]\n    D8[(D8: Sessions)]\n\n    %% User Management Flows\n    JS --&gt;|Registration, Login| P1\n    R --&gt;|Registration, Login| P1\n    P1 --&gt;|User Data| D1\n    P1 &lt;--&gt;|Session Data| D8\n    P1 --&gt;|Authentication Status| JS\n    P1 --&gt;|Authentication Status| R\n\n    %% CV Management Flows\n    JS --&gt;|CV Data, Templates| P2\n    P2 &lt;--&gt;|CV Storage| D2\n    P2 --&gt;|CV Updates| JS\n    P2 --&gt;|CV Data| P5\n\n    %% Job Management Flows\n    R --&gt;|Job Postings| P3\n    JB --&gt;|External Jobs| P3\n    P3 &lt;--&gt;|Job Storage| D3\n    P3 --&gt;|Job Listings| JS\n    P3 --&gt;|Job Data| P5\n\n    %% Application Processing Flows\n    JS --&gt;|Applications| P4\n    P4 &lt;--&gt;|Application Data| D4\n    P4 --&gt;|Application Status| JS\n    P4 --&gt;|Application Updates| R\n    P4 --&gt;|Application Data| P6\n\n    %% AI Analysis Flows\n    P5 --&gt;|Analysis Requests| AI\n    AI --&gt;|Analysis Results| P5\n    P5 &lt;--&gt;|Model Data| D5\n    P5 --&gt;|Recommendations| JS\n    P5 --&gt;|Match Results| P4\n\n    %% Workflow Automation Flows\n    P6 --&gt;|Job Scraping| JB\n    P6 --&gt;|Auto Applications| P4\n    P6 --&gt;|Notification Triggers| P7\n    P6 --&gt;|Analytics Events| P8\n\n    %% Notification Flows\n    P7 --&gt;|Email/SMS| NS\n    P7 &lt;--&gt;|Notification Logs| D7\n    P7 --&gt;|Notifications| JS\n    P7 --&gt;|Notifications| R\n\n    %% Analytics Flows\n    P8 &lt;--&gt;|Analytics Data| D6\n    P8 --&gt;|Reports| R\n    P8 --&gt;|Insights| JS\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef process fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef datastore fill:#fff3e0,stroke:#ef6c00,stroke-width:2px\n\n    class JS,R,JB,AI,NS external\n    class P1,P2,P3,P4,P5,P6,P7,P8 process\n    class D1,D2,D3,D4,D5,D6,D7,D8 datastore</code></pre>"},{"location":"diagrams/data-flow-diagram/#detailed-process-diagrams-level-2","title":"Detailed Process Diagrams (Level 2)","text":""},{"location":"diagrams/data-flow-diagram/#21-user-management-authentication-process-10","title":"2.1 User Management &amp; Authentication (Process 1.0)","text":"<pre><code>graph TD\n    %% External Entities\n    JS[Job Seekers]\n    R[Recruiters]\n\n    %% Sub-processes\n    P11[1.1&lt;br/&gt;User Registration]\n    P12[1.2&lt;br/&gt;User Authentication]\n    P13[1.3&lt;br/&gt;Profile Management]\n    P14[1.4&lt;br/&gt;Role Management]\n\n    %% Data Stores\n    D1[(D1: Users)]\n    D8[(D8: Sessions)]\n    D9[(D9: Audit Logs)]\n\n    %% Registration Flow\n    JS --&gt;|Registration Data| P11\n    R --&gt;|Registration Data| P11\n    P11 --&gt;|Validate &amp; Store| D1\n    P11 --&gt;|Registration Status| JS\n    P11 --&gt;|Registration Status| R\n    P11 --&gt;|Audit Entry| D9\n\n    %% Authentication Flow\n    JS --&gt;|Login Credentials| P12\n    R --&gt;|Login Credentials| P12\n    P12 --&gt;|Verify| D1\n    P12 --&gt;|Session Data| D8\n    P12 --&gt;|Auth Token| JS\n    P12 --&gt;|Auth Token| R\n    P12 --&gt;|Login Event| D9\n\n    %% Profile Management Flow\n    JS --&gt;|Profile Updates| P13\n    R --&gt;|Profile Updates| P13\n    P13 &lt;--&gt;|Profile Data| D1\n    P13 --&gt;|Updated Profile| JS\n    P13 --&gt;|Updated Profile| R\n\n    %% Role Management Flow\n    P14 &lt;--&gt;|Role Data| D1\n    P14 --&gt;|Role Assignments| P13\n    P14 --&gt;|Permission Updates| D8\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef process fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef datastore fill:#fff3e0,stroke:#ef6c00,stroke-width:2px\n\n    class JS,R external\n    class P11,P12,P13,P14 process\n    class D1,D8,D9 datastore</code></pre>"},{"location":"diagrams/data-flow-diagram/#22-cv-management-builder-process-20","title":"2.2 CV Management &amp; Builder (Process 2.0)","text":"<pre><code>graph TD\n    %% External Entities\n    JS[Job Seekers]\n    AI[AI Services]\n\n    %% Sub-processes\n    P21[2.1&lt;br/&gt;CV Creation]\n    P22[2.2&lt;br/&gt;CV Editing]\n    P23[2.3&lt;br/&gt;Template Management]\n    P24[2.4&lt;br/&gt;CV Export]\n    P25[2.5&lt;br/&gt;CV Analysis]\n\n    %% Data Stores\n    D2[(D2: CVs)]\n    D10[(D10: Templates)]\n    D11[(D11: Skills Database)]\n    D5[(D5: AI Models)]\n\n    %% CV Creation Flow\n    JS --&gt;|CV Data, Template Choice| P21\n    P21 --&gt;|Template| D10\n    P21 --&gt;|Skills Validation| D11\n    P21 --&gt;|New CV| D2\n    P21 --&gt;|Created CV| JS\n\n    %% CV Editing Flow\n    JS --&gt;|CV Updates| P22\n    P22 &lt;--&gt;|CV Data| D2\n    P22 --&gt;|Updated CV| JS\n    P22 --&gt;|CV for Analysis| P25\n\n    %% Template Management Flow\n    P23 &lt;--&gt;|Templates| D10\n    P23 --&gt;|Available Templates| P21\n    P23 --&gt;|Template Updates| P22\n\n    %% CV Export Flow\n    JS --&gt;|Export Request| P24\n    P24 --&gt;|CV Data| D2\n    P24 --&gt;|Template| D10\n    P24 --&gt;|PDF/DOCX| JS\n\n    %% CV Analysis Flow\n    P25 --&gt;|Analysis Request| AI\n    AI --&gt;|Analysis Results| P25\n    P25 &lt;--&gt;|Analysis Data| D5\n    P25 --&gt;|Recommendations| JS\n    P25 --&gt;|Skills Extracted| D11\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef process fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef datastore fill:#fff3e0,stroke:#ef6c00,stroke-width:2px\n\n    class JS,AI external\n    class P21,P22,P23,P24,P25 process\n    class D2,D10,D11,D5 datastore</code></pre>"},{"location":"diagrams/data-flow-diagram/#23-job-management-search-process-30","title":"2.3 Job Management &amp; Search (Process 3.0)","text":"<pre><code>graph TD\n    %% External Entities\n    R[Recruiters]\n    JS[Job Seekers]\n    JB[Job Boards]\n\n    %% Sub-processes\n    P31[3.1&lt;br/&gt;Job Posting]\n    P32[3.2&lt;br/&gt;Job Search]\n    P33[3.3&lt;br/&gt;Job Scraping]\n    P34[3.4&lt;br/&gt;Job Matching]\n    P35[3.5&lt;br/&gt;Job Management]\n\n    %% Data Stores\n    D3[(D3: Jobs)]\n    D12[(D12: Companies)]\n    D13[(D13: Locations)]\n    D14[(D14: Search History)]\n\n    %% Job Posting Flow\n    R --&gt;|Job Details| P31\n    P31 --&gt;|Company Data| D12\n    P31 --&gt;|Location Data| D13\n    P31 --&gt;|New Job| D3\n    P31 --&gt;|Posted Job| R\n\n    %% Job Search Flow\n    JS --&gt;|Search Criteria| P32\n    P32 --&gt;|Search Query| D3\n    P32 --&gt;|Search History| D14\n    P32 --&gt;|Job Results| JS\n    P32 --&gt;|Matching Request| P34\n\n    %% Job Scraping Flow\n    P33 --&gt;|Scraping Request| JB\n    JB --&gt;|Job Data| P33\n    P33 --&gt;|External Jobs| D3\n    P33 --&gt;|Company Updates| D12\n\n    %% Job Matching Flow\n    P34 --&gt;|Job Data| D3\n    P34 --&gt;|Matched Jobs| JS\n    P34 --&gt;|Match Analytics| D14\n\n    %% Job Management Flow\n    R --&gt;|Job Updates| P35\n    P35 &lt;--&gt;|Job Data| D3\n    P35 --&gt;|Updated Job| R\n    P35 --&gt;|Status Changes| JS\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef process fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef datastore fill:#fff3e0,stroke:#ef6c00,stroke-width:2px\n\n    class R,JS,JB external\n    class P31,P32,P33,P34,P35 process\n    class D3,D12,D13,D14 datastore</code></pre>"},{"location":"diagrams/data-flow-diagram/#24-application-processing-process-40","title":"2.4 Application Processing (Process 4.0)","text":"<pre><code>graph TD\n    %% External Entities\n    JS[Job Seekers]\n    R[Recruiters]\n    JB[Job Boards]\n\n    %% Sub-processes\n    P41[4.1&lt;br/&gt;Application&lt;br/&gt;Submission]\n    P42[4.2&lt;br/&gt;Application&lt;br/&gt;Tracking]\n    P43[4.3&lt;br/&gt;Auto-Apply&lt;br/&gt;Processing]\n    P44[4.4&lt;br/&gt;Application&lt;br/&gt;Review]\n    P45[4.5&lt;br/&gt;Interview&lt;br/&gt;Scheduling]\n\n    %% Data Stores\n    D4[(D4: Applications)]\n    D2[(D2: CVs)]\n    D3[(D3: Jobs)]\n    D15[(D15: Interviews)]\n    D16[(D16: Application History)]\n\n    %% Application Submission Flow\n    JS --&gt;|Application Data| P41\n    P41 --&gt;|CV Data| D2\n    P41 --&gt;|Job Data| D3\n    P41 --&gt;|New Application| D4\n    P41 --&gt;|Application Confirmation| JS\n    P41 --&gt;|Application Alert| R\n\n    %% Application Tracking Flow\n    JS --&gt;|Status Request| P42\n    R --&gt;|Status Update| P42\n    P42 &lt;--&gt;|Application Status| D4\n    P42 --&gt;|Status History| D16\n    P42 --&gt;|Status Update| JS\n\n    %% Auto-Apply Processing Flow\n    P43 --&gt;|Application Data| JB\n    JB --&gt;|Submission Status| P43\n    P43 --&gt;|Auto Application| D4\n    P43 --&gt;|Auto-Apply Report| JS\n\n    %% Application Review Flow\n    R --&gt;|Review Data| P44\n    P44 &lt;--&gt;|Application Data| D4\n    P44 --&gt;|Review Results| R\n    P44 --&gt;|Review Status| JS\n    P44 --&gt;|Interview Request| P45\n\n    %% Interview Scheduling Flow\n    P45 &lt;--&gt;|Interview Data| D15\n    P45 --&gt;|Interview Details| JS\n    P45 --&gt;|Interview Details| R\n    P45 --&gt;|Calendar Updates| D4\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef process fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef datastore fill:#fff3e0,stroke:#ef6c00,stroke-width:2px\n\n    class JS,R,JB external\n    class P41,P42,P43,P44,P45 process\n    class D4,D2,D3,D15,D16 datastore</code></pre>"},{"location":"diagrams/data-flow-diagram/#25-ai-analysis-matching-process-50","title":"2.5 AI Analysis &amp; Matching (Process 5.0)","text":"<pre><code>graph TD\n    %% External Entities\n    AI[AI Services&lt;br/&gt;OpenAI, Claude]\n\n    %% Sub-processes\n    P51[5.1&lt;br/&gt;CV Analysis]\n    P52[5.2&lt;br/&gt;Job Matching]\n    P53[5.3&lt;br/&gt;Skill Extraction]\n    P54[5.4&lt;br/&gt;Recommendation&lt;br/&gt;Engine]\n    P55[5.5&lt;br/&gt;Conversational&lt;br/&gt;AI]\n\n    %% Data Stores\n    D2[(D2: CVs)]\n    D3[(D3: Jobs)]\n    D5[(D5: AI Models)]\n    D17[(D17: Embeddings)]\n    D18[(D18: Chat History)]\n    D11[(D11: Skills Database)]\n\n    %% CV Analysis Flow\n    P51 --&gt;|CV Text| AI\n    AI --&gt;|Analysis Results| P51\n    P51 --&gt;|CV Data| D2\n    P51 --&gt;|Analysis Report| D5\n    P51 --&gt;|Extracted Skills| P53\n\n    %% Job Matching Flow\n    P52 --&gt;|CV &amp; Job Data| AI\n    AI --&gt;|Match Scores| P52\n    P52 --&gt;|CV Embeddings| D17\n    P52 --&gt;|Job Embeddings| D17\n    P52 --&gt;|Match Results| D5\n\n    %% Skill Extraction Flow\n    P53 --&gt;|Text Analysis| AI\n    AI --&gt;|Extracted Skills| P53\n    P53 --&gt;|Skills Update| D11\n    P53 --&gt;|Skill Mappings| D5\n\n    %% Recommendation Engine Flow\n    P54 --&gt;|User Preferences| D5\n    P54 --&gt;|Job Recommendations| AI\n    AI --&gt;|Personalized Recommendations| P54\n    P54 --&gt;|Recommendation History| D5\n\n    %% Conversational AI Flow\n    P55 --&gt;|Chat Query| AI\n    AI --&gt;|Chat Response| P55\n    P55 &lt;--&gt;|Conversation| D18\n    P55 --&gt;|Context Data| D5\n\n    %% Styling\n    classDef external fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef process fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px\n    classDef datastore fill:#fff3e0,stroke:#ef6c00,stroke-width:2px\n\n    class AI external\n    class P51,P52,P53,P54,P55 process\n    class D2,D3,D5,D17,D18,D11 datastore</code></pre>"},{"location":"diagrams/data-flow-diagram/#data-dictionary","title":"Data Dictionary","text":""},{"location":"diagrams/data-flow-diagram/#data-stores","title":"Data Stores","text":"ID Name Description Data Elements D1 Users User account information user_id, email, password_hash, profile_data, role, created_at, updated_at D2 CVs Resume/CV documents and data cv_id, user_id, title, sections, template_id, version, created_at D3 Jobs Job postings and listings job_id, title, company, description, requirements, location, salary, posted_at D4 Applications Job applications and status app_id, user_id, job_id, cv_id, status, applied_at, updated_at D5 AI Models AI analysis data and models model_id, type, data, embeddings, created_at, updated_at D6 Analytics System analytics and metrics event_id, user_id, event_type, data, timestamp D7 Notifications Notification logs and templates notif_id, user_id, type, content, status, sent_at D8 Sessions User session data session_id, user_id, token, expires_at, created_at D9 Audit Logs System audit trail log_id, user_id, action, details, timestamp D10 Templates CV templates template_id, name, structure, preview, created_at D11 Skills Database Skills and competencies skill_id, name, category, synonyms, level D12 Companies Company information company_id, name, description, industry, location D13 Locations Geographic locations location_id, city, state, country, coordinates D14 Search History User search patterns search_id, user_id, query, filters, timestamp D15 Interviews Interview scheduling interview_id, app_id, datetime, type, status D16 Application History Application status history history_id, app_id, old_status, new_status, timestamp D17 Embeddings Vector embeddings for ML embedding_id, entity_type, entity_id, vector_data D18 Chat History AI conversation history chat_id, user_id, message, response, timestamp"},{"location":"diagrams/data-flow-diagram/#data-flows","title":"Data Flows","text":"Flow Description Data Elements Registration Data User signup information email, password, name, role, preferences Login Credentials Authentication data email/username, password, 2FA_code CV Data Resume information personal_info, experience, education, skills, achievements Job Posting Job creation data title, description, requirements, company, location, salary Application Data Job application info job_id, cv_id, cover_letter, additional_documents Search Criteria Job search parameters keywords, location, salary_range, job_type, experience_level Analysis Results AI analysis output scores, recommendations, extracted_data, confidence_levels Notification Data Alert information recipient, type, content, priority, delivery_method"},{"location":"diagrams/data-flow-diagram/#external-entities","title":"External Entities","text":"Entity Description Data In Data Out Job Seekers Platform users seeking employment Registration, CV, Applications, Search Job recommendations, Notifications, Reports Recruiters Platform users posting jobs Registration, Job postings, Reviews Applications, Analytics, Notifications Job Boards External job listing sites Job data, Company info Scraping requests, API calls AI Services External AI/ML providers Analysis requests, Text data Analysis results, Recommendations Notification Services Email/SMS providers Messages, Recipients Delivery status, Responses Payment System Payment processing Payment requests, User data Transaction status, Receipts <p>This comprehensive DFD documentation provides a complete view of how data flows through the AI-Powered Job Seeker Platform at multiple levels of detail, enabling developers and stakeholders to understand the system's data processing requirements and dependencies.</p>"},{"location":"diagrams/entity-relationship-diagram/","title":"Entity Relationship Diagrams (ERD)","text":""},{"location":"diagrams/entity-relationship-diagram/#overview","title":"Overview","text":"<p>This document contains comprehensive Entity Relationship Diagrams for the AI-Powered Job Seeker Platform, showing the data model at conceptual, logical, and physical levels.</p>"},{"location":"diagrams/entity-relationship-diagram/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Conceptual ERD</li> <li>Logical ERD</li> <li>Physical Database Schema</li> <li>MongoDB Collections</li> <li>PostgreSQL Analytics Schema</li> <li>Entity Descriptions</li> <li>Relationship Descriptions</li> </ol>"},{"location":"diagrams/entity-relationship-diagram/#conceptual-erd","title":"Conceptual ERD","text":"<p>The conceptual ERD shows the high-level entities and their relationships without implementation details.</p> <pre><code>erDiagram\n    USER {\n        string user_id PK\n        string email\n        string name\n        string role\n        datetime created_at\n    }\n\n    PROFILE {\n        string profile_id PK\n        string user_id FK\n        object personal_info\n        object preferences\n        object settings\n    }\n\n    CV {\n        string cv_id PK\n        string user_id FK\n        string title\n        object sections\n        string template_id FK\n        int version\n        datetime created_at\n    }\n\n    TEMPLATE {\n        string template_id PK\n        string name\n        object structure\n        string preview_url\n        boolean is_active\n    }\n\n    JOB {\n        string job_id PK\n        string posted_by FK\n        string company_id FK\n        string title\n        text description\n        array requirements\n        object location\n        object salary\n        datetime posted_at\n    }\n\n    COMPANY {\n        string company_id PK\n        string name\n        text description\n        string industry\n        object location\n        string website\n    }\n\n    APPLICATION {\n        string application_id PK\n        string user_id FK\n        string job_id FK\n        string cv_id FK\n        string status\n        text cover_letter\n        datetime applied_at\n        datetime updated_at\n    }\n\n    SKILL {\n        string skill_id PK\n        string name\n        string category\n        array synonyms\n        string level\n    }\n\n    AI_ANALYSIS {\n        string analysis_id PK\n        string entity_type\n        string entity_id FK\n        object analysis_data\n        float confidence_score\n        datetime created_at\n    }\n\n    NOTIFICATION {\n        string notification_id PK\n        string user_id FK\n        string type\n        object content\n        string status\n        datetime sent_at\n    }\n\n    INTERVIEW {\n        string interview_id PK\n        string application_id FK\n        datetime scheduled_at\n        string type\n        string status\n        object details\n    }\n\n    %% Relationships\n    USER ||--|| PROFILE : has\n    USER ||--o{ CV : creates\n    USER ||--o{ APPLICATION : submits\n    USER ||--o{ JOB : posts\n    USER ||--o{ NOTIFICATION : receives\n\n    CV }o--|| TEMPLATE : uses\n    CV ||--o{ APPLICATION : attached_to\n    CV ||--o{ AI_ANALYSIS : analyzed_by\n\n    JOB ||--o{ APPLICATION : receives\n    JOB }o--|| COMPANY : belongs_to\n    JOB ||--o{ AI_ANALYSIS : analyzed_by\n\n    APPLICATION ||--o| INTERVIEW : may_have\n\n    CV }o--o{ SKILL : contains\n    JOB }o--o{ SKILL : requires</code></pre>"},{"location":"diagrams/entity-relationship-diagram/#logical-erd","title":"Logical ERD","text":"<p>The logical ERD includes attributes, data types, and detailed relationships.</p> <pre><code>erDiagram\n    USERS {\n        ObjectId _id PK\n        string email UK\n        string password_hash\n        string name\n        enum role \"seeker|recruiter|admin\"\n        object profile\n        object preferences\n        boolean is_active\n        datetime created_at\n        datetime updated_at\n        datetime last_login\n    }\n\n    CVS {\n        ObjectId _id PK\n        ObjectId user_id FK\n        string title\n        object personal_info\n        array experience\n        array education\n        array skills\n        array certifications\n        array projects\n        ObjectId template_id FK\n        int version\n        boolean is_public\n        datetime created_at\n        datetime updated_at\n    }\n\n    JOBS {\n        ObjectId _id PK\n        ObjectId posted_by FK\n        ObjectId company_id FK\n        string title\n        text description\n        array requirements\n        array benefits\n        object location\n        object salary_range\n        enum employment_type \"full-time|part-time|contract|remote\"\n        enum experience_level \"entry|mid|senior|executive\"\n        array tags\n        enum status \"active|paused|closed|draft\"\n        int view_count\n        datetime posted_at\n        datetime expires_at\n        datetime updated_at\n    }\n\n    APPLICATIONS {\n        ObjectId _id PK\n        ObjectId user_id FK\n        ObjectId job_id FK\n        ObjectId cv_id FK\n        enum status \"pending|reviewed|shortlisted|rejected|withdrawn\"\n        text cover_letter\n        array additional_documents\n        object recruiter_notes\n        float match_score\n        boolean is_auto_applied\n        datetime applied_at\n        datetime reviewed_at\n        datetime updated_at\n    }\n\n    COMPANIES {\n        ObjectId _id PK\n        string name UK\n        text description\n        string industry\n        object location\n        string website\n        string logo_url\n        object social_links\n        int employee_count\n        string founded_year\n        array benefits\n        float rating\n        datetime created_at\n        datetime updated_at\n    }\n\n    TEMPLATES {\n        ObjectId _id PK\n        string name UK\n        object structure\n        string preview_url\n        string category\n        array color_schemes\n        boolean is_premium\n        boolean is_active\n        int usage_count\n        datetime created_at\n        datetime updated_at\n    }\n\n    SKILLS {\n        ObjectId _id PK\n        string name UK\n        string category\n        array synonyms\n        enum level \"beginner|intermediate|advanced|expert\"\n        string description\n        int popularity_score\n        datetime created_at\n    }\n\n    CV_SKILLS {\n        ObjectId _id PK\n        ObjectId cv_id FK\n        ObjectId skill_id FK\n        enum proficiency \"basic|intermediate|advanced|expert\"\n        int years_experience\n        boolean is_verified\n    }\n\n    JOB_SKILLS {\n        ObjectId _id PK\n        ObjectId job_id FK\n        ObjectId skill_id FK\n        enum requirement_level \"required|preferred|nice-to-have\"\n        int min_years_required\n    }\n\n    AI_ANALYSES {\n        ObjectId _id PK\n        enum entity_type \"cv|job|application\"\n        ObjectId entity_id FK\n        enum analysis_type \"skill_extraction|job_matching|cv_optimization\"\n        object analysis_data\n        float confidence_score\n        string model_version\n        datetime created_at\n    }\n\n    NOTIFICATIONS {\n        ObjectId _id PK\n        ObjectId user_id FK\n        enum type \"job_alert|application_update|message|system\"\n        string title\n        text content\n        enum priority \"low|medium|high|urgent\"\n        enum status \"pending|sent|delivered|failed|read\"\n        enum delivery_method \"email|sms|push|in_app\"\n        object metadata\n        datetime scheduled_at\n        datetime sent_at\n        datetime read_at\n    }\n\n    INTERVIEWS {\n        ObjectId _id PK\n        ObjectId application_id FK\n        datetime scheduled_at\n        enum type \"phone|video|in_person|technical\"\n        enum status \"scheduled|completed|cancelled|rescheduled\"\n        string meeting_link\n        text notes\n        object feedback\n        datetime created_at\n        datetime updated_at\n    }\n\n    SAVED_JOBS {\n        ObjectId _id PK\n        ObjectId user_id FK\n        ObjectId job_id FK\n        text notes\n        datetime saved_at\n    }\n\n    JOB_VIEWS {\n        ObjectId _id PK\n        ObjectId user_id FK\n        ObjectId job_id FK\n        string ip_address\n        string user_agent\n        datetime viewed_at\n    }\n\n    %% Relationships\n    USERS ||--o{ CVS : creates\n    USERS ||--o{ APPLICATIONS : submits\n    USERS ||--o{ JOBS : posts\n    USERS ||--o{ NOTIFICATIONS : receives\n    USERS ||--o{ SAVED_JOBS : saves\n    USERS ||--o{ JOB_VIEWS : views\n\n    CVS }o--|| TEMPLATES : uses\n    CVS ||--o{ APPLICATIONS : used_in\n    CVS ||--o{ CV_SKILLS : has\n    CVS ||--o{ AI_ANALYSES : analyzed\n\n    JOBS }o--|| COMPANIES : belongs_to\n    JOBS ||--o{ APPLICATIONS : receives\n    JOBS ||--o{ JOB_SKILLS : requires\n    JOBS ||--o{ SAVED_JOBS : saved_as\n    JOBS ||--o{ JOB_VIEWS : viewed_as\n    JOBS ||--o{ AI_ANALYSES : analyzed\n\n    APPLICATIONS ||--o| INTERVIEWS : may_have\n    APPLICATIONS ||--o{ AI_ANALYSES : analyzed\n\n    SKILLS ||--o{ CV_SKILLS : linked_to\n    SKILLS ||--o{ JOB_SKILLS : required_by</code></pre>"},{"location":"diagrams/entity-relationship-diagram/#physical-database-schema","title":"Physical Database Schema","text":""},{"location":"diagrams/entity-relationship-diagram/#mongodb-schema-primary-database","title":"MongoDB Schema (Primary Database)","text":"<pre><code>// Users Collection\n{\n  _id: ObjectId,\n  email: { type: String, unique: true, required: true },\n  password_hash: { type: String, required: true },\n  name: { type: String, required: true },\n  role: { type: String, enum: ['seeker', 'recruiter', 'admin'], required: true },\n  profile: {\n    avatar_url: String,\n    phone: String,\n    location: {\n      city: String,\n      state: String,\n      country: String,\n      coordinates: [Number] // [longitude, latitude]\n    },\n    bio: String,\n    linkedin_url: String,\n    github_url: String,\n    portfolio_url: String\n  },\n  preferences: {\n    job_alerts: Boolean,\n    email_notifications: Boolean,\n    sms_notifications: Boolean,\n    preferred_locations: [String],\n    salary_expectations: {\n      min: Number,\n      max: Number,\n      currency: String\n    },\n    work_authorization: String,\n    remote_preference: String\n  },\n  subscription: {\n    plan: String,\n    status: String,\n    expires_at: Date\n  },\n  is_active: { type: Boolean, default: true },\n  is_verified: { type: Boolean, default: false },\n  created_at: { type: Date, default: Date.now },\n  updated_at: { type: Date, default: Date.now },\n  last_login: Date\n}\n\n// CVs Collection\n{\n  _id: ObjectId,\n  user_id: { type: ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  personal_info: {\n    full_name: String,\n    email: String,\n    phone: String,\n    address: String,\n    linkedin: String,\n    portfolio: String\n  },\n  summary: String,\n  experience: [{\n    company: String,\n    position: String,\n    start_date: Date,\n    end_date: Date,\n    is_current: Boolean,\n    description: String,\n    achievements: [String],\n    skills_used: [String]\n  }],\n  education: [{\n    institution: String,\n    degree: String,\n    field_of_study: String,\n    start_date: Date,\n    end_date: Date,\n    gpa: Number,\n    achievements: [String]\n  }],\n  skills: [{\n    name: String,\n    level: String,\n    years_experience: Number,\n    is_verified: Boolean\n  }],\n  certifications: [{\n    name: String,\n    issuer: String,\n    issue_date: Date,\n    expiry_date: Date,\n    credential_id: String,\n    url: String\n  }],\n  projects: [{\n    name: String,\n    description: String,\n    technologies: [String],\n    url: String,\n    github_url: String,\n    start_date: Date,\n    end_date: Date\n  }],\n  languages: [{\n    name: String,\n    proficiency: String\n  }],\n  template_id: { type: ObjectId, ref: 'Template' },\n  version: { type: Number, default: 1 },\n  is_public: { type: Boolean, default: false },\n  download_count: { type: Number, default: 0 },\n  view_count: { type: Number, default: 0 },\n  created_at: { type: Date, default: Date.now },\n  updated_at: { type: Date, default: Date.now }\n}\n\n// Jobs Collection\n{\n  _id: ObjectId,\n  posted_by: { type: ObjectId, ref: 'User', required: true },\n  company_id: { type: ObjectId, ref: 'Company', required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  requirements: [String],\n  responsibilities: [String],\n  benefits: [String],\n  location: {\n    city: String,\n    state: String,\n    country: String,\n    coordinates: [Number],\n    is_remote: Boolean,\n    remote_type: String // 'fully_remote', 'hybrid', 'occasional'\n  },\n  salary_range: {\n    min: Number,\n    max: Number,\n    currency: String,\n    period: String // 'hourly', 'monthly', 'yearly'\n  },\n  employment_type: {\n    type: String,\n    enum: ['full-time', 'part-time', 'contract', 'temporary', 'internship']\n  },\n  experience_level: {\n    type: String,\n    enum: ['entry', 'mid', 'senior', 'executive']\n  },\n  skills_required: [{\n    name: String,\n    level: String,\n    is_required: Boolean\n  }],\n  application_deadline: Date,\n  tags: [String],\n  status: {\n    type: String,\n    enum: ['draft', 'active', 'paused', 'closed', 'expired'],\n    default: 'active'\n  },\n  external_source: {\n    platform: String,\n    external_id: String,\n    url: String\n  },\n  view_count: { type: Number, default: 0 },\n  application_count: { type: Number, default: 0 },\n  posted_at: { type: Date, default: Date.now },\n  expires_at: Date,\n  updated_at: { type: Date, default: Date.now }\n}\n\n// Applications Collection\n{\n  _id: ObjectId,\n  user_id: { type: ObjectId, ref: 'User', required: true },\n  job_id: { type: ObjectId, ref: 'Job', required: true },\n  cv_id: { type: ObjectId, ref: 'CV', required: true },\n  status: {\n    type: String,\n    enum: ['pending', 'reviewed', 'shortlisted', 'interviewed', 'offered', 'rejected', 'withdrawn'],\n    default: 'pending'\n  },\n  cover_letter: String,\n  additional_documents: [{\n    name: String,\n    url: String,\n    type: String\n  }],\n  questions_answers: [{\n    question: String,\n    answer: String\n  }],\n  recruiter_notes: [{\n    note: String,\n    created_by: ObjectId,\n    created_at: Date\n  }],\n  match_score: Number,\n  ai_analysis: {\n    compatibility_score: Number,\n    skill_match: Number,\n    experience_match: Number,\n    location_match: Number,\n    recommendations: [String]\n  },\n  is_auto_applied: { type: Boolean, default: false },\n  source: String, // 'platform', 'external', 'referral'\n  applied_at: { type: Date, default: Date.now },\n  reviewed_at: Date,\n  updated_at: { type: Date, default: Date.now }\n}\n\n// Companies Collection\n{\n  _id: ObjectId,\n  name: { type: String, required: true, unique: true },\n  description: String,\n  industry: String,\n  location: {\n    headquarters: {\n      city: String,\n      state: String,\n      country: String\n    },\n    offices: [{\n      city: String,\n      state: String,\n      country: String,\n      is_headquarters: Boolean\n    }]\n  },\n  website: String,\n  logo_url: String,\n  cover_image_url: String,\n  social_links: {\n    linkedin: String,\n    twitter: String,\n    facebook: String,\n    instagram: String\n  },\n  employee_count: String,\n  founded_year: Number,\n  benefits: [String],\n  company_culture: [String],\n  rating: Number,\n  review_count: Number,\n  is_verified: { type: Boolean, default: false },\n  created_at: { type: Date, default: Date.now },\n  updated_at: { type: Date, default: Date.now }\n}\n</code></pre>"},{"location":"diagrams/entity-relationship-diagram/#postgresql-analytics-schema","title":"PostgreSQL Analytics Schema","text":"<pre><code>-- User Events Table\nCREATE TABLE user_events (\n    id SERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    event_type VARCHAR(50) NOT NULL,\n    event_data JSONB,\n    session_id VARCHAR(255),\n    ip_address INET,\n    user_agent TEXT,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Job Application Analytics\nCREATE TABLE job_application_analytics (\n    id SERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    job_id UUID NOT NULL,\n    application_id UUID NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    match_score DECIMAL(3,2),\n    source VARCHAR(50),\n    time_to_apply INTERVAL,\n    applied_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- CV Analytics\nCREATE TABLE cv_analytics (\n    id SERIAL PRIMARY KEY,\n    cv_id UUID NOT NULL,\n    user_id UUID NOT NULL,\n    view_count INTEGER DEFAULT 0,\n    download_count INTEGER DEFAULT 0,\n    share_count INTEGER DEFAULT 0,\n    last_updated TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Job Performance Analytics\nCREATE TABLE job_performance_analytics (\n    id SERIAL PRIMARY KEY,\n    job_id UUID NOT NULL,\n    company_id UUID NOT NULL,\n    view_count INTEGER DEFAULT 0,\n    application_count INTEGER DEFAULT 0,\n    conversion_rate DECIMAL(5,2),\n    avg_time_to_apply INTERVAL,\n    posted_at TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- AI Interaction Analytics\nCREATE TABLE ai_interaction_analytics (\n    id SERIAL PRIMARY KEY,\n    user_id UUID NOT NULL,\n    interaction_type VARCHAR(50) NOT NULL,\n    query TEXT,\n    response_type VARCHAR(50),\n    tokens_used INTEGER,\n    response_time_ms INTEGER,\n    satisfaction_score INTEGER,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Search Analytics\nCREATE TABLE search_analytics (\n    id SERIAL PRIMARY KEY,\n    user_id UUID,\n    search_query TEXT NOT NULL,\n    filters_applied JSONB,\n    results_count INTEGER,\n    clicked_results INTEGER,\n    search_session_id VARCHAR(255),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Notification Analytics\nCREATE TABLE notification_analytics (\n    id SERIAL PRIMARY KEY,\n    notification_id UUID NOT NULL,\n    user_id UUID NOT NULL,\n    type VARCHAR(50) NOT NULL,\n    delivery_method VARCHAR(20) NOT NULL,\n    status VARCHAR(20) NOT NULL,\n    sent_at TIMESTAMP,\n    delivered_at TIMESTAMP,\n    opened_at TIMESTAMP,\n    clicked_at TIMESTAMP\n);\n\n-- System Performance Metrics\nCREATE TABLE system_metrics (\n    id SERIAL PRIMARY KEY,\n    metric_name VARCHAR(100) NOT NULL,\n    metric_value DECIMAL(10,2) NOT NULL,\n    metric_unit VARCHAR(20),\n    service_name VARCHAR(50),\n    recorded_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Indexes for better performance\nCREATE INDEX idx_user_events_user_id ON user_events(user_id);\nCREATE INDEX idx_user_events_event_type ON user_events(event_type);\nCREATE INDEX idx_user_events_created_at ON user_events(created_at);\n\nCREATE INDEX idx_job_app_analytics_user_id ON job_application_analytics(user_id);\nCREATE INDEX idx_job_app_analytics_job_id ON job_application_analytics(job_id);\nCREATE INDEX idx_job_app_analytics_applied_at ON job_application_analytics(applied_at);\n\nCREATE INDEX idx_search_analytics_user_id ON search_analytics(user_id);\nCREATE INDEX idx_search_analytics_created_at ON search_analytics(created_at);\n</code></pre>"},{"location":"diagrams/entity-relationship-diagram/#entity-descriptions","title":"Entity Descriptions","text":""},{"location":"diagrams/entity-relationship-diagram/#core-entities","title":"Core Entities","text":"Entity Purpose Key Attributes Users Store user account information and profiles email, role, preferences, profile data CVs Store resume/CV data with versioning user_id, sections, template, version Jobs Store job postings from recruiters and external sources title, description, requirements, company Applications Track job applications and their status user_id, job_id, cv_id, status, match_score Companies Store company information and profiles name, description, industry, location"},{"location":"diagrams/entity-relationship-diagram/#supporting-entities","title":"Supporting Entities","text":"Entity Purpose Key Attributes Templates CV template designs and structures name, structure, preview, category Skills Standardized skill definitions name, category, synonyms, level Notifications System notifications and alerts user_id, type, content, delivery_method Interviews Interview scheduling and management application_id, datetime, type, status AI_Analyses AI analysis results and recommendations entity_type, analysis_data, confidence"},{"location":"diagrams/entity-relationship-diagram/#analytics-entities","title":"Analytics Entities","text":"Entity Purpose Key Attributes User_Events Track user interactions and behavior user_id, event_type, session_id, timestamp Job_Performance Monitor job posting effectiveness job_id, view_count, application_count, conversion Search_Analytics Analyze search patterns and results query, filters, results_count, user_id AI_Interactions Track AI service usage and performance interaction_type, tokens_used, response_time"},{"location":"diagrams/entity-relationship-diagram/#relationship-descriptions","title":"Relationship Descriptions","text":""},{"location":"diagrams/entity-relationship-diagram/#primary-relationships","title":"Primary Relationships","text":"Relationship Type Description User \u2192 CV One-to-Many A user can create multiple CVs User \u2192 Application One-to-Many A user can submit multiple applications Job \u2192 Application One-to-Many A job can receive multiple applications CV \u2192 Application One-to-Many A CV can be used for multiple applications Company \u2192 Job One-to-Many A company can post multiple jobs"},{"location":"diagrams/entity-relationship-diagram/#junction-tables","title":"Junction Tables","text":"Table Purpose Entities Connected CV_Skills Links CVs to skills with proficiency levels CV \u2194 Skills Job_Skills Links jobs to required skills Job \u2194 Skills Saved_Jobs Users' saved/bookmarked jobs User \u2194 Job Job_Views Track job view history User \u2194 Job"},{"location":"diagrams/entity-relationship-diagram/#constraints-and-rules","title":"Constraints and Rules","text":""},{"location":"diagrams/entity-relationship-diagram/#business-rules","title":"Business Rules","text":"<ol> <li>User Registration: Email must be unique across all users</li> <li>CV Ownership: Users can only access/modify their own CVs</li> <li>Job Applications: Users cannot apply to the same job multiple times with different CVs</li> <li>Company Jobs: Only recruiter users can post jobs for their companies</li> <li>Application Status: Status transitions must follow defined workflow</li> </ol>"},{"location":"diagrams/entity-relationship-diagram/#data-integrity","title":"Data Integrity","text":"<ol> <li>Referential Integrity: All foreign keys must reference valid entities</li> <li>Cascade Rules: Deleting a user cascades to their CVs and applications</li> <li>Soft Deletes: Important entities use soft delete (is_active flag)</li> <li>Audit Trail: All modifications tracked with timestamps</li> <li>Version Control: CVs maintain version history</li> </ol>"},{"location":"diagrams/entity-relationship-diagram/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Indexing: Strategic indexes on frequently queried fields</li> <li>Partitioning: Large tables partitioned by date (analytics)</li> <li>Caching: Frequently accessed data cached in Redis</li> <li>Aggregation: Pre-calculated metrics for dashboards</li> <li>Archiving: Old data archived to maintain performance</li> </ol> <p>This comprehensive ERD documentation provides a complete view of the data model for the AI-Powered Job Seeker Platform, enabling proper database design, implementation, and maintenance.</p>"},{"location":"diagrams/workflow-diagrams/","title":"Workflow Diagrams","text":""},{"location":"diagrams/workflow-diagrams/#overview","title":"Overview","text":"<p>This document contains comprehensive workflow diagrams for the AI-Powered Job Seeker Platform, covering user journeys, business processes, technical workflows, and automation sequences.</p>"},{"location":"diagrams/workflow-diagrams/#table-of-contents","title":"Table of Contents","text":"<ol> <li>User Journey Workflows</li> <li>Business Process Workflows</li> <li>Technical Process Workflows</li> <li>n8n Automation Workflows</li> <li>AI Processing Workflows</li> <li>Error Handling Workflows</li> </ol>"},{"location":"diagrams/workflow-diagrams/#user-journey-workflows","title":"User Journey Workflows","text":""},{"location":"diagrams/workflow-diagrams/#11-job-seeker-registration-onboarding","title":"1.1 Job Seeker Registration &amp; Onboarding","text":"<pre><code>flowchart TD\n    A[Landing Page] --&gt; B{User Type?}\n    B --&gt;|Job Seeker| C[Seeker Registration Form]\n    B --&gt;|Recruiter| D[Recruiter Registration Form]\n\n    C --&gt; E[Fill Basic Info]\n    E --&gt; F[Email Verification]\n    F --&gt; G{Email Verified?}\n    G --&gt;|No| H[Resend Verification]\n    H --&gt; F\n    G --&gt;|Yes| I[Profile Setup]\n\n    I --&gt; J[Upload Profile Picture]\n    J --&gt; K[Set Preferences]\n    K --&gt; L[Location &amp; Work Authorization]\n    L --&gt; M[CV Upload/Creation Choice]\n\n    M --&gt; N{Create New CV?}\n    N --&gt;|Yes| O[CV Builder Tutorial]\n    N --&gt;|No| P[Upload Existing CV]\n\n    O --&gt; Q[Create First CV]\n    P --&gt; R[AI CV Analysis]\n    Q --&gt; S[Dashboard Welcome]\n    R --&gt; S\n\n    S --&gt; T[Onboarding Complete]\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n\n    class A,T startEnd\n    class C,D,E,F,I,J,K,L,O,P,Q,S process\n    class B,G,N decision\n    class R ai</code></pre>"},{"location":"diagrams/workflow-diagrams/#12-job-search-application-workflow","title":"1.2 Job Search &amp; Application Workflow","text":"<pre><code>flowchart TD\n    A[Dashboard] --&gt; B[Job Search]\n    B --&gt; C[Set Search Criteria]\n    C --&gt; D[AI-Enhanced Search]\n    D --&gt; E[View Job Results]\n\n    E --&gt; F{Job Interesting?}\n    F --&gt;|No| G[Refine Search]\n    F --&gt;|Yes| H[View Job Details]\n\n    G --&gt; D\n    H --&gt; I[AI Match Analysis]\n    I --&gt; J{Good Match?}\n\n    J --&gt;|Low Match| K[Get AI Suggestions]\n    K --&gt; L[Improve CV/Skills]\n    L --&gt; M[Return to Search]\n    M --&gt; D\n\n    J --&gt;|Good Match| N[Save Job]\n    N --&gt; O{Apply Now?}\n    O --&gt;|Later| P[Add to Saved Jobs]\n    O --&gt;|Yes| Q[Start Application]\n\n    Q --&gt; R[Select CV Version]\n    R --&gt; S[AI Application Review]\n    S --&gt; T[Customize Cover Letter]\n    T --&gt; U[Review Application]\n    U --&gt; V{Submit?}\n\n    V --&gt;|No| W[Edit Application]\n    W --&gt; U\n    V --&gt;|Yes| X[Submit Application]\n\n    X --&gt; Y{Auto-Apply Enabled?}\n    Y --&gt;|Yes| Z[Queue for Auto-Apply]\n    Y --&gt;|No| AA[Manual Submission]\n\n    Z --&gt; BB[Application Tracking]\n    AA --&gt; BB\n    BB --&gt; CC[Notification Sent]\n\n    P --&gt; DD[Saved Jobs List]\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef automation fill:#ffebee,stroke:#f44336,stroke-width:2px\n\n    class A,CC,DD startEnd\n    class B,C,E,H,N,P,Q,R,T,U,W,X,AA,BB process\n    class F,J,O,V,Y decision\n    class D,I,K,S ai\n    class Z automation</code></pre>"},{"location":"diagrams/workflow-diagrams/#13-recruiter-job-posting-workflow","title":"1.3 Recruiter Job Posting Workflow","text":"<pre><code>flowchart TD\n    A[Recruiter Dashboard] --&gt; B[Create Job Posting]\n    B --&gt; C[Job Information Form]\n    C --&gt; D[Company Selection]\n    D --&gt; E[Job Details Entry]\n\n    E --&gt; F[Job Description]\n    F --&gt; G[Requirements &amp; Skills]\n    G --&gt; H[Compensation Details]\n    H --&gt; I[Location &amp; Remote Options]\n    I --&gt; J[Application Settings]\n\n    J --&gt; K[AI Job Analysis]\n    K --&gt; L[Optimization Suggestions]\n    L --&gt; M{Apply Suggestions?}\n\n    M --&gt;|Yes| N[Auto-Optimize]\n    M --&gt;|No| O[Manual Review]\n\n    N --&gt; P[Preview Job Posting]\n    O --&gt; P\n\n    P --&gt; Q{Publish?}\n    Q --&gt;|No| R[Edit Job Posting]\n    R --&gt; P\n    Q --&gt;|Yes| S[Publish Job]\n\n    S --&gt; T[Job Goes Live]\n    T --&gt; U[Notification to Network]\n    U --&gt; V[Analytics Tracking Starts]\n    V --&gt; W[Application Monitoring]\n\n    W --&gt; X{Applications Received?}\n    X --&gt;|Yes| Y[Review Applications]\n    X --&gt;|No| Z[Promote Job Posting]\n\n    Y --&gt; AA[Shortlist Candidates]\n    AA --&gt; BB[Schedule Interviews]\n    BB --&gt; CC[Hiring Decision]\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n\n    class A,CC startEnd\n    class B,C,D,E,F,G,H,I,J,O,P,R,S,T,U,V,W,Y,AA,BB,Z process\n    class M,Q,X decision\n    class K,L,N ai</code></pre>"},{"location":"diagrams/workflow-diagrams/#business-process-workflows","title":"Business Process Workflows","text":""},{"location":"diagrams/workflow-diagrams/#21-application-review-process","title":"2.1 Application Review Process","text":"<pre><code>flowchart TD\n    A[Application Received] --&gt; B[Automatic Screening]\n    B --&gt; C[AI Initial Assessment]\n    C --&gt; D{Meets Basic Requirements?}\n\n    D --&gt;|No| E[Auto-Rejection]\n    E --&gt; F[Send Rejection Email]\n    F --&gt; G[Update Application Status]\n\n    D --&gt;|Yes| H[Calculate Match Score]\n    H --&gt; I{Score Above Threshold?}\n\n    I --&gt;|No| J[Manual Review Queue]\n    I --&gt;|Yes| K[Priority Review Queue]\n\n    J --&gt; L[Recruiter Manual Review]\n    K --&gt; M[Senior Recruiter Review]\n\n    L --&gt; N{Manual Decision}\n    M --&gt; O{Priority Decision}\n\n    N --&gt;|Reject| E\n    N --&gt;|Shortlist| P[Add to Shortlist]\n    O --&gt;|Reject| E\n    O --&gt;|Fast-track| Q[Schedule Interview]\n    O --&gt;|Shortlist| P\n\n    P --&gt; R[Shortlist Notification]\n    R --&gt; S{Interview Required?}\n\n    S --&gt;|Yes| Q\n    S --&gt;|No| T[Direct Offer Process]\n\n    Q --&gt; U[Interview Scheduling]\n    U --&gt; V[Interview Conducted]\n    V --&gt; W[Post-Interview Assessment]\n\n    W --&gt; X{Interview Result}\n    X --&gt;|Pass| T\n    X --&gt;|Fail| Y[Thank You Email]\n\n    T --&gt; Z[Job Offer]\n    Z --&gt; AA{Offer Accepted?}\n\n    AA --&gt;|Yes| BB[Onboarding Process]\n    AA --&gt;|No| CC[Offer Declined]\n\n    G --&gt; DD[Process Complete]\n    Y --&gt; DD\n    BB --&gt; DD\n    CC --&gt; DD\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef rejection fill:#ffebee,stroke:#f44336,stroke-width:2px\n    classDef success fill:#e8f5e8,stroke:#4caf50,stroke-width:2px\n\n    class A,DD startEnd\n    class B,F,G,J,K,L,M,P,R,U,V,W,Z process\n    class D,I,N,O,S,X,AA decision\n    class C,H ai\n    class E,Y rejection\n    class BB,T success</code></pre>"},{"location":"diagrams/workflow-diagrams/#22-cv-enhancement-process","title":"2.2 CV Enhancement Process","text":"<pre><code>flowchart TD\n    A[CV Upload/Creation] --&gt; B[Parse CV Content]\n    B --&gt; C[AI Content Analysis]\n    C --&gt; D[Extract Skills &amp; Experience]\n    D --&gt; E[Industry Benchmarking]\n\n    E --&gt; F[Generate Improvement Suggestions]\n    F --&gt; G[Identify Missing Skills]\n    G --&gt; H[ATS Optimization Check]\n    H --&gt; I[Generate Report]\n\n    I --&gt; J{User Wants Improvements?}\n    J --&gt;|No| K[Save Current Version]\n    J --&gt;|Yes| L[Show Suggestions]\n\n    L --&gt; M{Auto-Apply Suggestions?}\n    M --&gt;|Yes| N[AI Auto-Enhancement]\n    M --&gt;|No| O[Manual Editing Mode]\n\n    N --&gt; P[Apply AI Improvements]\n    P --&gt; Q[Validate Changes]\n    Q --&gt; R{Validation Passed?}\n\n    R --&gt;|No| S[Revert Changes]\n    S --&gt; O\n    R --&gt;|Yes| T[Save Enhanced CV]\n\n    O --&gt; U[User Manual Edits]\n    U --&gt; V[Real-time AI Feedback]\n    V --&gt; W{Save Changes?}\n\n    W --&gt;|No| X[Discard Changes]\n    W --&gt;|Yes| Y[Save Manual Changes]\n\n    K --&gt; Z[Version Control Update]\n    T --&gt; Z\n    Y --&gt; Z\n    X --&gt; Z\n\n    Z --&gt; AA[Update CV Analytics]\n    AA --&gt; BB[Trigger Job Matching]\n    BB --&gt; CC[Process Complete]\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef manual fill:#f9f9f9,stroke:#757575,stroke-width:2px\n\n    class A,CC startEnd\n    class B,E,I,K,P,Q,S,T,Y,X,Z,AA,BB process\n    class J,M,R,W decision\n    class C,D,F,G,H,N,V ai\n    class L,O,U manual</code></pre>"},{"location":"diagrams/workflow-diagrams/#technical-process-workflows","title":"Technical Process Workflows","text":""},{"location":"diagrams/workflow-diagrams/#31-system-authentication-flow","title":"3.1 System Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant F as Frontend\n    participant AG as API Gateway\n    participant AS as Auth Service\n    participant DB as Database\n    participant R as Redis Cache\n\n    U-&gt;&gt;F: Login Request\n    F-&gt;&gt;AG: POST /api/auth/login\n    AG-&gt;&gt;AS: Forward Auth Request\n\n    AS-&gt;&gt;DB: Validate Credentials\n    DB--&gt;&gt;AS: User Data\n\n    alt Valid Credentials\n        AS-&gt;&gt;AS: Generate JWT Tokens\n        AS-&gt;&gt;R: Store Refresh Token\n        AS--&gt;&gt;AG: Return Tokens\n        AG--&gt;&gt;F: Auth Success + Tokens\n        F-&gt;&gt;F: Store Access Token\n        F--&gt;&gt;U: Login Success\n\n        Note over U,F: User navigates app\n        U-&gt;&gt;F: API Request\n        F-&gt;&gt;AG: Request + Access Token\n        AG-&gt;&gt;AG: Validate JWT\n\n        alt Token Valid\n            AG-&gt;&gt;AG: Extract User Info\n            AG-&gt;&gt;AS: Forward Request\n            AS--&gt;&gt;AG: Response\n            AG--&gt;&gt;F: API Response\n            F--&gt;&gt;U: Data\n        else Token Expired\n            AG--&gt;&gt;F: 401 Unauthorized\n            F-&gt;&gt;AG: POST /api/auth/refresh\n            AG-&gt;&gt;AS: Refresh Token Request\n            AS-&gt;&gt;R: Validate Refresh Token\n\n            alt Refresh Valid\n                AS-&gt;&gt;AS: Generate New Access Token\n                AS--&gt;&gt;AG: New Access Token\n                AG--&gt;&gt;F: Token Refreshed\n                F-&gt;&gt;F: Update Stored Token\n                F-&gt;&gt;AG: Retry Original Request\n            else Refresh Invalid\n                AS--&gt;&gt;AG: 401 Unauthorized\n                AG--&gt;&gt;F: Force Logout\n                F-&gt;&gt;F: Clear Tokens\n                F--&gt;&gt;U: Redirect to Login\n            end\n        end\n    else Invalid Credentials\n        AS--&gt;&gt;AG: 401 Unauthorized\n        AG--&gt;&gt;F: Login Failed\n        F--&gt;&gt;U: Error Message\n    end</code></pre>"},{"location":"diagrams/workflow-diagrams/#32-job-scraping-processing-workflow","title":"3.2 Job Scraping &amp; Processing Workflow","text":"<pre><code>flowchart TD\n    A[Scheduled Job Scraping] --&gt; B[Initialize Scraping Session]\n    B --&gt; C[Load Target Job Boards]\n    C --&gt; D[Configure Scraping Parameters]\n\n    D --&gt; E{For Each Job Board}\n    E --&gt; F[LinkedIn Scraper]\n    E --&gt; G[Indeed Scraper]\n    E --&gt; H[Glassdoor Scraper]\n\n    F --&gt; I[Extract Job Listings]\n    G --&gt; I\n    H --&gt; I\n\n    I --&gt; J[Data Validation &amp; Cleaning]\n    J --&gt; K[Duplicate Detection]\n    K --&gt; L{Duplicate Found?}\n\n    L --&gt;|Yes| M[Skip Duplicate]\n    L --&gt;|No| N[Process New Job]\n\n    M --&gt; O[Log Skipped Job]\n    N --&gt; P[Extract Job Details]\n    P --&gt; Q[Company Information Lookup]\n    Q --&gt; R[Location Standardization]\n    R --&gt; S[Skill Extraction]\n\n    S --&gt; T[AI Job Analysis]\n    T --&gt; U[Generate Job Embeddings]\n    U --&gt; V[Store in Database]\n    V --&gt; W[Update Search Index]\n\n    W --&gt; X[Job Quality Score]\n    X --&gt; Y{Quality Threshold Met?}\n\n    Y --&gt;|No| Z[Flag for Manual Review]\n    Y --&gt;|Yes| AA[Publish Job]\n\n    Z --&gt; BB[Manual Review Queue]\n    AA --&gt; CC[Trigger Job Matching]\n    CC --&gt; DD[Send Job Alerts]\n\n    O --&gt; EE{More Jobs?}\n    BB --&gt; EE\n    DD --&gt; EE\n\n    EE --&gt;|Yes| E\n    EE --&gt;|No| FF[Generate Scraping Report]\n    FF --&gt; GG[Update Scraping Metrics]\n    GG --&gt; HH[Schedule Next Run]\n\n    %% Error Handling\n    I -.-&gt;|Error| II[Log Scraping Error]\n    P -.-&gt;|Error| II\n    T -.-&gt;|Error| II\n    II --&gt; JJ[Error Notification]\n    JJ --&gt; EE\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef error fill:#ffebee,stroke:#f44336,stroke-width:2px\n    classDef scrapers fill:#e0f2f1,stroke:#009688,stroke-width:2px\n\n    class A,HH startEnd\n    class B,C,D,I,J,K,M,O,P,Q,R,V,W,AA,BB,CC,DD,FF,GG process\n    class E,L,Y,EE decision\n    class S,T,U,X ai\n    class II,JJ error\n    class F,G,H scrapers</code></pre>"},{"location":"diagrams/workflow-diagrams/#n8n-automation-workflows","title":"n8n Automation Workflows","text":""},{"location":"diagrams/workflow-diagrams/#41-auto-apply-workflow","title":"4.1 Auto-Apply Workflow","text":"<pre><code>flowchart TD\n    A[Job Matching Trigger] --&gt; B[Load User Preferences]\n    B --&gt; C[Filter Eligible Jobs]\n    C --&gt; D{Jobs Available?}\n\n    D --&gt;|No| E[No Action Needed]\n    D --&gt;|Yes| F[For Each Matched Job]\n\n    F --&gt; G[Check Application History]\n    G --&gt; H{Already Applied?}\n    H --&gt;|Yes| I[Skip Job]\n    H --&gt;|No| J[Validate Job Requirements]\n\n    J --&gt; K{Requirements Met?}\n    K --&gt;|No| I\n    K --&gt;|Yes| L[Select Best CV]\n\n    L --&gt; M[Generate Cover Letter]\n    M --&gt; N[AI Application Review]\n    N --&gt; O{Quality Check Passed?}\n\n    O --&gt;|No| P[Flag for Manual Review]\n    O --&gt;|Yes| Q[Prepare Application Data]\n\n    Q --&gt; R{External Platform?}\n    R --&gt;|Yes| S[Use External API]\n    R --&gt;|No| T[Internal Application]\n\n    S --&gt; U[Submit via API]\n    T --&gt; V[Create Internal Application]\n\n    U --&gt; W{Submission Successful?}\n    V --&gt; X[Mark as Applied]\n\n    W --&gt;|No| Y[Log Error &amp; Retry]\n    W --&gt;|Yes| Z[Confirm Application]\n\n    Z --&gt; X\n    X --&gt; AA[Update Application Tracking]\n    AA --&gt; BB[Send User Notification]\n\n    I --&gt; CC{More Jobs?}\n    P --&gt; CC\n    BB --&gt; CC\n    Y --&gt; CC\n\n    CC --&gt;|Yes| F\n    CC --&gt;|No| DD[Generate Auto-Apply Report]\n    DD --&gt; EE[Send Summary Email]\n\n    E --&gt; FF[End Process]\n    EE --&gt; FF\n\n    %% Error Handling\n    Y --&gt; GG{Retry Limit Reached?}\n    GG --&gt;|No| HH[Wait &amp; Retry]\n    GG --&gt;|Yes| II[Mark as Failed]\n    HH --&gt; U\n    II --&gt; CC\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef external fill:#e0f2f1,stroke:#009688,stroke-width:2px\n    classDef error fill:#ffebee,stroke:#f44336,stroke-width:2px\n\n    class A,E,FF startEnd\n    class B,C,G,I,L,P,Q,T,V,X,AA,BB,DD,EE process\n    class D,H,K,O,R,W,CC,GG decision\n    class M,N ai\n    class S,U external\n    class Y,HH,II error</code></pre>"},{"location":"diagrams/workflow-diagrams/#42-notification-orchestration-workflow","title":"4.2 Notification Orchestration Workflow","text":"<pre><code>flowchart TD\n    A[Notification Trigger] --&gt; B[Load Notification Template]\n    B --&gt; C[Identify Recipients]\n    C --&gt; D[Check User Preferences]\n    D --&gt; E[Filter by Preferences]\n\n    E --&gt; F{Recipients Found?}\n    F --&gt;|No| G[Log No Recipients]\n    F --&gt;|Yes| H[For Each Recipient]\n\n    H --&gt; I[Load User Profile]\n    I --&gt; J[Personalize Content]\n    J --&gt; K[Select Delivery Methods]\n\n    K --&gt; L{Email Enabled?}\n    L --&gt;|Yes| M[Prepare Email]\n    L --&gt;|No| N{SMS Enabled?}\n\n    N --&gt;|Yes| O[Prepare SMS]\n    N --&gt;|No| P{Push Enabled?}\n\n    P --&gt;|Yes| Q[Prepare Push Notification]\n    P --&gt;|No| R[In-App Only]\n\n    M --&gt; S[Send Email via SendGrid]\n    O --&gt; T[Send SMS via Twilio]\n    Q --&gt; U[Send Push via Firebase]\n    R --&gt; V[Create In-App Notification]\n\n    S --&gt; W{Email Successful?}\n    T --&gt; X{SMS Successful?}\n    U --&gt; Y{Push Successful?}\n    V --&gt; Z[In-App Created]\n\n    W --&gt;|Yes| AA[Log Email Success]\n    W --&gt;|No| BB[Log Email Failure]\n    X --&gt;|Yes| CC[Log SMS Success]\n    X --&gt;|No| DD[Log SMS Failure]\n    Y --&gt;|Yes| EE[Log Push Success]\n    Y --&gt;|No| FF[Log Push Failure]\n\n    AA --&gt; GG[Update Delivery Status]\n    BB --&gt; GG\n    CC --&gt; GG\n    DD --&gt; GG\n    EE --&gt; GG\n    FF --&gt; GG\n    Z --&gt; GG\n\n    GG --&gt; HH{More Recipients?}\n    HH --&gt;|Yes| H\n    HH --&gt;|No| II[Generate Delivery Report]\n\n    II --&gt; JJ[Update Analytics]\n    JJ --&gt; KK[Schedule Follow-up if Needed]\n\n    G --&gt; LL[End Process]\n    KK --&gt; LL\n\n    %% Error Handling\n    BB -.-&gt;|Retry| MM[Retry Email]\n    DD -.-&gt;|Retry| NN[Retry SMS]\n    FF -.-&gt;|Retry| OO[Retry Push]\n\n    MM --&gt; W\n    NN --&gt; X\n    OO --&gt; Y\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef external fill:#e0f2f1,stroke:#009688,stroke-width:2px\n    classDef success fill:#e8f5e8,stroke:#4caf50,stroke-width:2px\n    classDef failure fill:#ffebee,stroke:#f44336,stroke-width:2px\n\n    class A,G,LL startEnd\n    class B,C,D,E,I,J,K,M,O,Q,R,V,II,JJ,KK process\n    class F,L,N,P,W,X,Y,HH decision\n    class S,T,U external\n    class AA,CC,EE,Z success\n    class BB,DD,FF,MM,NN,OO failure</code></pre>"},{"location":"diagrams/workflow-diagrams/#ai-processing-workflows","title":"AI Processing Workflows","text":""},{"location":"diagrams/workflow-diagrams/#51-cv-analysis-optimization-workflow","title":"5.1 CV Analysis &amp; Optimization Workflow","text":"<pre><code>flowchart TD\n    A[CV Submitted] --&gt; B[Extract Text Content]\n    B --&gt; C[Preprocess Text]\n    C --&gt; D[Send to AI Service]\n\n    D --&gt; E[Skill Extraction]\n    E --&gt; F[Experience Analysis]\n    F --&gt; G[Education Parsing]\n    G --&gt; H[Achievement Identification]\n    H --&gt; I[ATS Compatibility Check]\n\n    I --&gt; J[Generate Embeddings]\n    J --&gt; K[Industry Benchmarking]\n    K --&gt; L[Gap Analysis]\n    L --&gt; M[Improvement Recommendations]\n\n    M --&gt; N[Score Calculation]\n    N --&gt; O{Score Satisfactory?}\n\n    O --&gt;|Yes| P[Highlight Strengths]\n    O --&gt;|No| Q[Detailed Improvement Plan]\n\n    P --&gt; R[Generate Success Report]\n    Q --&gt; S[Prioritize Improvements]\n    S --&gt; T[Suggest Templates]\n    T --&gt; U[Recommend Skills to Add]\n    U --&gt; V[Writing Suggestions]\n\n    R --&gt; W[Store Analysis Results]\n    V --&gt; W\n\n    W --&gt; X[Update User Profile]\n    X --&gt; Y[Trigger Job Matching]\n    Y --&gt; Z[Send Analysis Report]\n    Z --&gt; AA[Process Complete]\n\n    %% Error Handling\n    D -.-&gt;|API Error| BB[Retry with Backup AI]\n    BB -.-&gt;|Still Failed| CC[Manual Review Queue]\n    CC --&gt; DD[Human Analysis]\n    DD --&gt; W\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef error fill:#ffebee,stroke:#f44336,stroke-width:2px\n    classDef manual fill:#f9f9f9,stroke:#757575,stroke-width:2px\n\n    class A,AA startEnd\n    class B,C,P,R,S,T,U,V,W,X,Y,Z process\n    class O decision\n    class D,E,F,G,H,I,J,K,L,M,N,Q ai\n    class BB,CC error\n    class DD manual</code></pre>"},{"location":"diagrams/workflow-diagrams/#52-job-matching-algorithm-workflow","title":"5.2 Job Matching Algorithm Workflow","text":"<pre><code>flowchart TD\n    A[User Profile Updated] --&gt; B[Load User Preferences]\n    B --&gt; C[Extract User Skills]\n    C --&gt; D[Get Experience Level]\n    D --&gt; E[Load Location Preferences]\n    E --&gt; F[Get Salary Expectations]\n\n    F --&gt; G[Query Available Jobs]\n    G --&gt; H[For Each Job]\n\n    H --&gt; I[Calculate Skill Match]\n    I --&gt; J[Evaluate Experience Fit]\n    J --&gt; K[Check Location Compatibility]\n    K --&gt; L[Assess Salary Alignment]\n    L --&gt; M[Calculate Cultural Fit]\n\n    M --&gt; N[Weighted Score Calculation]\n    N --&gt; O{Score Above Threshold?}\n\n    O --&gt;|No| P[Skip Job]\n    O --&gt;|Yes| Q[Add to Candidates]\n\n    P --&gt; R{More Jobs?}\n    Q --&gt; R\n\n    R --&gt;|Yes| H\n    R --&gt;|No| S[Rank by Score]\n\n    S --&gt; T[Apply ML Model]\n    T --&gt; U[Personalization Adjustment]\n    U --&gt; V[Generate Explanations]\n    V --&gt; W[Prepare Recommendations]\n\n    W --&gt; X{Recommendations Available?}\n    X --&gt;|No| Y[Generate Fallback Suggestions]\n    X --&gt;|Yes| Z[Store Match Results]\n\n    Y --&gt; Z\n    Z --&gt; AA[Update User Feed]\n    AA --&gt; BB[Trigger Notifications]\n    BB --&gt; CC[Log Matching Event]\n    CC --&gt; DD[Process Complete]\n\n    %% Machine Learning Enhancement\n    S --&gt; EE[Feature Engineering]\n    EE --&gt; FF[Model Prediction]\n    FF --&gt; GG[Confidence Scoring]\n    GG --&gt; U\n\n    %% Feedback Loop\n    DD --&gt; HH[Collect User Feedback]\n    HH --&gt; II[Update ML Model]\n    II --&gt; JJ[Improve Future Matches]\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef ai fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px\n    classDef ml fill:#e8eaf6,stroke:#3f51b5,stroke-width:2px\n\n    class A,DD,JJ startEnd\n    class B,C,D,E,F,G,P,S,V,W,Y,Z,AA,BB,CC process\n    class H,O,R,X decision\n    class I,J,K,L,M,N,Q,T,U ai\n    class EE,FF,GG,HH,II ml</code></pre>"},{"location":"diagrams/workflow-diagrams/#error-handling-workflows","title":"Error Handling Workflows","text":""},{"location":"diagrams/workflow-diagrams/#61-system-error-recovery-workflow","title":"6.1 System Error Recovery Workflow","text":"<pre><code>flowchart TD\n    A[Error Detected] --&gt; B[Classify Error Type]\n    B --&gt; C{Error Severity}\n\n    C --&gt;|Critical| D[Immediate Alert]\n    C --&gt;|High| E[Priority Queue]\n    C --&gt;|Medium| F[Standard Queue]\n    C --&gt;|Low| G[Log Only]\n\n    D --&gt; H[Page On-Call Engineer]\n    E --&gt; I[Send Alert to Team]\n    F --&gt; J[Create Ticket]\n    G --&gt; K[Background Processing]\n\n    H --&gt; L[Immediate Response]\n    I --&gt; M[Priority Investigation]\n    J --&gt; N[Standard Investigation]\n    K --&gt; O[Periodic Review]\n\n    L --&gt; P{System Down?}\n    P --&gt;|Yes| Q[Activate Failover]\n    P --&gt;|No| R[Isolate Problem]\n\n    Q --&gt; S[Switch to Backup]\n    S --&gt; T[Verify Service Restoration]\n    T --&gt; U{Service OK?}\n\n    U --&gt;|No| V[Emergency Escalation]\n    U --&gt;|Yes| W[Monitor Closely]\n\n    R --&gt; X[Implement Quick Fix]\n    X --&gt; Y{Fix Successful?}\n\n    Y --&gt;|No| Z[Escalate to Next Level]\n    Y --&gt;|Yes| AA[Monitor Solution]\n\n    M --&gt; BB[Deep Dive Analysis]\n    N --&gt; BB\n    O --&gt; BB\n\n    BB --&gt; CC[Root Cause Identified]\n    CC --&gt; DD[Implement Permanent Fix]\n    DD --&gt; EE[Test Fix Thoroughly]\n    EE --&gt; FF{Testing Passed?}\n\n    FF --&gt;|No| GG[Revise Fix]\n    FF --&gt;|Yes| HH[Deploy to Production]\n\n    GG --&gt; DD\n    HH --&gt; II[Post-Deployment Monitoring]\n    II --&gt; JJ[Update Documentation]\n    JJ --&gt; KK[Conduct Post-Mortem]\n\n    V --&gt; LL[Emergency Response Team]\n    Z --&gt; LL\n    W --&gt; MM[Incident Resolved]\n    AA --&gt; MM\n    KK --&gt; MM\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef critical fill:#ffebee,stroke:#f44336,stroke-width:3px\n    classDef emergency fill:#e91e63,stroke:#ffffff,stroke-width:3px\n\n    class A,MM startEnd\n    class D,E,F,G,H,I,J,K,L,M,N,O,R,S,T,X,BB,CC,DD,EE,HH,II,JJ,KK process\n    class B,C,P,U,Y,FF decision\n    class Q,V,Z,LL critical\n    class V,LL emergency</code></pre>"},{"location":"diagrams/workflow-diagrams/#62-data-recovery-backup-workflow","title":"6.2 Data Recovery &amp; Backup Workflow","text":"<pre><code>flowchart TD\n    A[Data Loss Detected] --&gt; B[Assess Impact Scope]\n    B --&gt; C{Data Type}\n\n    C --&gt;|User Data| D[High Priority Recovery]\n    C --&gt;|System Data| E[Medium Priority Recovery]\n    C --&gt;|Analytics Data| F[Low Priority Recovery]\n\n    D --&gt; G[Immediate Backup Check]\n    E --&gt; H[Standard Backup Check]\n    F --&gt; I[Historical Backup Check]\n\n    G --&gt; J{Recent Backup Available?}\n    H --&gt; J\n    I --&gt; J\n\n    J --&gt;|Yes| K[Validate Backup Integrity]\n    J --&gt;|No| L[Check Alternative Sources]\n\n    K --&gt; M{Backup Valid?}\n    M --&gt;|No| L\n    M --&gt;|Yes| N[Begin Recovery Process]\n\n    L --&gt; O{Alternative Found?}\n    O --&gt;|No| P[Data Loss Confirmed]\n    O --&gt;|Yes| Q[Prepare Alternative Data]\n\n    N --&gt; R[Create Recovery Point]\n    Q --&gt; R\n    R --&gt; S[Stop Write Operations]\n    S --&gt; T[Begin Data Restoration]\n\n    T --&gt; U[Monitor Recovery Progress]\n    U --&gt; V{Recovery Complete?}\n\n    V --&gt;|No| W[Continue Recovery]\n    W --&gt; U\n    V --&gt;|Yes| X[Validate Restored Data]\n\n    X --&gt; Y{Data Integrity OK?}\n    Y --&gt;|No| Z[Retry with Different Backup]\n    Y --&gt;|Yes| AA[Resume Normal Operations]\n\n    Z --&gt; K\n    AA --&gt; BB[Verify System Stability]\n    BB --&gt; CC[Update Monitoring]\n    CC --&gt; DD[Document Incident]\n\n    P --&gt; EE[Initiate Data Recreation]\n    EE --&gt; FF[Contact Affected Users]\n    FF --&gt; GG[Implement Compensation]\n    GG --&gt; DD\n\n    DD --&gt; HH[Review Backup Strategy]\n    HH --&gt; II[Implement Improvements]\n    II --&gt; JJ[Recovery Complete]\n\n    %% Styling\n    classDef startEnd fill:#e8f5e8,stroke:#4caf50,stroke-width:3px\n    classDef process fill:#e3f2fd,stroke:#2196f3,stroke-width:2px\n    classDef decision fill:#fff3e0,stroke:#ff9800,stroke-width:2px\n    classDef critical fill:#ffebee,stroke:#f44336,stroke-width:2px\n    classDef recovery fill:#e0f2f1,stroke:#009688,stroke-width:2px\n\n    class A,JJ startEnd\n    class B,G,H,I,K,L,N,Q,R,S,T,U,W,X,AA,BB,CC,DD,EE,FF,GG,HH,II process\n    class C,J,M,O,V,Y decision\n    class D,P critical\n    class N,R,T,U,W recovery</code></pre> <p>This comprehensive workflow documentation provides detailed visual guides for all major processes in the AI-Powered Job Seeker Platform, enabling better understanding of user journeys, business processes, technical implementations, and error handling procedures.</p>"}]}